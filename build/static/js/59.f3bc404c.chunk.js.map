{"version":3,"sources":["components/modals/account/AccountModal.js","components/modals/account/ChangePasswordModal.js","views/common/profile/Profile.js"],"names":["AccountModal","Component","state","visible","icon","action","employee","this","employeeState","loading","type","edit","checked","changePassword","changePasswordState","changePasswordLoading","id","firstName","lastName","role","email","username","password","birthday","accountId","currentPassword","newPassword","confirmPassword","onResetChangePasswordValue","setState","manageEmployeeModal","prevProps","prevState","modalVisible","props","account","roles","roleName","handleOnChange","event","name","target","value","handleShowPassword","handleOnSubmit","preventDefault","handleSaveAccount","handleUpdateUser","saveEmployee","then","status","messageResponse","setInterval","clearMessage","window","location","reload","catch","updateUser","handleOnChecked","handleOnChangePassword","componentDidUpdate","render","permission","userResponse","credentials","size","onDismiss","addEmployeeModal","className","onSubmit","sm","lg","onChange","placeholder","htmlFor","md","Roles","SUPER_ADMIN","disabled","autoCorrect","required","onClick","label","form","color","variant","connect","modalVisibleResponse","addAccountModal","ChangePasswordModal","changePasswordModal","Profile","message","getMe","manageAccountReponse","accountResponse","data","componentDidMount","margin","marginBottom","AlertModal","profileImage","src","charAt","style","width","created","setAlertModal"],"mappings":"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","file":"static/js/59.f3bc404c.chunk.js","sourcesContent":["import React, { Component } from \"react\"\nimport {\n  CModal,\n  CModalHeader,\n  CModalBody,\n  CModalFooter,\n  CButton,\n  CModalTitle,\n  CSpinner,\n  CForm,\n  CFormFloating,\n  CFormControl,\n  CFormLabel,\n  CCol,\n  CRow,\n  CFormSelect,\n  CFormCheck,\n} from \"@coreui/react\"\n//action\nimport { addAccountModal } from \"src/service/apiActions/modalAction/modalAction\"\nimport {\n  saveEmployee,\n  changePassword,\n  updateUser,\n} from \"src/service/apiActions/accountAction/accountAction\"\nimport { clearMessage } from \"src/service/apiActions/messageAction/messageAction\"\n//icons\nimport * as FaIcons from \"react-icons/fa\"\nimport { connect } from \"react-redux\"\nimport Roles from \"src/router/config\"\n\nexport class AccountModal extends Component {\n  state = {\n    visible: false,\n    icon: \"\",\n    action: \"\",\n    employee: this.employeeState,\n    loading: false,\n    type: \"password\",\n    edit: false,\n    checked: false,\n    changePassword: this.changePasswordState,\n    changePasswordLoading: false,\n    id: \"\",\n  }\n  employeeState = {\n    firstName: \"\",\n    lastName: \"\",\n    role: \"\",\n    email: \"\",\n    username: \"\",\n    password: \"\",\n    birthday: \"\",\n  }\n  changePasswordState = {\n    accountId: \"\",\n    currentPassword: \"\",\n    newPassword: \"\",\n    confirmPassword: \"\",\n  }\n  onResetChangePasswordValue = () => {\n    this.setState(() => this.changePasswordState)\n  }\n  componentDidUpdate(prevProps, prevState) {\n    this.manageEmployeeModal(prevProps, prevState)\n  }\n  manageEmployeeModal = (prevProps, prevState) => {\n    if (prevProps.modalVisible !== this.props.modalVisible) {\n      let { visible, action, employee, icon } = this.props.modalVisible\n      if (action === \"Add\") {\n        this.setState({\n          visible: visible,\n          action: action,\n          icon: icon,\n          edit: false,\n        })\n      } else if (action === \"Edit\") {\n        let { firstName, lastName, account, birthday, id } =\n          employee\n        this.setState({\n          visible: visible,\n          action: action,\n          icon: icon,\n          edit: true,\n          firstName: firstName,\n          lastName: lastName,\n          username: account.username,\n          role: account.roles[0].roleName,\n          email: account.email,\n          accountId: account.id,\n          birthday: birthday,\n          id: id,\n        })\n      } else if (action === \"close\") {\n        this.setState({\n          visible: visible,\n          edit: false,\n          checked: false,\n          loading: false,\n        })\n        this.onResetChangePasswordValue()\n      }\n    }\n  }\n\n  handleOnChange = (event) => {\n    let name = event.target.name\n    this.setState({\n      [name]: event.target.value,\n    })\n  }\n  handleShowPassword = (event) => {\n    const { type } = this.state\n    this.setState({\n      type: type === \"password\" ? \"text\" : \"password\",\n    })\n  }\n  handleOnSubmit = (event) => {\n    event.preventDefault()\n    let { action } = this.state\n    this.setState({\n      loading: true,\n    })\n    if (action === \"Add\") {\n      this.handleSaveAccount()\n    } else if (action === \"Edit\") {\n      this.handleUpdateUser()\n    }\n  }\n  handleSaveAccount = () => {\n    let {\n      firstName,\n      lastName,\n      email,\n      username,\n      password,\n      role,\n      birthday,\n    } = this.state\n\n    this.props\n      .saveEmployee(\n        firstName,\n        lastName,\n        email,\n        username,\n        password,\n        birthday,\n        role,\n      )\n      .then(() => {\n        let { status } = this.props.messageResponse\n        if (status === 200) {\n          this.setState({\n            loading: false,\n          })\n        }\n        setInterval(() => {\n          this.props.clearMessage()\n          window.location.reload()\n        }, 1000)\n      })\n      .catch(() => {\n        this.setState({\n          loading: false,\n        })\n      })\n  }\n  handleUpdateUser = () => {\n    let { firstName, lastName, birthday, id } = this.state\n    this.props\n      .updateUser(id, firstName, lastName, birthday)\n      .then(() => {\n        let { status } = this.props.messageResponse\n        if (status === 200) {\n          this.setState({\n            loading: false,\n          })\n        }\n        setInterval(() => {\n          this.props.clearMessage()\n          window.location.reload()\n        }, 1000)\n      })\n      .catch(() => {\n        this.setState({\n          loading: false,\n        })\n      })\n  }\n\n  handleOnChecked = () => {\n    this.setState({\n      checked: !this.state.checked,\n    })\n  }\n  handleOnChangePassword = (event) => {\n    let { currentPassword, newPassword, confirmPassword, accountId } =\n      this.state\n    this.setState({\n      changePasswordLoading: true,\n    })\n    event.preventDefault()\n    this.props\n      .changePassword(accountId, currentPassword, newPassword, confirmPassword)\n      .then(() => {\n        let { status } = this.props.messageResponse\n        if (status === 200) {\n          this.setState({\n            loading: false,\n          })\n        }\n        this.onResetChangePasswordValue()\n        this.setState({\n          changePasswordLoading: false,\n        })\n      })\n      .catch(() => {\n        let { status } = this.props.messageResponse\n        this.setState({\n          changePasswordLoading: false,\n        })\n      })\n  }\n  render() {\n    let {\n      visible,\n      firstName,\n      lastName,\n      type,\n      email,\n      username,\n      password,\n      icon,\n      action,\n      loading,\n      edit,\n      role,\n      checked,\n      newPassword,\n      currentPassword,\n      confirmPassword,\n      changePasswordLoading,\n      birthday,\n    } = this.state\n    let permission = this.props.userResponse.credentials.roles;\n    return (\n      <div>\n        <CModal visible={visible} size=\"lg\">\n          <CModalHeader\n            onDismiss={() =>\n              this.props.addEmployeeModal(false, \"close\", \"\", \"\")\n            }\n          >\n            <CModalTitle>\n              <div className=\"d-flex align-items-center\">\n                {icon}\n                {action + \" Account\"}\n              </div>\n            </CModalTitle>\n          </CModalHeader>\n          <CModalBody>\n            <CForm onSubmit={this.handleOnSubmit} id=\"employee\">\n              <div className=\"mb-3\">\n                <CRow>\n                  <CCol sm=\"12\" lg=\"6\">\n                    <CFormFloating className=\"mb-3\">\n                      <CFormControl\n                        name=\"firstName\"\n                        value={firstName}\n                        onChange={this.handleOnChange}\n                        type=\"text\"\n                        id=\"floatingFirstNameInput\"\n                        placeholder=\"Enter First Name\"\n                      />\n                      <CFormLabel htmlFor=\"floatingFirstNameInput\">\n                        First name\n                      </CFormLabel>\n                    </CFormFloating>\n                  </CCol>\n                  <CCol sm=\"12\" lg=\"6\">\n                    <CFormFloating className=\"mb-3\">\n                      <CFormControl\n                        name=\"lastName\"\n                        value={lastName}\n                        onChange={this.handleOnChange}\n                        type=\"text\"\n                        id=\"floatingLastNameInput\"\n                        placeholder=\"Enter Last Name\"\n                      />\n                      <CFormLabel htmlFor=\"floatingLastNameInput\">\n                        Last name\n                      </CFormLabel>\n                    </CFormFloating>\n                  </CCol>\n\n                  <CCol sm=\"12\" md=\"6\" lg className={permission.roleName === Roles.SUPER_ADMIN ? \"\" : \"d-none\"}>\n                    <CFormFloating className=\"mb-3\">\n                      <CFormSelect\n                        value={role}\n                        onChange={this.handleOnChange}\n                        name=\"role\"\n                        id=\"floatingSelectRole\"\n                        aria-label=\"Role Select\"\n                        disabled={edit}\n                      >\n                        <option>Choose Role</option>\n                        <option value=\"SUPER_ADMIN\">Super Admin</option>\n                        <option value=\"ADMIN\">Admin</option>\n                      </CFormSelect>\n                      <CFormLabel htmlFor=\"floatingSelectRole\">Role</CFormLabel>\n                    </CFormFloating>\n                  </CCol>\n                  <CCol sm=\"12\" lg=\"6\">\n                    <CFormFloating className=\"mb-3\">\n                      <CFormControl\n                        name=\"username\"\n                        value={username}\n                        onChange={this.handleOnChange}\n                        type=\"text\"\n                        id=\"floatingUsernameInput\"\n                        placeholder=\"Enter Username\"\n                        disabled={edit}\n                      />\n                      <CFormLabel htmlFor=\"floatingUsernameInput\">\n                        Username\n                      </CFormLabel>\n                    </CFormFloating>\n                  </CCol>\n                  <CCol sm=\"12\" lg=\"6\" className={edit ? \"d-none\" : \"\"}>\n                    <CFormFloating className=\"text-dark position-relative\">\n                      <CFormControl\n                        name=\"password\"\n                        type={type}\n                        id=\"floatingPassword\"\n                        autoCorrect=\"false\"\n                        placeholder=\"Password\"\n                        onChange={this.handleOnChange}\n                        value={password}\n                        required\n                        disabled={edit}\n                      />\n                      <CFormLabel htmlFor=\"exampleFormControlTextarea1 \">\n                        <span>Password</span>\n                      </CFormLabel>\n                      <span\n                        onClick={this.handleShowPassword}\n                        className=\"position-absolute top-50 end-0 translate-middle-y ps-4 pe-4\"\n                      >\n                        {type === \"password\" ? (\n                          <FaIcons.FaEyeSlash size={20} />\n                        ) : (\n                          <FaIcons.FaEye size={20} />\n                        )}\n                      </span>\n                    </CFormFloating>\n                  </CCol>\n                  <CCol sm=\"12\" lg=\"6\">\n                    <CFormFloating className=\"mb-3\">\n                      <CFormControl\n                        name=\"email\"\n                        value={email}\n                        onChange={this.handleOnChange}\n                        type=\"email\"\n                        id=\"floatingemailInput\"\n                        placeholder=\"Enter email\"\n                        disabled={edit}\n                      />\n                      <CFormLabel htmlFor=\"floatingemailInput\">\n                        Email\n                      </CFormLabel>\n                    </CFormFloating>\n                  </CCol>\n                  <CCol sm=\"12\" lg=\"6\">\n                    <CFormFloating className=\"mb-3\">\n                      <CFormControl\n                        name=\"birthday\"\n                        value={birthday}\n                        onChange={this.handleOnChange}\n                        type=\"date\"\n                        id=\"floatingBirthdayInput\"\n                        placeholder=\"Enter Birtday\"\n                      />\n                      <CFormLabel htmlFor=\"floatingBirthdayInput\">\n                        Birthday\n                      </CFormLabel>\n                    </CFormFloating>\n                  </CCol>\n                </CRow>\n              </div>\n            </CForm>\n            <CCol sm=\"12\" lg=\"12\" className={edit ? \"d-block\" : \"d-none\"}>\n              <CFormCheck\n                id=\"changePasswordCheckBox\"\n                label=\"Change Password\"\n                checked={checked}\n                name=\"checked\"\n                onChange={this.handleOnChecked}\n              />\n            </CCol>\n            <CForm\n              onSubmit={this.handleOnChangePassword}\n              id=\"changePassowrd\"\n              className={checked ? \"d-block\" : \"d-none\"}\n            >\n              <CRow className={checked ? \"d-block\" : \"d-none\"}>\n                <CCol sm=\"12\" lg=\"6\" className=\"mt-3\">\n                  <CFormFloating className=\"text-dark position-relative\">\n                    <CFormControl\n                      name=\"currentPassword\"\n                      type={type}\n                      id=\"floatingCurrentPassword\"\n                      autoCorrect=\"false\"\n                      placeholder=\"Current Password\"\n                      onChange={this.handleOnChange}\n                      value={currentPassword}\n                      required\n                    />\n                    <CFormLabel htmlFor=\"floatingCurrentPassword \">\n                      <span>Current Password</span>\n                    </CFormLabel>\n                    <span\n                      onClick={this.handleShowPassword}\n                      className=\"position-absolute top-50 end-0 translate-middle-y ps-4 pe-4\"\n                    >\n                      {type === \"password\" ? (\n                        <FaIcons.FaEyeSlash size={20} />\n                      ) : (\n                        <FaIcons.FaEye size={20} />\n                      )}\n                    </span>\n                  </CFormFloating>\n                </CCol>\n                <CCol sm=\"12\" lg=\"6\" className=\"mt-3\">\n                  <CFormFloating className=\"text-dark position-relative\">\n                    <CFormControl\n                      name=\"newPassword\"\n                      type={type}\n                      id=\"floatingNewPassword\"\n                      autoCorrect=\"false\"\n                      placeholder=\"New Password\"\n                      onChange={this.handleOnChange}\n                      value={newPassword}\n                      required\n                    />\n                    <CFormLabel htmlFor=\"floatingNewPassword \">\n                      <span>New Password</span>\n                    </CFormLabel>\n                    <span\n                      onClick={this.handleShowPassword}\n                      className=\"position-absolute top-50 end-0 translate-middle-y ps-4 pe-4\"\n                    >\n                      {type === \"password\" ? (\n                        <FaIcons.FaEyeSlash size={20} />\n                      ) : (\n                        <FaIcons.FaEye size={20} />\n                      )}\n                    </span>\n                  </CFormFloating>\n                </CCol>\n                <CCol sm=\"12\" lg=\"6\" className=\"mt-3\">\n                  <CFormFloating className=\"text-dark position-relative\">\n                    <CFormControl\n                      name=\"confirmPassword\"\n                      type={type}\n                      id=\"floatingConfirmPassword\"\n                      autoCorrect=\"false\"\n                      placeholder=\"Confirm Password\"\n                      onChange={this.handleOnChange}\n                      value={confirmPassword}\n                      required\n                    />\n                    <CFormLabel htmlFor=\"floatingConfirmPassword \">\n                      <span>Confirm Password</span>\n                    </CFormLabel>\n                    <span\n                      onClick={this.handleShowPassword}\n                      className=\"position-absolute top-50 end-0 translate-middle-y ps-4 pe-4\"\n                    >\n                      {type === \"password\" ? (\n                        <FaIcons.FaEyeSlash size={20} />\n                      ) : (\n                        <FaIcons.FaEye size={20} />\n                      )}\n                    </span>\n                  </CFormFloating>\n                </CCol>\n                <CCol sm=\"12\" lg=\"12\" className=\"mt-3\">\n                  <CButton\n                    type=\"submit\"\n                    form=\"changePassowrd\"\n                    disabled={changePasswordLoading}\n                  >\n                    {changePasswordLoading && (\n                      <CSpinner size=\"sm\" className=\"ms-1\" />\n                    )}\n                    Change Password\n                  </CButton>\n                </CCol>\n              </CRow>\n            </CForm>\n          </CModalBody>\n          <CModalFooter>\n            <CButton\n              color=\"dark\"\n              variant=\"ghost\"\n              onClick={() =>\n                this.props.addEmployeeModal(false, \"close\", \"\", \"\")\n              }\n            >\n              Close\n            </CButton>\n            <CButton\n              color=\"primary\"\n              type=\"submit\"\n              form=\"employee\"\n              disabled={loading}\n            >\n              {loading && <CSpinner size=\"sm\" className=\"ms-1\" />}\n              Save {action === \"Edit\" ? \"Changes\" : \"Empolyee\"}\n            </CButton>\n          </CModalFooter>\n        </CModal>\n      </div>\n    )\n  }\n}\nconst mapStateToProps = (state) => {\n  return {\n    modalVisible: state.modalVisibleResponse,\n    messageResponse: state.messageResponse,\n    userResponse: state.userResponse,\n  }\n}\nexport default connect(mapStateToProps, {\n  addEmployeeModal: addAccountModal,\n  saveEmployee,\n  clearMessage,\n  changePassword,\n  updateUser,\n})(AccountModal)\n","import React, { Component } from \"react\"\nimport {\n  CModal,\n  CModalHeader,\n  CModalBody,\n  CModalFooter,\n  CButton,\n  CModalTitle,\n  CSpinner,\n  CForm,\n  CFormFloating,\n  CFormControl,\n  CFormLabel,\n  CCol,\n  CRow,\n} from \"@coreui/react\"\nimport { connect } from \"react-redux\"\nimport * as GrIcons from \"react-icons/gr\"\nimport * as FaIcons from \"react-icons/fa\"\n\n//action\nimport { changePasswordModal } from \"src/service/apiActions/modalAction/modalAction\"\nimport { clearMessage } from \"src/service/apiActions/messageAction/messageAction\"\nimport { changePassword } from \"src/service/apiActions/accountAction/accountAction\"\nexport class ChangePasswordModal extends Component {\n  state = {\n    visible: false,\n    action: \"\",\n    loading: false,\n    type: \"password\",\n    edit: false,\n    changePasswordLoading: false,\n    changePassword: this.changePasswordState,\n  }\n  changePasswordState = {\n    accountId: \"\",\n    currentPassword: \"\",\n    newPassword: \"\",\n    confirmPassword: \"\",\n  }\n  handleOnChange = (event) => {\n    let name = event.target.name\n    this.setState({\n      [name]: event.target.value,\n    })\n  }\n  handleShowPassword = (event) => {\n    const { type } = this.state\n    this.setState({\n      type: type === \"password\" ? \"text\" : \"password\",\n    })\n  }\n  componentDidUpdate(prevProps, prevState) {\n    this.manageEmployeeModal(prevProps, prevState)\n  }\n  manageEmployeeModal = (prevProps, prevState) => {\n    if (prevProps.modalVisible !== this.props.modalVisible) {\n      let { visible, action, employee, icon } = this.props.modalVisible\n      if (action === \"ChangePassword\") {\n        this.setState({\n          visible: visible,\n          action: action,\n          icon: icon,\n          edit: true,\n          accountId: employee.account.id,\n        })\n      } else if (action === \"close\") {\n        this.setState({\n          visible: visible,\n          edit: false,\n          checked: false,\n        })\n      }\n    }\n  }\n  onResetChangePasswordValue = () => {\n    this.setState(() => this.changePasswordState)\n  }\n  handleOnChangePassword = (event) => {\n    let { currentPassword, newPassword, confirmPassword, accountId } =\n      this.state\n    this.setState({\n      changePasswordLoading: true,\n    })\n    event.preventDefault()\n    this.props\n      .changePassword(accountId, currentPassword, newPassword, confirmPassword)\n      .then(() => {\n        let { status } = this.props.messageResponse\n        if (status === 200) {\n          this.setState({\n            loading: false,\n          })\n        }\n        this.onResetChangePasswordValue()\n        this.setState({\n          changePasswordLoading: false,\n        })\n        this.props.changePasswordModal(false, \"close\", \"\", \"\")\n      })\n      .catch(() => {\n        this.setState({\n          changePasswordLoading: false,\n        })\n      })\n  }\n\n  render() {\n    let {\n      visible,\n      type,\n      action,\n      loading,\n      newPassword,\n      currentPassword,\n      confirmPassword,\n      changePasswordLoading,\n    } = this.state\n    return (\n      <>\n        <CModal visible={visible}>\n          <CModalHeader\n            onDismiss={() =>\n              this.props.changePasswordModal(false, \"close\", \"\", \"\")\n            }\n          >\n            <CModalTitle>\n              <div className=\"d-flex align-items-center\">\n                <GrIcons.GrUpdate size={20} />\n                <span className=\"ms-2\">Change Password</span>\n              </div>\n            </CModalTitle>\n          </CModalHeader>\n          <CModalBody>\n            <CForm onSubmit={this.handleOnChangePassword} id=\"changePassowrd\">\n              <CRow>\n                <CCol sm=\"12\" lg=\"12\" className=\"mt-3\">\n                  <CFormFloating className=\"text-dark position-relative\">\n                    <CFormControl\n                      name=\"currentPassword\"\n                      type={type}\n                      id=\"floatingCurrentPassword\"\n                      autoCorrect=\"false\"\n                      placeholder=\"Current Password\"\n                      onChange={this.handleOnChange}\n                      value={currentPassword}\n                      required\n                    />\n                    <CFormLabel htmlFor=\"floatingCurrentPassword \">\n                      <span>Current Password</span>\n                    </CFormLabel>\n                    <span\n                      onClick={this.handleShowPassword}\n                      className=\"position-absolute top-50 end-0 translate-middle-y ps-4 pe-4\"\n                    >\n                      {type === \"password\" ? (\n                        <FaIcons.FaEyeSlash size={20} />\n                      ) : (\n                        <FaIcons.FaEye size={20} />\n                      )}\n                    </span>\n                  </CFormFloating>\n                </CCol>\n                <CCol sm=\"12\" lg=\"12\" className=\"mt-3\">\n                  <CFormFloating className=\"text-dark position-relative\">\n                    <CFormControl\n                      name=\"newPassword\"\n                      type={type}\n                      id=\"floatingNewPassword\"\n                      autoCorrect=\"false\"\n                      placeholder=\"New Password\"\n                      onChange={this.handleOnChange}\n                      value={newPassword}\n                      required\n                    />\n                    <CFormLabel htmlFor=\"floatingNewPassword \">\n                      <span>New Password</span>\n                    </CFormLabel>\n                    <span\n                      onClick={this.handleShowPassword}\n                      className=\"position-absolute top-50 end-0 translate-middle-y ps-4 pe-4\"\n                    >\n                      {type === \"password\" ? (\n                        <FaIcons.FaEyeSlash size={20} />\n                      ) : (\n                        <FaIcons.FaEye size={20} />\n                      )}\n                    </span>\n                  </CFormFloating>\n                </CCol>\n                <CCol sm=\"12\" lg=\"12\" className=\"mt-3\">\n                  <CFormFloating className=\"text-dark position-relative\">\n                    <CFormControl\n                      name=\"confirmPassword\"\n                      type={type}\n                      id=\"floatingConfirmPassword\"\n                      autoCorrect=\"false\"\n                      placeholder=\"Confirm Password\"\n                      onChange={this.handleOnChange}\n                      value={confirmPassword}\n                      required\n                    />\n                    <CFormLabel htmlFor=\"floatingConfirmPassword \">\n                      <span>Confirm Password</span>\n                    </CFormLabel>\n                    <span\n                      onClick={this.handleShowPassword}\n                      className=\"position-absolute top-50 end-0 translate-middle-y ps-4 pe-4\"\n                    >\n                      {type === \"password\" ? (\n                        <FaIcons.FaEyeSlash size={20} />\n                      ) : (\n                        <FaIcons.FaEye size={20} />\n                      )}\n                    </span>\n                  </CFormFloating>\n                </CCol>\n                {/* <CCol sm=\"12\" lg=\"12\" className=\"mt-3\">\n                  <CButton\n                    type=\"submit\"\n                    form=\"changePassowrd\"\n                    disabled={changePasswordLoading}\n                  >\n                    {changePasswordLoading && (\n                      <CSpinner size=\"sm\" className=\"ms-1\" />\n                    )}\n                    Change Password\n                  </CButton>\n                </CCol> */}\n              </CRow>\n            </CForm>\n          </CModalBody>\n          <CModalFooter>\n            <CButton\n              color=\"dark\"\n              variant=\"ghost\"\n              onClick={() =>\n                this.props.changePasswordModal(false, \"close\", \"\", \"\")\n              }\n            >\n              Close\n            </CButton>\n            <CButton\n              color=\"primary\"\n              type=\"submit\"\n              form=\"changePassowrd\"\n              disabled={loading}\n            >\n              {loading && <CSpinner size=\"sm\" className=\"ms-1\" />}\n              Save {action === \"Edit\" ? \"Changes\" : \"Empolyee\"}\n            </CButton>\n          </CModalFooter>\n        </CModal>\n      </>\n    )\n  }\n}\nconst mapStateToProps = (state) => {\n  return {\n    modalVisible: state.modalVisibleResponse,\n    messageResponse: state.messageResponse,\n  }\n}\nexport default connect(mapStateToProps, {\n  changePasswordModal,\n  changePassword,\n  clearMessage,\n})(ChangePasswordModal)\n","import React, { Component } from \"react\"\nimport { CCard, CCardTitle, CCardBody, CButton, CAvatar } from \"@coreui/react\"\nimport { connect } from \"react-redux\"\nimport { getMe } from \"src/service/apiActions/accountAction/accountAction\"\nimport { clearMessage } from \"src/service/apiActions/messageAction/messageAction\"\nimport { setAlertModal } from \"src/service/apiActions/modalAction/modalAction\"\nimport AlertModal from \"src/components/modals/alert/AlertModal\"\nimport AccountModal from \"src/components/modals/account/AccountModal\"\nimport * as MdIcons from \"react-icons/md\"\nimport { addAccountModal } from \"src/service/apiActions/modalAction/modalAction\"\nimport ChangePasswordModal from \"src/components/modals/account/ChangePasswordModal\"\nimport { changePasswordModal } from \"src/service/apiActions/modalAction/modalAction\"\nimport Roles from \"src/router/config\"\n\nexport class Profile extends Component {\n  state = {\n    message: \"\",\n    account: [],\n    visible: false,\n  }\n  componentDidMount() {\n    this.getMe()\n  }\n  getMe = () => {\n    this.props.getMe()\n  }\n  componentDidUpdate(prevProps, prevState) {\n    this.manageAccountReponse(prevProps, prevState)\n  }\n  manageAccountReponse = (prevProps, prevState) => {\n    if (prevProps.accountResponse !== this.props.accountResponse) {\n      const { status, action, data } = this.props.accountResponse\n      if (status === 200 && action === \"GET_ME\") {\n        this.setState({\n          account: data.account,\n        })\n      }\n    }\n  }\n  render() {\n    let { account, message, visible } = this.state\n    // const id = account.account && account.account.id\n    const { roles } = this.props.userResponse.credentials\n\n    const margin = {\n      marginBottom: \"12px\",\n    }\n    return (\n      <>\n        <AlertModal />\n        <AccountModal />\n        <ChangePasswordModal />\n        {message && (\n          <div className=\"form-group d-flex justify-content-center align-items-center\">\n            <div className=\"alert alert-danger\" role=\"alert\">\n              {message}\n            </div>\n          </div>\n        )}\n        <CCard>\n          <CCardBody className=\"p-4\">\n            {roles.roleName === Roles.SUPER_ADMIN ? (\n              account.profileImage ? (\n                <CAvatar\n                  color=\"secondary\"\n                  src={account.profileImage}\n                  size=\"xl\"\n                />\n              ) : (\n                <CAvatar color=\"info\" size=\"xl\">\n                  <h1 className=\"p-0 m-0\">\n                    {account.firstName ? account.firstName.charAt(0) : \"N\"}\n                  </h1>\n                </CAvatar>\n              )\n            ) : (\n              <></>\n            )}\n            <CCardTitle className=\"d-flex justify-content-between mt-3\">\n              <div className=\"font-style d-flex \">\n                <div className=\"font-style d-flex flex-column align-items-start \">\n                  {roles.roleName === Roles.SUPER_ADMIN ? (\n                    <h6 className=\"m-0 pe-3 mb-2\">Name:</h6>\n                  ) : (\n                    <></>\n                  )}\n\n                  <h6 className=\"m-0 pe-3 mb-2\">Username:</h6>\n                  <h6 className=\"m-0 pe-3 mb-2\">Email:</h6>\n                  <h6 className=\"m-0 pe-3 mb-2\">Role:</h6>\n                </div>\n                <div className=\"font-style d-flex flex-column align-items-start text-black-50\">\n                  {roles.roleName === Roles.SUPER_ADMIN ? (\n                    <strong style={{ ...margin }}>\n                      {account.firstName && account.lastName ? (\n                        <>\n                          <span>{account.firstName}</span>\n                          <span className=\"ps-1\">{account.lastName}</span>\n                        </>\n                      ) : (\n                        <span className=\"text-danger\">No Name</span>\n                      )}\n                    </strong>\n                  ) : (\n                    <></>\n                  )}\n                  <strong style={{ ...margin }}>\n                    {account.account && account.account.username}\n                  </strong>\n                  <strong style={{ ...margin }}>\n                    {account.account && account.account.email}\n                  </strong>\n                  <strong style={{ ...margin }}>\n                    {account.account && account.account.roles[0].roleName}\n                  </strong>\n                </div>\n              </div>\n              <div className=\"d-flex justify-content-end align-items-start mb-3\">\n                <CButton\n                  color=\"info\"\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() =>\n                    this.props.addAccountModal(\n                      !visible,\n                      \"Edit\",\n                      account,\n                      <MdIcons.MdModeEdit size=\"20\" className=\"me-2\" />,\n                    )\n                  }\n                >\n                  <MdIcons.MdModeEdit size=\"20\" />\n                </CButton>\n              </div>\n            </CCardTitle>\n            <hr />\n            <CCardTitle style={{ margin: \"0 auto\", width: \"80%\" }}>\n              <div className=\"d-flex justify-content-between text-center mb-5\">\n                {/* <div className=\"font-style  w-100\">\n                  <h6>Phone number</h6>\n                  <strong className=\"text-black-50\">\n                    {account.phoneNumber === 0 ? (\n                      <span className=\"text-warning\">---</span>\n                    ) : (\n                      <span>{account.phoneNumber}</span>\n                    )}\n                  </strong>\n                </div> */}\n                <div className=\"font-style w-100\">\n                  <h6>Birthday</h6>\n                  <strong className=\"text-black-50\">\n                    {account.birthday ? (\n                      <span>{account.birthday}</span>\n                    ) : (\n                      <span className=\"text-warning\">---</span>\n                    )}\n                  </strong>\n                </div>\n                <div className=\"font-style w-100\">\n                  <h6>Created Date</h6>\n                  <strong className=\"text-black-50\">\n                    {account.account ? (\n                      <span>{account.account.created}</span>\n                    ) : (\n                      <span className=\"text-warning\">---</span>\n                    )}\n                  </strong>\n                </div>\n              </div>\n\n            </CCardTitle>\n            <hr />\n            <CCardTitle>\n              <div className=\"d-flex justify-content-between mb-5 mt-5\">\n                <div className=\"font-style  w-100\">\n                  <h6>Password</h6>\n                </div>\n                <div className=\"font-style text-end w-100\">\n                  <CButton\n                    color=\"link\"\n                    onClick={() =>\n                      this.props.changePasswordModal(\n                        !visible,\n                        \"ChangePassword\",\n                        account,\n                        <MdIcons.MdModeEdit size=\"20\" className=\"me-2\" />,\n                      )\n                    }\n                  >\n                    Change Password\n                  </CButton>\n                </div>\n              </div>\n            </CCardTitle>\n          </CCardBody>\n        </CCard>\n      </>\n    )\n  }\n}\nconst mapStateToProps = (state) => {\n  return {\n    accountResponse: state.accountResponse,\n    messageResponse: state.messageResponse,\n    userResponse: state.userResponse,\n  }\n}\nexport default connect(mapStateToProps, {\n  clearMessage,\n  getMe,\n  addAccountModal,\n  setAlertModal,\n  changePasswordModal,\n})(Profile)\n"],"sourceRoot":""}