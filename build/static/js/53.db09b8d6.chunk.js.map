{"version":3,"sources":["service/restAPI/CartApiService.js","service/apiActions/cartAction/cartAction.js","service/restAPI/OrderApiService.js","service/apiActions/indexAction.js","service/apiActions/orderAction/orderAction.js","views/common/cart/Cart.js"],"names":["addToCart","id","axios","post","headers","authHeader","getCart","get","removeItem","delete","quantityAction","action","productId","put","async","CartApiService","then","response","dispatch","type","ADD_TO_CART","payload","status","data","SET_MESSAGE","message","Promise","resolve","error","errorMessage","toString","code","reject","GET_CART_ITEMS","cart","removeCartItem","REMOVE_ITEM","console","log","QUANTITY_ACTION","setCart","getOrders","getPaymentTransactions","query","page","limit","params","updateOrderPaymentStatus","orderId","paymentStatus","placeOrderDetails","orderDetails","customerAddressId","addressId","paymentId","paymentMethodId","cartItems","items","getOrderByOrderId","updateOrderStatus","validateCart","handleError","OrderApiService","GET_ORDERS","orders","orderStatusCount","orderCounts","getOrderItems","ORDER_ITEMS","placeOrder","orderDetials","PLACE_ORDER","order","GET_ORDER_BY_ID","UPDATE_ORDER_STATUS","toUpperCase","UPDATE_PAYMENT_STATUS","GET_PAYMENT_TRANSACTIONS","payments","VALIDATE_CART","error_messages","length","join","Checkout","React","lazy","CustomerAddress","PaymentMethod","SuccessOrderPlace","Cart","Component","state","step","Tquantity","Tamount","isLoggedIn","permission","undefined","successfull","loading","redirectUrl","clientRef","checkout","manageCartItemsResponse","prevProps","prevState","cartResponse","this","props","setState","redirectUser","userResponse","roleName","credentials","roles","handleCartOnChange","handleAddressOnChange","handlePaymentMethodOnChange","handleOnNext","checkoutLock","cartId","accountId","orderResponse","is_invalidate","sendMessage","eventType","JSON","stringify","releaseCheckoutLock","handleOnPre","renderSteps","stepComponent","paymentDetailsOnChange","checkValueOnChange","getValue","paymentMethodOnChange","renderHeader","stepHeader","handleOnPlaceOrder","event","messageResponse","catch","componentDidMount","history","push","config","api","private","prefixFrontendUrl","websocketResponse","match","componentDidUpdate","receiveCheckoutEvent","forEach","item","ind","index","findIndex","item2","product","inventory","render","headerStyle","fontWeight","Roles","SUPER_ADMIN","ADMIN","to","window","location","replace","fallback","className","color","size","sm","lg","style","fontSize","map","promo","percentage","discount","productPrice","price","maxWidth","productName","quantity","toFixed","fontStyle","textAlign","variant","onClick","disabled","connect","clearMessage"],"mappings":"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","file":"static/js/53.db09b8d6.chunk.js","sourcesContent":["import authHeader from '../auth/authHeader';\nimport axios from './RestApi'\n\nexport class CartApiService {\n    addToCart(id) {\n        return axios.post(\"/cart/item/add/\" + id, {\n\n        }, {\n            headers: authHeader()\n        })\n    }\n    getCart() {\n        return axios.get(\"/cart\", {\n            headers: authHeader()\n        })\n    }\n    removeItem(id) {\n        return axios.delete(\"/cart/item/remove/\" + id, {\n            headers: authHeader()\n        });\n    }\n    quantityAction(action, productId) {\n        return axios.put(\"/cart/item/\" + action + \"/quantity/\" + productId, {}, {\n            headers: authHeader()\n        })\n    }\n}\n\nexport default new CartApiService();","import { SET_MESSAGE } from \"src/constants/userConstants\"\nimport {\n  ADD_TO_CART,\n  GET_CART_ITEMS,\n  QUANTITY_ACTION,\n  REMOVE_ITEM,\n} from \"src/service/redux/constants\"\nimport CartApiService from \"src/service/restAPI/CartApiService\"\n\nexport const addToCart = (id) => async (dispatch) => {\n  return CartApiService.addToCart(id).then(\n    (response) => {\n      dispatch({\n        type: ADD_TO_CART,\n        payload: {\n          status: 200,\n          action: \"ADDTOCART\",\n          data: {},\n        },\n      })\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: 200,\n          data: {\n            message: \"Added Successfully\",\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      const errorMessage =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: errorMessage,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\nexport const getCart = () => async (dispatch) => {\n  return CartApiService.getCart().then(\n    (response) => {\n      dispatch({\n        type: GET_CART_ITEMS,\n        payload: {\n          status: 200,\n          action: \"CARTITEMS\",\n          data: {\n            cart: response.data,\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      const errorMessage =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: errorMessage,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\n\nexport const removeCartItem = (id) => async (dispatch) => {\n  return CartApiService.removeItem(id).then(\n    (response) => {\n      dispatch({\n        type: REMOVE_ITEM,\n        payload: {\n          status: 200,\n          action: \"REMOVE\",\n          data: {},\n        },\n      })\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: 200,\n          data: {\n            message: \"Remove Item Successfully\",\n          },\n        },\n      })\n\n      return Promise.resolve()\n    },\n    (error) => {\n      console.log(error)\n      const errorMessage =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: errorMessage,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\n\nexport const quantityAction = (action, productId) => async (dispatch) => {\n  return CartApiService.quantityAction(action, productId).then(\n    (response) => {\n      dispatch({\n        type: QUANTITY_ACTION,\n        payload: {\n          status: 200,\n          action: QUANTITY_ACTION,\n          data: {},\n        },\n      })\n      // dispatch({\n      //     type: SET_MESSAGE,\n      //     payload: {\n      //         status: 200,\n      //         data: {\n      //             message: action + \" Quantity Product Id: \" + productId\n      //         }\n      //     }\n      // })\n    },\n    (error) => {\n      const errorMessage =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: errorMessage,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\n\nexport const setCart = (cart) => async (dispatch) => {\n  dispatch({\n    type: GET_CART_ITEMS,\n    payload: {\n      status: 200,\n      action: \"CARTITEMS\",\n      data: {\n        cart: cart,\n      },\n    },\n  })\n}","import authHeader from '../auth/authHeader';\nimport axios from './RestApi';\n\nexport class OrderApiService {\n    getOrders(status) {\n        return axios.get(\"/orders/status/\" + status, {\n            headers: authHeader()\n        })\n    }\n\n    getPaymentTransactions(query, page, limit) {\n        return axios.get(\"/orders/payments\", {\n            headers: authHeader(),\n            params: {\n                query: query,\n                page: page,\n                limit: limit\n            }\n        })\n    }\n\n    updateOrderPaymentStatus(orderId, paymentStatus) {\n        return axios.put(\"/orders/\" + orderId + \"/paid/\" + paymentStatus, {}, {\n            headers: authHeader()\n        })\n    }\n\n\n    placeOrderDetails(orderDetails) {\n        return axios.post(\"/orders/checkout\", {\n            customerAddressId: orderDetails.addressId,\n            paymentId: orderDetails.paymentMethodId,\n            cartItems: orderDetails.items\n        }, {\n            headers: authHeader()\n        })\n    }\n\n    getOrderByOrderId(orderId) {\n        return axios.get(\"/orders/\" + orderId, {\n            headers: authHeader()\n        })\n    }\n\n    updateOrderStatus(orderId, status) {\n        return axios.put(\"/orders/\" + orderId + \"/status/\" + status, {}, {\n            headers: authHeader()\n        })\n    }\n\n    validateCart(data) {\n        return axios.post(\"/orders/validate\", data, {\n            headers: authHeader()\n        })\n    }\n}\nexport default new OrderApiService();","import { SET_MESSAGE } from \"src/constants/userConstants\";\n\nexport const handleError = (error, dispatch) => {\n    const errorMessage =\n        (error.response &&\n            error.response.data &&\n            error.response.data.message) ||\n        error.message ||\n        error.toString();\n\n    const status = (error.response &&\n        error.response.data &&\n        error.response.data.code) ||\n        error.toString();\n\n    dispatch({\n        type: SET_MESSAGE,\n        payload: {\n            status: status,\n            data: {\n                message: errorMessage\n            }\n        }\n    })\n}","import { VALIDATE_CART, GET_ORDER_BY_ID, GET_ORDERS, ORDER_ITEMS, PLACE_ORDER, UPDATE_ORDER_STATUS, GET_PAYMENT_TRANSACTIONS, UPDATE_PAYMENT_STATUS } from \"src/service/redux/constants\";\nimport { SET_MESSAGE } from \"src/constants/userConstants\";\nimport OrderApiService from \"src/service/restAPI/OrderApiService\";\nimport { handleError } from \"../indexAction\";\n\nexport const getOrders = (status, page, limit) => async (dispatch) => {\n    return OrderApiService.getOrders(status, page, limit).then(\n        (response) => {\n            dispatch({\n                type: GET_ORDERS,\n                payload: {\n                    status: 200,\n                    action: \"GET_ORDERS\",\n                    data: {\n                        orders: response.data.orders,\n                        orderStatusCount: response.data.orderCounts\n                    }\n                }\n            })\n            return Promise.resolve();\n        },\n        (error) => {\n            handleError(error, dispatch);\n            return Promise.reject();\n        }\n    )\n\n}\n\nexport const getOrderItems = (items) => async (dispatch) => {\n    dispatch({\n        type: ORDER_ITEMS,\n        payload: {\n            status: 200,\n            action: \"ORDERITEMS\",\n            data: {\n                items: items\n            }\n        }\n    })\n}\n\nexport const placeOrder = (orderDetials) => async (dispatch) => {\n    return OrderApiService.placeOrderDetails(orderDetials).then(\n        (response) => {\n            dispatch({\n                type: PLACE_ORDER,\n                payload: {\n                    status: 200,\n                    action: \"PLACE_ORDER\",\n                    data: {\n\n                    }\n                }\n            })\n            dispatch({\n                type: SET_MESSAGE,\n                payload: {\n                    status: 200,\n                    data: {\n                        message: \"Successfully Place your Order\",\n                        order: response.data\n                    }\n                }\n            })\n            return Promise.resolve();\n        },\n        (error) => {\n            handleError(error, dispatch);\n            return Promise.reject();\n        }\n    )\n}\n\nexport const getOrderByOrderId = (orderId) => async (dispatch) => {\n    return OrderApiService.getOrderByOrderId(orderId).then(\n        (response) => {\n            dispatch({\n                type: GET_ORDER_BY_ID,\n                payload: {\n                    status: 200,\n                    action: \"GETORDERBYID\",\n                    data: {\n                        order: response.data\n                    }\n                }\n            })\n            return Promise.resolve();\n        },\n        (error) => {\n            handleError(error, dispatch);\n            return Promise.reject();\n        }\n    )\n}\n\nexport const updateOrderStatus = (orderId, status) => async (dispatch) => {\n    return OrderApiService.updateOrderStatus(orderId, status).then(\n        (response) => {\n            dispatch({\n                type: UPDATE_ORDER_STATUS,\n                payload: {\n                    status: 200,\n                    action: UPDATE_ORDER_STATUS,\n                    data: {\n                        order: response.data\n                    }\n                }\n            })\n            dispatch({\n                type: SET_MESSAGE,\n                payload: {\n                    status: 200,\n                    data: {\n                        message: \"Successfully updated order \" + orderId + \" status to \" + status.toUpperCase(),\n                        order: response.data\n                    }\n                }\n            })\n            return Promise.resolve();\n        },\n        (error) => {\n            handleError(error, dispatch);\n            return Promise.reject();\n        }\n    )\n}\n\nexport const updateOrderPaymentStatus = (orderId, paymentStatus) => async (dispatch) => {\n    return OrderApiService.updateOrderPaymentStatus(orderId, paymentStatus).then(\n        (response) => {\n            dispatch({\n                type: UPDATE_PAYMENT_STATUS,\n                payload: {\n                    status: 200,\n                    action: UPDATE_PAYMENT_STATUS,\n                    data: {\n                        order: response.data\n                    }\n                }\n            })\n            dispatch({\n                type: SET_MESSAGE,\n                payload: {\n                    status: 200,\n                    data: {\n                        //message: \"Successfully updated order \" + orderId + \" status to \" + status.toUpperCase(),\n                    }\n                }\n            })\n            return Promise.resolve();\n        },\n        (error) => {\n            handleError(error, dispatch);\n            return Promise.reject();\n        }\n    )\n}\n\nexport const getPaymentTransactions = (query, page, limit) => async (dispatch) => {\n    return OrderApiService.getPaymentTransactions(query, page, limit).then(\n        (response) => {\n            dispatch({\n                type: GET_PAYMENT_TRANSACTIONS,\n                payload: {\n                    status: 200,\n                    action: \"GET_PAYMENT_TRANSACTIONS\",\n                    data: {\n                        payments: response.data,\n                    }\n                }\n            })\n            return Promise.resolve();\n        },\n        (error) => {\n            handleError(error, dispatch);\n            return Promise.reject();\n        }\n    )\n}\n\nexport const validateCart = (data) => async (dispatch) => {\n    return OrderApiService.validateCart(data).then(\n        (response) => {\n            dispatch({\n                type: VALIDATE_CART,\n                payload: {\n                    status: 200,\n                    action: VALIDATE_CART,\n                    data: response.data\n                }\n            })\n\n            if (response.data.error_messages.length > 0) {\n                dispatch({\n                    type: SET_MESSAGE,\n                    payload: {\n                        status: 400,\n                        data: {\n                            message: response.data.error_messages.join(\"\\n\")\n                        }\n                    }\n                })\n            }\n            return Promise.resolve();\n        },\n        (error) => {\n            handleError(error, dispatch);\n            return Promise.reject();\n        }\n    )\n}\n","import React, { Component, Suspense } from \"react\"\nimport {\n  CRow,\n  CCol,\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCardFooter,\n  CSpinner,\n} from \"@coreui/react\"\nimport { DotLoader } from \"react-spinners\"\n\nimport { connect } from \"react-redux\"\n//action\nimport { clearMessage } from \"src/service/apiActions/messageAction/messageAction\"\nimport {\n  placeOrder,\n  updateOrderPaymentStatus,\n  validateCart\n} from \"src/service/apiActions/orderAction/orderAction\"\n\nimport {\n  setCart\n} from \"src/service/apiActions/cartAction/cartAction\"\n\nimport config from \"../../../config\"\n\nimport { history } from \"src/_helper/history\"\nimport { Redirect } from \"react-router-dom\"\nimport Roles from \"src/router/config\"\nimport { cibLetsEncrypt } from \"@coreui/icons\"\n\n// import SuccessOrderPlace from './SuccessOrderPlace';\nconst Checkout = React.lazy(() =>\n  import(\"src/views/common/cart/checkout/Checkout\"),\n)\nconst CustomerAddress = React.lazy(() =>\n  import(\"src/views/common/cart/customerAddress/CustomerAddress\"),\n)\nconst PaymentMethod = React.lazy(() =>\n  import(\"src/views/common/cart/payment/PaymentMethod\"),\n)\nconst SuccessOrderPlace = React.lazy(() =>\n  import(\"src/views/common/cart/SuccessOrderPlace\"),\n)\n\nexport class Cart extends Component {\n  state = {\n    step: 1,\n    items: [],\n    Tquantity: 0,\n    Tamount: 0,\n    isLoggedIn: false,\n    permission: \"\",\n    addressId: undefined,\n    paymentMethodId: undefined,\n\n    successfull: false,\n    loading: false,\n    redirectUrl: \"\",\n    clientRef: null,\n    checkout: false\n  }\n\n  componentDidMount() {\n    if (!this.props.userResponse.isLoggedIn) {\n      history.push(config.api.private.prefixFrontendUrl + \"/login\")\n    } else {\n      this.redirectUser()\n    }\n\n    if (this.props.websocketResponse) {\n      this.setState({\n        clientRef: this.props.websocketResponse.data.clientRef\n      })\n    }\n\n    if (this.props.userResponse.isLoggedIn) {\n      const { orderId, paymentStatus } = this.props.match.params\n      if (paymentStatus == \"success\" || paymentStatus == \"failed\") {\n        this.props.updateOrderPaymentStatus(orderId, paymentStatus)\n      }\n      this.setState({ successfull: paymentStatus == \"success\" })\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.props.websocketResponse !== prevProps.websocketResponse) {\n      if (this.props.websocketResponse.action == \"WEBSOCKET_REF\") {\n        let clientRef = this.props.websocketResponse.data.clientRef;\n        this.setState({\n          clientRef: clientRef\n        })\n      } else if (this.props.websocketResponse.action == \"WEBSOCKET_EVENT\") {\n        let { cart } = this.state;\n        const receiveCheckoutEvent = this.props.websocketResponse.data.message;\n        if (cart.accountId != receiveCheckoutEvent.accountId) {\n          let cartItems = cart.cartItems;\n          cartItems.forEach((item, ind) => {\n            let index = receiveCheckoutEvent.items.findIndex((item2) => item2.product.id == item.product.product.id)\n            cartItems[ind].product.inventory = receiveCheckoutEvent.items[index].inventory;\n          })\n\n          cart.cartItems = cartItems;\n          console.log(setCart)\n          this.props.setCart(cart)\n        }\n      }\n    }\n    this.manageCartItemsResponse(prevProps, prevState)\n  }\n\n  manageCartItemsResponse = (prevProps, prevState) => {\n    if (prevProps.cartResponse !== this.props.cartResponse) {\n      let { action, status, data } = this.props.cartResponse\n      if (action === \"CARTITEMS\" && status === 200) {\n        this.setState({\n          cart: data.cart,\n          items: [],\n          Tamount: 0,\n          Tquantity: 0\n        })\n      }\n    }\n  }\n  redirectUser = () => {\n    const isLoggedIn = this.props.userResponse.isLoggedIn\n    if (isLoggedIn) {\n      let roleName = this.props.userResponse.credentials.roles.roleName\n      let permission = roleName\n        ? roleName\n        : this.props.userResponse.credentials.roles\n\n      this.setState({\n        isLoggedIn: isLoggedIn,\n        permission: permission,\n      })\n    }\n  }\n  handleCartOnChange = (items, Tquantity, Tamount) => {\n    this.setState({\n      items: items,\n      Tquantity: Tquantity,\n      Tamount: Tamount,\n    })\n  }\n\n  handleAddressOnChange = (id) => {\n    this.setState({\n      addressId: id,\n    })\n  }\n\n  handlePaymentMethodOnChange = (id) => {\n    this.setState({\n      paymentMethodId: id,\n    })\n  }\n\n  handleOnNext = () => {\n    let { step } = this.state;\n    if (step === 1) {\n      this.checkoutLock()\n      const { cart, items } = this.state;\n      const data = { cartId: cart.cartId, accountId: cart.accountId, items: items };\n      this.props.validateCart(data).then((data) => {\n        const response = this.props.orderResponse;\n        if (response.data.is_invalidate) {\n          return;\n        }\n        this.setState({\n          step: ++step,\n        })\n      })\n      return;\n    } else {\n      if (step === 3) return\n      this.setState({\n        step: ++step,\n      })\n    }\n  }\n\n  sendMessage = (eventType = \"checkout\", data = {}) => {\n    this.state.clientRef.sendMessage(\n      '/app/websocket/inventory',\n      JSON.stringify({\n        'from': \"test\", 'message': data, eventType: eventType\n      })\n    );\n  }\n\n  checkoutLock = () => {\n    const { cart, items } = this.state;\n    this.sendMessage(\"checkout\", { cartId: cart.cartId, accountId: cart.accountId, items: items })\n  }\n\n  releaseCheckoutLock = () => {\n    const { cart, items } = this.state;\n    this.sendMessage(\"release_checkout\", { cartId: cart.cartId, accountId: cart.accountId, items: items })\n  }\n\n  handleOnPre = () => {\n    let { step } = this.state\n    if (step === 1) {\n      return\n    } else if (step === 2) {\n      this.releaseCheckoutLock();\n      this.setState({\n        items: []\n      });\n    }\n    this.setState({\n      step: --step,\n    })\n  }\n  renderSteps = () => {\n    let { step, addressId, paymentMethodId } = this.state\n    let stepComponent = (\n      <Checkout paymentDetailsOnChange={this.handleCartOnChange} />\n    )\n    switch (step) {\n      case 1:\n        stepComponent = (\n          <Checkout paymentDetailsOnChange={this.handleCartOnChange} />\n        )\n        return stepComponent\n      case 2:\n        stepComponent = (\n          <CustomerAddress\n            checkValueOnChange={this.handleAddressOnChange}\n            getValue={addressId}\n          />\n        )\n        return stepComponent\n\n      case 3:\n        stepComponent = (\n          <PaymentMethod\n            paymentMethodOnChange={this.handlePaymentMethodOnChange}\n            getValue={paymentMethodId}\n          />\n        )\n        return stepComponent\n\n      default:\n        return stepComponent\n    }\n  }\n  renderHeader = () => {\n    let { step } = this.state\n    let stepHeader = \"Shopping Cart\"\n    switch (step) {\n      case 1:\n        return (stepHeader = \"Shopping Cart\")\n      case 2:\n        return (stepHeader = \"Customer Address\")\n\n      case 3:\n        return (stepHeader = \"Payment Method\")\n      case 4:\n        return (stepHeader = \"\")\n\n      default:\n        return stepHeader\n    }\n  }\n  handleOnPlaceOrder = (event) => {\n    let { addressId, paymentMethodId, items } = this.state\n    let orderDetails = {\n      addressId: addressId,\n      paymentMethodId: paymentMethodId,\n      items: items,\n    }\n    this.setState({\n      loading: true,\n    })\n    this.props\n      .placeOrder(orderDetails)\n      .then(() => {\n        let { data } = this.props.messageResponse\n        this.setState({\n          successfull: true,\n          loading: false,\n          step: 4,\n          redirectUrl: data.order.redirectUrl,\n        })\n      })\n      .catch(() => {\n        this.setState({\n          successfull: false,\n          loading: false,\n        })\n      })\n  }\n\n  render() {\n    let {\n      step,\n      items,\n      Tamount,\n      Tquantity,\n      isLoggedIn,\n      permission,\n      addressId,\n      paymentMethodId,\n      successfull,\n      loading,\n      redirectUrl,\n    } = this.state\n    var totalAmount = 0\n    const headerStyle = {\n      fontWeight: \"800\",\n    }\n    if (isLoggedIn) {\n      if (permission === Roles.SUPER_ADMIN || permission === Roles.ADMIN) {\n        return <Redirect to={config.api.private.prefixFrontendUrl + \"/app\"} />\n      }\n    } else if (!this.props.userResponse.isLoggedIn) {\n      return <Redirect to={config.api.private.prefixFrontendUrl + \"/login\"} />\n    }\n\n    if (successfull && redirectUrl != \"\" && redirectUrl) {\n      window.location.replace(redirectUrl)\n      return <></>\n    }\n\n    return (\n      <div>\n        <Suspense\n          fallback={\n            <div className=\"d-flex justify-content-center align-items-center  position-fixed spinner\">\n              <DotLoader color=\"#36D7B7\" size={100} />\n            </div>\n          }\n        >\n          <CRow>\n            <h3 className=\"mt-2 mb-4\">{this.renderHeader()}</h3>\n          </CRow>\n          {successfull ? (\n            <SuccessOrderPlace />\n          ) : (\n            <CRow>\n              <CCol sm=\"12\" lg=\"8\">\n                {this.renderSteps()}\n              </CCol>\n              <CCol sm=\"12\" lg=\"4\" className=\"mb-5\">\n                <CCard>\n                  <CCardHeader>\n                    <span\n                      className=\"\"\n                      style={{ fontSize: \"18px\", ...headerStyle }}\n                    >\n                      Summary Payment\n                    </span>\n                  </CCardHeader>\n                  <CCardBody className=\"border-bottom\">\n                    <div className=\"d-flex justify-content-between bg-light p-2\">\n                      <div>\n                        <span style={{ ...headerStyle }}>Item</span>\n                      </div>\n                      <div>\n                        <span style={{ ...headerStyle }}>Quantity</span>\n                      </div>\n                      <div>\n                        <span style={{ ...headerStyle }}>Amount</span>\n                      </div>\n                      <div>\n                        <span style={{ ...headerStyle }}>Sub Amount</span>\n                      </div>\n                    </div>\n\n                    {items.length > 0 ? (\n                      items.map((item, index) => {\n                        const { promo, product } = item.product\n                        const status = promo && promo.status\n\n                        const percentage = promo && promo.percentage\n                        let discount = (product.productPrice * percentage) / 100\n                        let price = product.productPrice - discount\n                        if (status === \"ONGOING\") {\n                          totalAmount += price\n                        } else {\n                          totalAmount += product.productPrice\n                        }\n\n                        return (\n                          <>\n                            <div\n                              key={item.id}\n                              className=\"p-2 d-flex justify-content-between align-items-center\"\n                            >\n                              <span\n                                className=\"text-truncate d-inline-block\"\n                                style={{ maxWidth: \"150px\" }}\n                              >\n                                {product.productName}\n                              </span>\n                              <span>\n                                {item.quantity}\n                              </span>\n\n                              <span>\n                                &#8369;\n                                {status === \"ONGOING\" ? (\n                                  <>\n                                    <span\n                                      className=\"text-muted text-decoration-line-through me-2\"\n                                      style={{ fontSize: \"16px\" }}\n                                    >\n                                      {product.productPrice.toFixed(2)}\n                                    </span>\n                                    <span>{price.toFixed(2)}</span>\n                                  </>\n                                ) : (\n                                  product.productPrice.toFixed(2)\n                                )}\n                              </span>\n                              <span>\n                                &#8369;{(price * item.quantity).toFixed(2)}\n                              </span>\n                            </div>\n                          </>\n                        )\n                      })\n                    ) : (\n                      <CCol\n                        style={{ fontStyle: \"italic\", textAlign: \"center\" }}\n                        className=\"p-2\"\n                      >\n                        No Item\n                      </CCol>\n                    )}\n                  </CCardBody>\n                  <div className=\"p-3 \">\n                    <div className=\"d-flex justify-content-between align-items-center pb-2\">\n                      <span className=\"text-muted font-style me-2\">\n                        Total Quantity\n                      </span>\n                      <span style={{ fontWeight: \"500\" }}>{Tquantity}</span>\n                    </div>\n                    <div className=\"d-flex justify-content-between align-items-center pb-2\">\n                      <span className=\"text-muted font-style me-2\">\n                        Total Amount\n                      </span>\n                      <span style={{ fontWeight: \"500\" }}>\n                        &#8369;{Tamount.toFixed(2)}\n                      </span>\n                    </div>\n                  </div>\n                  <CCardFooter>\n                    <div className=\"d-grid gap-2 mx-auto\">\n                      {step > 1 ? (\n                        <div className=\"d-grid gap-2 d-md-flex justify-content-md-end\">\n                          <CButton\n                            variant=\"ghost\"\n                            color=\"dark\"\n                            onClick={this.handleOnPre}\n                            className=\"w-100\"\n                          >\n                            Back\n                          </CButton>\n                          {step === 3 ? (\n                            <CButton\n                              className=\"w-100\"\n                              color=\"info\"\n                              disabled={\n                                paymentMethodId === undefined ? true : false\n                              }\n                              onClick={this.handleOnPlaceOrder}\n                            >\n                              {loading && (\n                                <CSpinner size=\"sm\" className=\"ms-1\" />\n                              )}\n                              Place Order\n                            </CButton>\n                          ) : (\n                            <CButton\n                              className=\"w-100\"\n                              color=\"info\"\n                              onClick={this.handleOnNext}\n                              disabled={addressId === undefined ? true : false}\n                            >\n                              Next\n                            </CButton>\n                          )}\n                        </div>\n                      ) : (\n                        <CButton\n                          type=\"submit\"\n                          color=\"info\"\n                          disabled={items.length <= 0 ? true : false}\n                          className=\"d-flex justify-content-center align-items-center\"\n                          onClick={this.handleOnNext}\n                        >\n                          {/* <IoIcons.IoBagCheckOutline size=\"23\" /> */}\n                          <span className=\"ms-2\">Checkout</span>\n                        </CButton>\n                      )}\n                    </div>\n                  </CCardFooter>\n                </CCard>\n              </CCol>\n            </CRow>\n          )}\n        </Suspense>\n      </div>\n    )\n  }\n}\nconst mapStateToProps = (state) => {\n  return {\n    userResponse: state.userResponse,\n    messageResponse: state.messageResponse,\n    websocketResponse: state.websocketResponse,\n    cartResponse: state.cartResponse,\n    orderResponse: state.orderResponse\n  }\n}\nexport default connect(mapStateToProps, {\n  clearMessage,\n  placeOrder,\n  updateOrderPaymentStatus,\n  validateCart,\n  setCart\n})(Cart)\n"],"sourceRoot":""}