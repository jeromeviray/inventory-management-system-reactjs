{"version":3,"sources":["components/modals/scanBarcode/ScanBarcodeModal.js","service/apiActions/scannerAction/scannerAction.js","views/private/products/Products.js"],"names":["BarcodeScannerComponent","React","lazy","ScanBarcodeModal","Component","constructor","props","super","manageModalVisible","prevProps","prevState","modalVisible","this","action","visible","setState","stopStreaming","decodeBarcode","handleDecodeBarcode","decoded","handleOnClose","state","console","log","setScanModal","facingMode","componentDidUpdate","render","alignment","onDismiss","className","fallback","color","size","dismissible","variant","onClick","delay","stopStream","torch","onUpdate","err","result","text","getDecodedBarcode","connect","modalVisibleResponse","async","dispatch","type","GET_DECODED_BARCODE","payload","ProductDetialsModal","ProductEditorModal","Products","products","data","totalPages","keyword","page","limit","query","manageScannerResponse","scannerResponse","status","getProducts","manageStatus","shape","handleSearch","event","target","value","handleOnSubmitSearch","preventDefault","handlePageClick","selected","handleGetProduct","id","accessToken","userResponse","credentials","token","getProduct","renderScanBarcodeModal","handleStatusOnClick","componentDidMount","getStatus","location","history","replace","getProductsByStatus","manageModalResponse","manageProductResponse","response","productResponse","editProductModal","product","renderProductEditorModal","message","setProductModal","style","marginLeft","onSubmit","placeholder","onChange","form","content","trigger","componentRef","sm","map","active","striped","hover","responsive","bordered","align","ref","el","totalItems","scope","colSpan","role","length","index","barcode","productName","productPrice","threshold","totalStock","inventory","String","height","width","fontSize","margin","background","toFixed","setProductDetailsModal","setAlertModal","previousLabel","nextLabel","breakLabel","breakClassName","pageCount","marginPagesDisplayed","pageRangeDisplayed","onPageChange","containerClassName","activeClassName","withRouter","productResponser","messageResponse","inventoryResponse","clearMessage"],"mappings":"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","file":"static/js/51.80476927.chunk.js","sourcesContent":["import React, { Component, Suspense } from \"react\"\nimport {\n  CContainer,\n  CModal,\n  CModalHeader,\n  CModalBody,\n  CModalFooter,\n  CButton,\n  CModalTitle,\n  CAlert,\n} from \"@coreui/react\"\nimport { connect } from \"react-redux\"\n//action\nimport { setScanModal } from \"src/service/apiActions/modalAction/modalAction\"\nimport { getDecodedBarcode } from \"src/service/apiActions/scannerAction/scannerAction\"\nimport { DotLoader } from \"react-spinners\"\nimport * as FaIcons from \"react-icons/fa\"\n\nconst BarcodeScannerComponent = React.lazy(() =>\n  import(\"react-qr-barcode-scanner\"),\n)\n\nexport class ScanBarcodeModal extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      visible: false,\n\n      decodeBarcode: \"\",\n      stopStreaming: false,\n      action: \"\",\n      facingMode: \"environment\"\n    }\n  }\n  componentDidUpdate(prevProps, prevState) {\n    this.manageModalVisible(prevProps, prevState)\n  }\n  manageModalVisible = (prevProps, prevState) => {\n    if (prevProps.modalVisible !== this.props.modalVisible) {\n      const { action, visible } = this.props.modalVisible\n      if (action === \"barcode\") {\n        this.setState({\n          visible: visible,\n          stopStreaming: false,\n          decodeBarcode: \"\",\n          action: action,\n        })\n      } else if (action === \"close\") {\n        this.setState({\n          visible: visible,\n          stopStreaming: false,\n          decodeBarcode: \"\",\n        })\n      } else if (action === \"closeScan\") {\n        this.setState({\n          visible: visible,\n          stopStreaming: false,\n          decodeBarcode: \"\",\n        })\n      } else if (action === \"inputBarcode\") {\n        this.setState({ action: action, visible: visible, decodeBarcode: \"\" })\n      }\n    }\n  }\n  handleDecodeBarcode = (decoded) => {\n    if (decoded) {\n      this.setState({\n        decodeBarcode: decoded,\n        stopStreaming: true,\n      })\n      // this.props.getDecodedBarcode(decoded, \"DECODEDBARCODE\");\n      // this.props.setScanModal(false, \"close\")\n    }\n  }\n  handleOnClose = () => {\n    const { action } = this.state\n    console.log(action)\n\n    if (action === \"inputBarcode\") {\n      this.props.setScanModal(false, \"closeScan\")\n    } else {\n      this.props.setScanModal(false, \"close\")\n    }\n  }\n  render() {\n    let { visible, decodeBarcode, stopStreaming, action, facingMode } = this.state\n    return (\n      <div>\n        <CModal\n          visible={visible}\n          alignment=\"center\"\n          onDismiss={this.handleOnClose}\n        >\n          <CModalHeader onDismiss={this.handleOnClose}>\n            <CModalTitle>\n              <div className=\"d-flex align-items-center\">Scanner</div>\n            </CModalTitle>\n          </CModalHeader>\n          <CModalBody>\n            <CContainer className=\"text-center\">\n              <Suspense\n                fallback={\n                  <div className=\"d-flex justify-content-center align-items-center  position-fixed spinner\">\n                    <DotLoader color=\"#36D7B7\" size={100} />\n                  </div>\n                }\n              >\n                <CAlert color=\"info\" dismissible>\n                  <strong>Scan Product Barcode to Search</strong>\n                </CAlert>\n                <CButton variant=\"ghost\"\n                  color=\"secondary\"\n                  className=\"mb-3 d-flex justify-content-start\"\n                  onClick={() => this.setState({\n                    facingMode: facingMode === \"environment\" ? \"user\" : \"environment\"\n                  })}>\n                  {facingMode === \"environment\" ? \"Rear\" : \"Front\"}\n                </CButton>\n                <BarcodeScannerComponent\n                  className=\"w-25\"\n                  delay={500}\n                  facingMode={facingMode}\n                  stopStream={stopStreaming}\n                  torch=\"true\"\n                  onUpdate={(err, result) => {\n                    if (result) this.handleDecodeBarcode(result.text)\n                  }}\n                />\n              </Suspense>\n\n              <div>\n                <h4>{decodeBarcode}</h4>\n                {decodeBarcode &&\n                  (action === \"inputBarcode\" ? (\n                    <>\n                      <CButton\n                        onClick={() => {\n                          this.props.getDecodedBarcode(\n                            decodeBarcode,\n                            \"inputBarcode\",\n                          )\n                          this.setState({\n                            visible: false,\n                          })\n                        }}\n                        color=\"info\"\n                        variant=\"outline\"\n                        className=\"\"\n                      >\n                        <span className=\"ms-2\">Insert</span>\n                      </CButton>\n                    </>\n                  ) : (\n                    <CButton\n                      onClick={() => {\n                        this.props.getDecodedBarcode(\n                          decodeBarcode,\n                          \"DECODEDBARCODE\",\n                        )\n                        this.setState({\n                          visible: false,\n                        })\n                      }}\n                      color=\"info\"\n                      variant=\"outline\"\n                      className=\"\"\n                    >\n                      <FaIcons.FaSearch />\n                      <span className=\"ms-2\">Search</span>\n                    </CButton>\n                  ))}\n              </div>\n            </CContainer>\n          </CModalBody>\n          <CModalFooter>\n            <CButton color=\"dark\" variant=\"ghost\" onClick={this.handleOnClose}>\n              Close\n            </CButton>\n          </CModalFooter>\n        </CModal>\n      </div>\n    )\n  }\n}\nconst mapStateToProps = (state) => {\n  return {\n    modalVisible: state.modalVisibleResponse,\n  }\n}\nexport default connect(mapStateToProps, {\n  setScanModal,\n  getDecodedBarcode,\n})(ScanBarcodeModal)\n","import { GET_DECODED_BARCODE } from \"src/service/redux/constants\"\n\nexport const getDecodedBarcode = (decoded, action) => async (dispatch) => {\n    dispatch({\n        type: GET_DECODED_BARCODE,\n        payload: {\n            action: action,\n            decoded: decoded\n        }\n    })\n}","import React, { Component, lazy } from \"react\"\nimport {\n  CTable,\n  CTableHead,\n  CTableRow,\n  CTableHeaderCell,\n  CTableDataCell,\n  CTableBody,\n  CTableCaption,\n  CButton,\n  CForm,\n  CInputGroup,\n  CFormControl,\n  CBadge,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CRow,\n  CButtonGroup,\n  CTooltip,\n} from \"@coreui/react\"\nimport * as FaIcons from \"react-icons/fa\"\nimport * as MdIcons from \"react-icons/md\"\nimport * as BiIcons from \"react-icons/bi\"\nimport Barcode from \"react-barcode\"\nimport ReactPaginate from \"react-paginate\"\n//action\nimport { connect } from \"react-redux\"\nimport { withRouter } from \"react-router-dom\"\nimport {\n  getProductsByStatus,\n  getProduct,\n} from \"../../../service/apiActions/productAction/productAction\"\nimport { setProductModal } from \"../../../service/apiActions/modalAction/modalAction\"\nimport {\n  setProductDetailsModal,\n  editProductModal,\n} from \"../../../service/apiActions/modalAction/modalAction\"\nimport { clearMessage } from \"src/service/apiActions/messageAction/messageAction\"\nimport {\n  setAlertModal,\n  setScanModal,\n} from \"../../../service/apiActions/modalAction/modalAction\"\n\nimport AlertModal from \"src/components/modals/alert/AlertModal\"\nimport ScanBarcodeModal from \"src/components/modals/scanBarcode/ScanBarcodeModal\"\nimport ReactToPrint from \"react-to-print\"\n\nimport { history } from \"src/_helper/history\"\nimport * as IoIcons from \"react-icons/io5\"\n\nconst ProductDetialsModal = lazy(() =>\n  import(\"src/components/modals/product/ProductDetialsModal\"),\n)\nconst ProductEditorModal = lazy(() =>\n  import(\"src/components/modals/product/ProductEditorModal.js\"),\n)\n//action\nclass Products extends Component {\n  state = {\n    products: {\n      data: [],\n      totalPages: 0,\n    },\n    keyword: \"\",\n    visible: false,\n\n    page: 0,\n    limit: 10,\n    query: \"\",\n  }\n\n  componentDidMount() {\n    const getStatus = this.props.location.state\n\n    history.replace(\"/app/products/products\", null)\n    const { page, status, limit, query } = this.state\n    if (getStatus) {\n      this.getProducts(query, getStatus, page, limit)\n      this.setState({\n        status: getStatus,\n      })\n    } else {\n      this.getProducts(query, status, page, limit)\n    }\n  }\n\n  getProducts(query, status, page, limit) {\n    this.props.getProductsByStatus(query, status, page, limit)\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    this.manageModalResponse(prevProps, prevProps)\n    this.manageProductResponse(prevProps, prevState)\n    this.manageScannerResponse(prevProps, prevState)\n  }\n\n  manageModalResponse(prevProps, prevState) {\n    if (prevProps.modalVisibleResponse !== this.props.modalVisibleResponse) {\n      let response = this.props.modalVisibleResponse\n      this.setState({\n        visible: response.visible,\n      })\n      if (response.action === \"close\") {\n        const { page, limit, query, status } = this.state\n        this.getProducts(query, status, page, limit)\n      }\n    }\n  }\n  manageProductResponse(prevProps, prevState) {\n    const { visible } = this.state\n\n    if (prevProps.productResponse !== this.props.productResponse) {\n      let { action, status, data } = this.props.productResponse\n      if (action === \"GETBYID\") {\n        if (status >= 200 && status <= 300) {\n          this.props.editProductModal(\n            !visible,\n            \"Edit\",\n            data.product,\n            <FaIcons.FaEdit size={20} />,\n          )\n        }\n      } else if (status === 200 && action === \"GET_PRODUCTS_BY_STATUS\") {\n        this.setState({\n          products: data.products,\n        })\n      }\n    }\n  }\n  manageScannerResponse = (prevProps, prevState) => {\n    if (prevProps.scannerResponse !== this.props.scannerResponse) {\n      let { action, decoded } = this.props.scannerResponse\n      if (action === \"DECODEDBARCODE\") {\n        const { page, limit, status } = this.state\n        this.getProducts(decoded, status, page, limit)\n        this.setState({ query: decoded })\n      }\n    }\n  }\n  renderProductEditorModal() {\n    return <ProductEditorModal />\n  }\n\n  manageStatus = (status) => {\n    switch (status) {\n      case \"OK\":\n        return (\n          <CBadge color=\"success\" shape=\"rounded-pill\">\n            {status}\n          </CBadge>\n        )\n      case \"LOW\":\n        return (\n          <CBadge color=\"warning\" shape=\"rounded-pill\">\n            {status}\n          </CBadge>\n        )\n      case \"OUT_OF_STOCK\":\n        return (\n          <CBadge color=\"danger\" shape=\"rounded-pill\">\n            OUT OF STOCK\n          </CBadge>\n        )\n      default:\n        return (\n          <CBadge color=\"danger\" shape=\"rounded-pill\">\n            {status}\n          </CBadge>\n        )\n    }\n  }\n\n  handleSearch = (event) => {\n    const { page, limit, status } = this.state\n    this.getProducts(event.target.value, status, page, limit)\n    this.setState({ query: event.target.value })\n  }\n  handleOnSubmitSearch = (event) => {\n    event.preventDefault()\n    const { query, page, limit, status } = this.state\n    this.getProducts(query, status, page, limit)\n    this.setState({\n      query: event.target.value,\n    })\n  }\n  handlePageClick = (data) => {\n    let page = data.selected\n    this.setState({ page: page })\n    const { limit, query, status } = this.state\n    this.getProducts(query, status, page, limit)\n  }\n  handleGetProduct = (id) => {\n    const { accessToken, type } = this.props.userResponse.credentials\n    const token = type + accessToken\n\n    this.props.getProduct(id, token)\n  }\n\n  renderScanBarcodeModal = () => {\n    return <ScanBarcodeModal />\n  }\n  handleStatusOnClick = (status) => {\n    const { query, page, limit } = this.state\n\n    if (status === \"ALL\") {\n      this.setState({\n        status: \"\",\n      })\n      this.getProducts(query, \"\", page, limit)\n    } else {\n      this.setState({\n        status: status,\n      })\n      this.getProducts(query, status, page, limit)\n    }\n  }\n  render() {\n    let { visible, message, products, status } = this.state\n    return (\n      <>\n        {this.renderProductEditorModal()}\n        {this.renderScanBarcodeModal()}\n        <AlertModal />\n\n        <ProductDetialsModal />\n        <div className=\"d-flex justify-content-between mb-2\">\n          <div className=\"w-100\">\n            <CButton\n              shape=\"rounded-pill\"\n              color=\"primary\"\n              variant=\"ghost\"\n              className=\"d-flex justify-content-center align-items-center mb-3\"\n              onClick={() =>\n                this.props.setProductModal(\n                  !visible,\n                  \"Add\",\n                  <FaIcons.FaPlus size={20} />,\n                )\n              }\n            >\n              <FaIcons.FaPlus size={20} />\n              <span style={{ marginLeft: \"10px\" }}>Add Product</span>\n            </CButton>\n          </div>\n\n          <div className=\"w-100 d-flex justify-content-end align-items-center \">\n            <CForm\n              onSubmit={this.handleOnSubmitSearch}\n              id=\"search-form\"\n              className=\"w-75  d-none d-lg-block\"\n            >\n              <CInputGroup>\n                <CFormControl\n                  type=\"text\"\n                  id=\"floatingInput\"\n                  placeholder=\"Search\"\n                  className=\"p-2\"\n                  value={this.state.query}\n                  onChange={this.handleSearch}\n                />\n                <CButton\n                  form=\"search-form\"\n                  type=\"submit\"\n                  color=\"info\"\n                  variant=\"outline\"\n                  id=\"btn-search\"\n                  className=\"\"\n                >\n                  <FaIcons.FaSearch />\n                </CButton>\n              </CInputGroup>\n            </CForm>\n\n            <div className=\"text-center\">\n              <CTooltip content=\"Scanner barcode\">\n                <CButton\n                  className=\"pt-2 pb-2 ms-2\"\n                  type=\"button\"\n                  color=\"info\"\n                  variant=\"outline\"\n                  id=\"btn-scan-barcode\"\n                  onClick={() => this.props.setScanModal(!visible, \"barcode\")}\n                >\n                  <BiIcons.BiBarcodeReader size=\"24\" />\n                </CButton>\n              </CTooltip>\n            </div>\n            <div className=\"d-flex align-items-end flex-row-reverse m-2  d-none d-lg-block\">\n              <ReactToPrint\n                trigger={() => (\n                  <CTooltip content=\"Print Products\">\n                    <CButton\n                      type=\"button\"\n                      variant=\"outline\"\n                      color=\"info\"\n                      className=\" pt-2 pb-2 \"\n                    >\n                      <IoIcons.IoPrintOutline size={20} />\n                    </CButton>\n                  </CTooltip>\n                )}\n                content={() => this.componentRef}\n              />\n            </div>\n\n          </div>\n\n        </div>\n        <div className=\"justify-content-center mb-3 mt-3  d-lg-none d-flex\">\n          <CForm\n            onSubmit={this.handleOnSubmitSearch}\n            id=\"search-form\"\n            className=\"w-75 \"\n          >\n            <CInputGroup>\n              <CFormControl\n                type=\"text\"\n                id=\"floatingInput\"\n                placeholder=\"Search\"\n                className=\"p-2\"\n                value={this.state.query}\n                onChange={this.handleSearch}\n              />\n              <CButton\n                form=\"search-form\"\n                type=\"submit\"\n                color=\"info\"\n                variant=\"outline\"\n                id=\"btn-search\"\n                className=\"\"\n              >\n                <FaIcons.FaSearch />\n              </CButton>\n            </CInputGroup>\n          </CForm>\n        </div>\n        <CCard className=\"mb-4 bg-transparent border-0\">\n          <CCardHeader>\n            <CRow>\n              <CCol sm=\"5\" className=\"d-flex align-items-center\">\n                <h4 className=\"card-title mb-0 \">Products</h4>\n              </CCol>\n              <CCol sm=\"7\">\n                <CButtonGroup className=\"float-end\">\n                  {[\"ALL\", \"OK\", \"LOW\", \"OUT_OF_STOCK\"].map((value) => (\n                    <CButton\n                      color={\n                        value === \"LOW\"\n                          ? \"outline-warning\"\n                          : value === \"OUT_OF_STOCK\"\n                          ? \"outline-danger\"\n                          : value === \"ALL\"\n                          ? \"outline-secondary\"\n                          : \"outline-success\"\n                      }\n                      key={value}\n                      className=\"mx-0\"\n                      active={value === status}\n                      onClick={() => this.handleStatusOnClick(value)}\n                    >\n                      {value}\n                    </CButton>\n                  ))}\n                </CButtonGroup>\n              </CCol>\n            </CRow>\n          </CCardHeader>\n          <CCardBody className=\"p-0 m-0 \">\n            <CTable\n              striped\n              hover\n              className=\"shadow-sm \"\n              responsive\n              bordered\n              align=\"middle\"\n              ref={(el) => (this.componentRef = el)}\n            >\n              <CTableCaption>\n                List of Products: <b>{products.totalItems}</b>\n              </CTableCaption>\n\n              <CTableHead color=\"dark\">\n                <CTableRow className=\"text-center\">\n                  <CTableHeaderCell scope=\"col\">Barcode</CTableHeaderCell>\n                  <CTableHeaderCell scope=\"col\">Name</CTableHeaderCell>\n                  <CTableHeaderCell scope=\"col\">Price</CTableHeaderCell>\n                  <CTableHeaderCell scope=\"col\">\n                    Alert Stocks Threshold\n                  </CTableHeaderCell>\n                  <CTableHeaderCell scope=\"col\">Total Stocks</CTableHeaderCell>\n                  <CTableHeaderCell scope=\"col\">Status</CTableHeaderCell>\n                  <CTableHeaderCell scope=\"col\">Action</CTableHeaderCell>\n                </CTableRow>\n              </CTableHead>\n              <CTableBody className=\"text-center\" color=\"light\">\n                {message && (\n                  <CTableRow className=\"text-center\">\n                    <CTableDataCell colSpan=\"8\">\n                      <div className=\"alert alert-danger\" role=\"alert\">\n                        {message}\n                      </div>\n                    </CTableDataCell>\n                  </CTableRow>\n                )}\n                {products.data.length > 0 ? (\n                  products.data.map((product, index) => {\n                    const { id, barcode, productName, productPrice } =\n                      product.product\n                    const { threshold, status, totalStock } = product.inventory\n                    return (\n                      <CTableRow className=\"text-center\" key={index}>\n                        <CTableDataCell>\n                          <Barcode\n                            value={String(barcode)}\n                            height={50}\n                            width={1}\n                            fontSize={14}\n                            margin={7}\n                            background=\"#f5f5f548\"\n                          />\n                        </CTableDataCell>\n                        <CTableDataCell>{productName}</CTableDataCell>\n                        <CTableDataCell>\n                          &#8369;{productPrice.toFixed(2)}\n                        </CTableDataCell>\n                        <CTableDataCell>{threshold}</CTableDataCell>\n                        <CTableDataCell>{totalStock}</CTableDataCell>\n                        <CTableDataCell>\n                          {this.manageStatus(status)}\n                        </CTableDataCell>\n                        <CTableDataCell>\n                          <CTooltip content=\"View Product Details\">\n                            <CButton\n                              color=\"secondary\"\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() =>\n                                this.props.setProductDetailsModal(\n                                  true,\n                                  \"view\",\n                                  product,\n                                )\n                              }\n                            >\n                              <FaIcons.FaEye size=\"20\" />\n                            </CButton>\n                          </CTooltip>\n                          <CTooltip content=\"Edit Product\">\n                            <CButton\n                              color=\"info\"\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => this.handleGetProduct(id)}\n                            >\n                              <FaIcons.FaEdit size=\"20\" />\n                            </CButton>\n                          </CTooltip>\n                          <CTooltip content=\"Delete Product\">\n                            <CButton\n                              color=\"danger\"\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() =>\n                                this.props.setAlertModal(\n                                  !visible,\n                                  \"DELETEPRODUCT\",\n                                  \"PRODUCT\",\n                                  id,\n                                )\n                              }\n                            >\n                              <MdIcons.MdDelete size=\"20\" />\n                            </CButton>\n                          </CTooltip>\n                        </CTableDataCell>\n                      </CTableRow>\n                    )\n                  })\n                ) : (\n                  <CTableRow>\n                    <CTableDataCell colSpan=\"7\">No data</CTableDataCell>\n                  </CTableRow>\n                )}\n              </CTableBody>\n            </CTable>\n          </CCardBody>\n        </CCard>\n        <ReactPaginate\n          previousLabel={\"previous\"}\n          nextLabel={\"next\"}\n          breakLabel={\"...\"}\n          breakClassName={\"break-me\"}\n          pageCount={products.totalPages}\n          marginPagesDisplayed={2}\n          pageRangeDisplayed={5}\n          onPageChange={this.handlePageClick}\n          containerClassName={\"pagination\"}\n          activeClassName={\"active\"}\n        />\n      </>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    productResponse: state.productResponser,\n    modalVisibleResponse: state.modalVisibleResponse,\n    userResponse: state.userResponse,\n    messageResponse: state.messageResponse,\n    inventoryResponse: state.inventoryResponse,\n    scannerResponse: state.scannerResponse,\n  }\n}\n\nexport default withRouter(\n  connect(mapStateToProps, {\n    setProductModal,\n    getProductsByStatus,\n    clearMessage,\n    setProductDetailsModal,\n    getProduct,\n    editProductModal,\n    clearMessage,\n    setAlertModal,\n    setScanModal,\n  })(Products),\n)\n"],"sourceRoot":""}