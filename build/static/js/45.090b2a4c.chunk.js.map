{"version":3,"sources":["views/private/products/Products.js","components/modals/scanBarcode/ScanBarcodeModal.js","service/apiActions/scannerAction/scannerAction.js"],"names":["ProductDetialsModal","lazy","ProductEditorModal","Products","Component","state","products","data","totalPages","keyword","visible","page","limit","query","manageScannerResponse","prevProps","prevState","scannerResponse","this","props","action","decoded","status","getProducts","setState","manageStatus","color","shape","handleSearch","event","target","value","handleOnSubmitSearch","preventDefault","handlePageClick","selected","handleGetProduct","id","accessToken","type","userResponse","credentials","token","getProduct","renderScanBarcodeModal","handleStatusOnClick","componentDidMount","getStatus","location","history","replace","getProductsByStatus","componentDidUpdate","manageModalResponse","manageProductResponse","modalVisibleResponse","response","productResponse","editProductModal","product","size","renderProductEditorModal","render","message","className","variant","onClick","setProductModal","style","marginLeft","onSubmit","placeholder","onChange","form","setScanModal","trigger","content","componentRef","sm","map","active","striped","hover","responsive","bordered","align","ref","el","totalItems","scope","colSpan","role","length","index","barcode","productName","productPrice","threshold","totalStock","inventory","String","height","width","fontSize","margin","background","toFixed","setProductDetailsModal","setAlertModal","previousLabel","nextLabel","breakLabel","breakClassName","pageCount","marginPagesDisplayed","pageRangeDisplayed","onPageChange","containerClassName","activeClassName","withRouter","connect","productResponser","messageResponse","inventoryResponse","clearMessage","BarcodeScannerComponent","React","ScanBarcodeModal","constructor","super","manageModalVisible","modalVisible","stopStreaming","decodeBarcode","handleDecodeBarcode","handleOnClose","console","log","alignment","onDismiss","fallback","dismissible","delay","facingMode","stopStream","torch","onUpdate","err","result","text","getDecodedBarcode","async","dispatch","GET_DECODED_BARCODE","payload"],"mappings":"qKAAA,kMAmDA,MAAMA,EAAsBC,gBAAK,IAC/B,4EAEIC,EAAqBD,gBAAK,IAC9B,gEAGF,MAAME,UAAiBC,YAAW,eAAD,oBAC/BC,MAAQ,CACNC,SAAU,CACRC,KAAM,GACNC,WAAY,GAEdC,QAAS,GACTC,SAAS,EAETC,KAAM,EACNC,MAAO,GACPC,MAAO,IAXsB,KAwE/BC,sBAAwB,CAACC,EAAWC,KAClC,GAAID,EAAUE,kBAAoBC,KAAKC,MAAMF,gBAAiB,CAC5D,IAAI,OAAEG,EAAF,QAAUC,GAAYH,KAAKC,MAAMF,gBACrC,GAAe,mBAAXG,EAA6B,CAC/B,MAAM,KAAET,EAAF,MAAQC,EAAR,OAAeU,GAAWJ,KAAKb,MACrCa,KAAKK,YAAYF,EAASC,EAAQX,EAAMC,GACxCM,KAAKM,SAAS,CAAEX,MAAOQ,OA9EE,KAsF/BI,aAAgBH,IACd,OAAQA,GACN,IAAK,KACH,OACE,cAAC,IAAD,CAAQI,MAAM,UAAUC,MAAM,eAA9B,SACGL,IAGP,IAAK,MACH,OACE,cAAC,IAAD,CAAQI,MAAM,UAAUC,MAAM,eAA9B,SACGL,IAGP,IAAK,eACH,OACE,cAAC,IAAD,CAAQI,MAAM,SAASC,MAAM,eAA7B,0BAIJ,QACE,OACE,cAAC,IAAD,CAAQD,MAAM,SAASC,MAAM,eAA7B,SACGL,MA7GoB,KAmH/BM,aAAgBC,IACd,MAAM,KAAElB,EAAF,MAAQC,EAAR,OAAeU,GAAWJ,KAAKb,MACrCa,KAAKK,YAAYM,EAAMC,OAAOC,MAAOT,EAAQX,EAAMC,GACnDM,KAAKM,SAAS,CAAEX,MAAOgB,EAAMC,OAAOC,SAtHP,KAwH/BC,qBAAwBH,IACtBA,EAAMI,iBACN,MAAM,MAAEpB,EAAF,KAASF,EAAT,MAAeC,EAAf,OAAsBU,GAAWJ,KAAKb,MAC5Ca,KAAKK,YAAYV,EAAOS,EAAQX,EAAMC,GACtCM,KAAKM,SAAS,CACZX,MAAOgB,EAAMC,OAAOC,SA7HO,KAgI/BG,gBAAmB3B,IACjB,IAAII,EAAOJ,EAAK4B,SAChBjB,KAAKM,SAAS,CAAEb,KAAMA,IACtB,MAAM,MAAEC,EAAF,MAASC,EAAT,OAAgBS,GAAWJ,KAAKb,MACtCa,KAAKK,YAAYV,EAAOS,EAAQX,EAAMC,IApIT,KAsI/BwB,iBAAoBC,IAClB,MAAM,YAAEC,EAAF,KAAeC,GAASrB,KAAKC,MAAMqB,aAAaC,YAChDC,EAAQH,EAAOD,EAErBpB,KAAKC,MAAMwB,WAAWN,EAAIK,IA1IG,KA6I/BE,uBAAyB,IAChB,cAAC,IAAD,IA9IsB,KAgJ/BC,oBAAuBvB,IACrB,MAAM,MAAET,EAAF,KAASF,EAAT,MAAeC,GAAUM,KAAKb,MAErB,QAAXiB,GACFJ,KAAKM,SAAS,CACZF,OAAQ,KAEVJ,KAAKK,YAAYV,EAAO,GAAIF,EAAMC,KAElCM,KAAKM,SAAS,CACZF,OAAQA,IAEVJ,KAAKK,YAAYV,EAAOS,EAAQX,EAAMC,KA9I1CkC,oBACE,MAAMC,EAAY7B,KAAKC,MAAM6B,SAAS3C,MAEtC4C,IAAQC,QAAQ,yBAA0B,MAC1C,MAAM,KAAEvC,EAAF,OAAQW,EAAR,MAAgBV,EAAhB,MAAuBC,GAAUK,KAAKb,MACxC0C,GACF7B,KAAKK,YAAYV,EAAOkC,EAAWpC,EAAMC,GACzCM,KAAKM,SAAS,CACZF,OAAQyB,KAGV7B,KAAKK,YAAYV,EAAOS,EAAQX,EAAMC,GAI1CW,YAAYV,EAAOS,EAAQX,EAAMC,GAC/BM,KAAKC,MAAMgC,oBAAoBtC,EAAOS,EAAQX,EAAMC,GAGtDwC,mBAAmBrC,EAAWC,GAC5BE,KAAKmC,oBAAoBtC,EAAWA,GACpCG,KAAKoC,sBAAsBvC,EAAWC,GACtCE,KAAKJ,sBAAsBC,EAAWC,GAGxCqC,oBAAoBtC,EAAWC,GAC7B,GAAID,EAAUwC,uBAAyBrC,KAAKC,MAAMoC,qBAAsB,CACtE,IAAIC,EAAWtC,KAAKC,MAAMoC,qBAI1B,GAHArC,KAAKM,SAAS,CACZd,QAAS8C,EAAS9C,UAEI,UAApB8C,EAASpC,OAAoB,CAC/B,MAAM,KAAET,EAAF,MAAQC,EAAR,MAAeC,EAAf,OAAsBS,GAAWJ,KAAKb,MAC5Ca,KAAKK,YAAYV,EAAOS,EAAQX,EAAMC,KAI5C0C,sBAAsBvC,EAAWC,GAC/B,MAAM,QAAEN,GAAYQ,KAAKb,MAEzB,GAAIU,EAAU0C,kBAAoBvC,KAAKC,MAAMsC,gBAAiB,CAC5D,IAAI,OAAErC,EAAF,OAAUE,EAAV,KAAkBf,GAASW,KAAKC,MAAMsC,gBAC3B,YAAXrC,EACEE,GAAU,KAAOA,GAAU,KAC7BJ,KAAKC,MAAMuC,kBACRhD,EACD,OACAH,EAAKoD,QACL,cAAC,IAAD,CAAgBC,KAAM,MAGN,MAAXtC,GAA6B,2BAAXF,GAC3BF,KAAKM,SAAS,CACZlB,SAAUC,EAAKD,YAevBuD,2BACE,OAAO,cAAC3D,EAAD,IA4ET4D,SACE,IAAI,QAAEpD,EAAF,QAAWqD,EAAX,SAAoBzD,EAApB,OAA8BgB,GAAWJ,KAAKb,MAClD,OACE,qCACGa,KAAK2C,2BACL3C,KAAK0B,yBACN,cAAC,IAAD,IAEA,cAAC5C,EAAD,IACA,sBAAKgE,UAAU,sCAAf,UACE,qBAAKA,UAAU,QAAf,SACE,eAAC,IAAD,CACErC,MAAM,eACND,MAAM,UACNuC,QAAQ,QACRD,UAAU,wDACVE,QAAS,IACPhD,KAAKC,MAAMgD,iBACRzD,EACD,MACA,cAAC,IAAD,CAAgBkD,KAAM,MAT5B,UAaE,cAAC,IAAD,CAAgBA,KAAM,KACtB,sBAAMQ,MAAO,CAAEC,WAAY,QAA3B,8BAIJ,sBAAKL,UAAU,sDAAf,UACE,cAAC,IAAD,CACEM,SAAUpD,KAAKc,qBACfK,GAAG,cACH2B,UAAU,OAHZ,SAKE,eAAC,IAAD,WACE,cAAC,IAAD,CACEzB,KAAK,OACLF,GAAG,gBACHkC,YAAY,SACZP,UAAU,MACVjC,MAAOb,KAAKb,MAAMQ,MAClB2D,SAAUtD,KAAKU,eAEjB,cAAC,IAAD,CACE6C,KAAK,cACLlC,KAAK,SACLb,MAAM,OACNuC,QAAQ,UACR5B,GAAG,aACH2B,UAAU,GANZ,SAQE,cAAC,IAAD,WAIN,qBAAKA,UAAU,cAAf,SACE,cAAC,IAAD,CACEA,UAAU,iBACVzB,KAAK,SACLb,MAAM,OACNuC,QAAQ,UACR5B,GAAG,mBACH6B,QAAS,IAAMhD,KAAKC,MAAMuD,cAAchE,EAAS,WANnD,SAQE,cAAC,IAAD,CAAyBkD,KAAK,WAGlC,qBAAKI,UAAU,8CAAf,SACE,cAAC,IAAD,CACEW,QAAS,IACP,cAAC,IAAD,CACEpC,KAAK,SACL0B,QAAQ,UACRvC,MAAM,OACNsC,UAAU,cAJZ,SAME,cAAC,IAAD,CAAwBJ,KAAM,OAGlCgB,QAAS,IAAM1D,KAAK2D,uBAK5B,eAAC,IAAD,CAAOb,UAAU,+BAAjB,UACE,cAAC,IAAD,UACE,eAAC,KAAD,WACE,cAAC,IAAD,CAAMc,GAAG,IAAId,UAAU,4BAAvB,SACE,oBAAIA,UAAU,mBAAd,wBAEF,cAAC,IAAD,CAAMc,GAAG,IAAT,SACE,cAAC,IAAD,CAAcd,UAAU,YAAxB,SACG,CAAC,MAAO,KAAM,MAAO,gBAAgBe,KAAKhD,GACzC,cAAC,IAAD,CACEL,MACY,QAAVK,EACI,kBACU,iBAAVA,EACE,iBACU,QAAVA,EACE,oBACA,kBAGViC,UAAU,OACVgB,OAAQjD,IAAUT,EAClB4C,QAAS,IAAMhD,KAAK2B,oBAAoBd,GAb1C,SAeGA,GALIA,cAYjB,cAAC,IAAD,CAAWiC,UAAU,WAArB,SACE,eAAC,KAAD,CACEiB,SAAO,EACPC,OAAK,EACLlB,UAAU,aACVmB,YAAU,EACVC,UAAQ,EACRC,MAAM,SACNC,IAAMC,GAAQrE,KAAK2D,aAAeU,EAPpC,UASE,eAAC,KAAD,gCACoB,4BAAIjF,EAASkF,gBAGjC,cAAC,KAAD,CAAY9D,MAAM,OAAlB,SACE,eAAC,KAAD,CAAWsC,UAAU,cAArB,UACE,cAAC,KAAD,CAAkByB,MAAM,MAAxB,qBACA,cAAC,KAAD,CAAkBA,MAAM,MAAxB,kBACA,cAAC,KAAD,CAAkBA,MAAM,MAAxB,mBACA,cAAC,KAAD,CAAkBA,MAAM,MAAxB,oCAGA,cAAC,KAAD,CAAkBA,MAAM,MAAxB,0BACA,cAAC,KAAD,CAAkBA,MAAM,MAAxB,oBACA,cAAC,KAAD,CAAkBA,MAAM,MAAxB,yBAGJ,eAAC,KAAD,CAAYzB,UAAU,cAActC,MAAM,QAA1C,UACGqC,GACC,cAAC,KAAD,CAAWC,UAAU,cAArB,SACE,cAAC,KAAD,CAAgB0B,QAAQ,IAAxB,SACE,qBAAK1B,UAAU,qBAAqB2B,KAAK,QAAzC,SACG5B,QAKRzD,EAASC,KAAKqF,OAAS,EACtBtF,EAASC,KAAKwE,KAAI,CAACpB,EAASkC,KAC1B,MAAM,GAAExD,EAAF,QAAMyD,EAAN,YAAeC,EAAf,aAA4BC,GAChCrC,EAAQA,SACJ,UAAEsC,EAAF,OAAa3E,EAAb,WAAqB4E,GAAevC,EAAQwC,UAClD,OACE,eAAC,KAAD,CAAWnC,UAAU,cAArB,UACE,cAAC,KAAD,UACE,cAAC,IAAD,CACEjC,MAAOqE,OAAON,GACdO,OAAQ,GACRC,MAAO,EACPC,SAAU,GACVC,OAAQ,EACRC,WAAW,gBAGf,cAAC,KAAD,UAAiBV,IACjB,eAAC,KAAD,oBACUC,EAAaU,QAAQ,MAE/B,cAAC,KAAD,UAAiBT,IACjB,cAAC,KAAD,UAAiBC,IACjB,cAAC,KAAD,UACGhF,KAAKO,aAAaH,KAErB,eAAC,KAAD,WACE,cAAC,IAAD,CACEI,MAAM,YACNuC,QAAQ,QACRL,KAAK,KACLM,QAAS,IACPhD,KAAKC,MAAMwF,wBACT,EACA,OACAhD,GARN,SAYE,cAAC,IAAD,CAAeC,KAAK,SAEtB,cAAC,IAAD,CACElC,MAAM,OACNuC,QAAQ,QACRL,KAAK,KACLM,QAAS,IAAMhD,KAAKkB,iBAAiBC,GAJvC,SAME,cAAC,IAAD,CAAgBuB,KAAK,SAEvB,cAAC,IAAD,CACElC,MAAM,SACNuC,QAAQ,QACRL,KAAK,KACLM,QAAS,IAOPhD,KAAKC,MAAMyF,eACRlG,EACD,gBACA,UACA2B,GAfN,SAmBE,cAAC,IAAD,CAAkBuB,KAAK,cA9DWiC,MAqE5C,cAAC,KAAD,UACE,cAAC,KAAD,CAAgBH,QAAQ,IAAxB,kCAOZ,cAAC,IAAD,CACEmB,cAAe,WACfC,UAAW,OACXC,WAAY,MACZC,eAAgB,WAChBC,UAAW3G,EAASE,WACpB0G,qBAAsB,EACtBC,mBAAoB,EACpBC,aAAclG,KAAKgB,gBACnBmF,mBAAoB,aACpBC,gBAAiB,eAkBZC,sBACbC,aAZuBnH,IAChB,CACLoD,gBAAiBpD,EAAMoH,iBACvBlE,qBAAsBlD,EAAMkD,qBAC5Bf,aAAcnC,EAAMmC,aACpBkF,gBAAiBrH,EAAMqH,gBACvBC,kBAAmBtH,EAAMsH,kBACzB1G,gBAAiBZ,EAAMY,mBAKA,CACvBkD,oBACAhB,wBACAyE,iBACAjB,2BACAhE,eACAe,qBACAkE,iBACAhB,kBACAlC,kBATF8C,CAUGrH,K,iCC5eL,gFAkBA,MAAM0H,EAA0BC,IAAM7H,MAAK,IACzC,oCAGK,MAAM8H,UAAyB3H,YACpC4H,YAAY7G,GACV8G,MAAM9G,GADW,KAanB+G,mBAAqB,CAACnH,EAAWC,KAC/B,GAAID,EAAUoH,eAAiBjH,KAAKC,MAAMgH,aAAc,CACtD,MAAM,OAAE/G,EAAF,QAAUV,GAAYQ,KAAKC,MAAMgH,aACxB,YAAX/G,EACFF,KAAKM,SAAS,CACZd,QAASA,EACT0H,eAAe,EACfC,cAAe,GACfjH,OAAQA,IAEU,UAAXA,GAMW,cAAXA,EALTF,KAAKM,SAAS,CACZd,QAASA,EACT0H,eAAe,EACfC,cAAe,KAQG,iBAAXjH,GACTF,KAAKM,SAAS,CAAEJ,OAAQA,EAAQV,QAASA,EAAS2H,cAAe,OApCpD,KAwCnBC,oBAAuBjH,IACjBA,GACFH,KAAKM,SAAS,CACZ6G,cAAehH,EACf+G,eAAe,KA5CF,KAkDnBG,cAAgB,KACd,MAAM,OAAEnH,GAAWF,KAAKb,MACxBmI,QAAQC,IAAIrH,GAEG,iBAAXA,EACFF,KAAKC,MAAMuD,cAAa,EAAO,aAE/BxD,KAAKC,MAAMuD,cAAa,EAAO,UAvDjCxD,KAAKb,MAAQ,CACXK,SAAS,EAET2H,cAAe,GACfD,eAAe,EACfhH,OAAQ,IAGZgC,mBAAmBrC,EAAWC,GAC5BE,KAAKgH,mBAAmBnH,EAAWC,GAiDrC8C,SACE,IAAI,QAAEpD,EAAF,cAAW2H,EAAX,cAA0BD,EAA1B,OAAyChH,GAAWF,KAAKb,MAC7D,OACE,8BACE,eAAC,IAAD,CACEK,QAASA,EACTgI,UAAU,SACVC,UAAWzH,KAAKqH,cAHlB,UAKE,cAAC,IAAD,CAAcI,UAAWzH,KAAKqH,cAA9B,SACE,cAAC,IAAD,UACE,qBAAKvE,UAAU,4BAAf,yBAGJ,cAAC,IAAD,UACE,eAAC,IAAD,CAAYA,UAAU,cAAtB,UACE,eAAC,WAAD,CACE4E,SACE,qBAAK5E,UAAU,2EAAf,SACE,cAAC,YAAD,CAAWtC,MAAM,UAAUkC,KAAM,QAHvC,UAOE,cAAC,IAAD,CAAQlC,MAAM,OAAOmH,aAAW,EAAhC,SACE,sEAEF,cAAChB,EAAD,CACE7D,UAAU,OACV8E,MAAO,IACPC,YAAU,EACVC,WAAYZ,EACZa,MAAM,OACNC,SAAU,CAACC,EAAKC,KACVA,GAAQlI,KAAKoH,oBAAoBc,EAAOC,YAKlD,gCACE,6BAAKhB,IACJA,IACa,iBAAXjH,EACC,mCACE,cAAC,IAAD,CACE8C,QAAS,KACPhD,KAAKC,MAAMmI,kBACTjB,EACA,gBAEFnH,KAAKM,SAAS,CACZd,SAAS,KAGbgB,MAAM,OACNuC,QAAQ,UACRD,UAAU,GAZZ,SAcE,sBAAMA,UAAU,OAAhB,wBAIJ,eAAC,IAAD,CACEE,QAAS,KACPhD,KAAKC,MAAMmI,kBACTjB,EACA,kBAEFnH,KAAKM,SAAS,CACZd,SAAS,KAGbgB,MAAM,OACNuC,QAAQ,UACRD,UAAU,GAZZ,UAcE,cAAC,IAAD,IACA,sBAAMA,UAAU,OAAhB,gCAMZ,cAAC,IAAD,UACE,cAAC,IAAD,CAAStC,MAAM,OAAOuC,QAAQ,QAAQC,QAAShD,KAAKqH,cAApD,2BAcGf,iBALUnH,IAChB,CACL8H,aAAc9H,EAAMkD,wBAGgB,CACtCmB,iBACA4E,uBAFa9B,CAGZO,I,iCCvLH,6CAEO,MAAMuB,EAAoB,CAACjI,EAASD,IAAWmI,UAClDC,EAAS,CACLjH,KAAMkH,sBACNC,QAAS,CACLtI,OAAQA,EACRC,QAASA","file":"static/js/45.090b2a4c.chunk.js","sourcesContent":["import React, { Component, lazy } from \"react\"\nimport {\n  CTable,\n  CTableHead,\n  CTableRow,\n  CTableHeaderCell,\n  CTableDataCell,\n  CTableBody,\n  CTableCaption,\n  CButton,\n  CForm,\n  CInputGroup,\n  CFormControl,\n  CBadge,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CRow,\n  CButtonGroup,\n} from \"@coreui/react\"\nimport * as FaIcons from \"react-icons/fa\"\nimport * as MdIcons from \"react-icons/md\"\nimport * as BiIcons from \"react-icons/bi\"\nimport Barcode from \"react-barcode\"\nimport ReactPaginate from \"react-paginate\"\n//action\nimport { connect } from \"react-redux\"\nimport { withRouter } from \"react-router-dom\"\nimport {\n  getProductsByStatus,\n  getProduct,\n} from \"../../../service/apiActions/productAction/productAction\"\nimport { setProductModal } from \"../../../service/apiActions/modalAction/modalAction\"\nimport {\n  setProductDetailsModal,\n  editProductModal,\n} from \"../../../service/apiActions/modalAction/modalAction\"\nimport { clearMessage } from \"src/service/apiActions/messageAction/messageAction\"\nimport {\n  setAlertModal,\n  setScanModal,\n} from \"../../../service/apiActions/modalAction/modalAction\"\n\nimport AlertModal from \"src/components/modals/alert/AlertModal\"\nimport ScanBarcodeModal from \"src/components/modals/scanBarcode/ScanBarcodeModal\"\nimport ReactToPrint from \"react-to-print\"\n\nimport { history } from \"src/_helper/history\"\nimport * as IoIcons from \"react-icons/io5\"\n\nconst ProductDetialsModal = lazy(() =>\n  import(\"src/components/modals/product/ProductDetialsModal\"),\n)\nconst ProductEditorModal = lazy(() =>\n  import(\"src/components/modals/product/ProductEditorModal.js\"),\n)\n//action\nclass Products extends Component {\n  state = {\n    products: {\n      data: [],\n      totalPages: 0,\n    },\n    keyword: \"\",\n    visible: false,\n\n    page: 0,\n    limit: 10,\n    query: \"\",\n  }\n\n  componentDidMount() {\n    const getStatus = this.props.location.state\n\n    history.replace(\"/app/products/products\", null)\n    const { page, status, limit, query } = this.state\n    if (getStatus) {\n      this.getProducts(query, getStatus, page, limit)\n      this.setState({\n        status: getStatus,\n      })\n    } else {\n      this.getProducts(query, status, page, limit)\n    }\n  }\n\n  getProducts(query, status, page, limit) {\n    this.props.getProductsByStatus(query, status, page, limit)\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    this.manageModalResponse(prevProps, prevProps)\n    this.manageProductResponse(prevProps, prevState)\n    this.manageScannerResponse(prevProps, prevState)\n  }\n\n  manageModalResponse(prevProps, prevState) {\n    if (prevProps.modalVisibleResponse !== this.props.modalVisibleResponse) {\n      let response = this.props.modalVisibleResponse\n      this.setState({\n        visible: response.visible,\n      })\n      if (response.action === \"close\") {\n        const { page, limit, query, status } = this.state\n        this.getProducts(query, status, page, limit)\n      }\n    }\n  }\n  manageProductResponse(prevProps, prevState) {\n    const { visible } = this.state\n\n    if (prevProps.productResponse !== this.props.productResponse) {\n      let { action, status, data } = this.props.productResponse\n      if (action === \"GETBYID\") {\n        if (status >= 200 && status <= 300) {\n          this.props.editProductModal(\n            !visible,\n            \"Edit\",\n            data.product,\n            <FaIcons.FaEdit size={20} />,\n          )\n        }\n      } else if (status === 200 && action === \"GET_PRODUCTS_BY_STATUS\") {\n        this.setState({\n          products: data.products,\n        })\n      }\n    }\n  }\n  manageScannerResponse = (prevProps, prevState) => {\n    if (prevProps.scannerResponse !== this.props.scannerResponse) {\n      let { action, decoded } = this.props.scannerResponse\n      if (action === \"DECODEDBARCODE\") {\n        const { page, limit, status } = this.state\n        this.getProducts(decoded, status, page, limit)\n        this.setState({ query: decoded })\n      }\n    }\n  }\n  renderProductEditorModal() {\n    return <ProductEditorModal />\n  }\n\n  manageStatus = (status) => {\n    switch (status) {\n      case \"OK\":\n        return (\n          <CBadge color=\"success\" shape=\"rounded-pill\">\n            {status}\n          </CBadge>\n        )\n      case \"LOW\":\n        return (\n          <CBadge color=\"warning\" shape=\"rounded-pill\">\n            {status}\n          </CBadge>\n        )\n      case \"OUT_OF_STOCK\":\n        return (\n          <CBadge color=\"danger\" shape=\"rounded-pill\">\n            OUT OF STOCK\n          </CBadge>\n        )\n      default:\n        return (\n          <CBadge color=\"danger\" shape=\"rounded-pill\">\n            {status}\n          </CBadge>\n        )\n    }\n  }\n\n  handleSearch = (event) => {\n    const { page, limit, status } = this.state\n    this.getProducts(event.target.value, status, page, limit)\n    this.setState({ query: event.target.value })\n  }\n  handleOnSubmitSearch = (event) => {\n    event.preventDefault()\n    const { query, page, limit, status } = this.state\n    this.getProducts(query, status, page, limit)\n    this.setState({\n      query: event.target.value,\n    })\n  }\n  handlePageClick = (data) => {\n    let page = data.selected\n    this.setState({ page: page })\n    const { limit, query, status } = this.state\n    this.getProducts(query, status, page, limit)\n  }\n  handleGetProduct = (id) => {\n    const { accessToken, type } = this.props.userResponse.credentials\n    const token = type + accessToken\n\n    this.props.getProduct(id, token)\n  }\n\n  renderScanBarcodeModal = () => {\n    return <ScanBarcodeModal />\n  }\n  handleStatusOnClick = (status) => {\n    const { query, page, limit } = this.state\n\n    if (status === \"ALL\") {\n      this.setState({\n        status: \"\",\n      })\n      this.getProducts(query, \"\", page, limit)\n    } else {\n      this.setState({\n        status: status,\n      })\n      this.getProducts(query, status, page, limit)\n    }\n  }\n  render() {\n    let { visible, message, products, status } = this.state\n    return (\n      <>\n        {this.renderProductEditorModal()}\n        {this.renderScanBarcodeModal()}\n        <AlertModal />\n\n        <ProductDetialsModal />\n        <div className=\"d-flex justify-content-between mb-2\">\n          <div className=\"w-100\">\n            <CButton\n              shape=\"rounded-pill\"\n              color=\"primary\"\n              variant=\"ghost\"\n              className=\"d-flex justify-content-center align-items-center mb-3\"\n              onClick={() =>\n                this.props.setProductModal(\n                  !visible,\n                  \"Add\",\n                  <FaIcons.FaPlus size={20} />,\n                )\n              }\n            >\n              <FaIcons.FaPlus size={20} />\n              <span style={{ marginLeft: \"10px\" }}>Add Product</span>\n            </CButton>\n          </div>\n\n          <div className=\"w-100 d-flex justify-content-end align-items-center\">\n            <CForm\n              onSubmit={this.handleOnSubmitSearch}\n              id=\"search-form\"\n              className=\"w-75\"\n            >\n              <CInputGroup>\n                <CFormControl\n                  type=\"text\"\n                  id=\"floatingInput\"\n                  placeholder=\"Search\"\n                  className=\"p-2\"\n                  value={this.state.query}\n                  onChange={this.handleSearch}\n                />\n                <CButton\n                  form=\"search-form\"\n                  type=\"submit\"\n                  color=\"info\"\n                  variant=\"outline\"\n                  id=\"btn-search\"\n                  className=\"\"\n                >\n                  <FaIcons.FaSearch />\n                </CButton>\n              </CInputGroup>\n            </CForm>\n            <div className=\"text-center\">\n              <CButton\n                className=\"pt-2 pb-2 ms-2\"\n                type=\"button\"\n                color=\"info\"\n                variant=\"outline\"\n                id=\"btn-scan-barcode\"\n                onClick={() => this.props.setScanModal(!visible, \"barcode\")}\n              >\n                <BiIcons.BiBarcodeReader size=\"24\" />\n              </CButton>\n            </div>\n            <div className=\"d-flex align-items-end flex-row-reverse m-2\">\n              <ReactToPrint\n                trigger={() => (\n                  <CButton\n                    type=\"button\"\n                    variant=\"outline\"\n                    color=\"info\"\n                    className=\" pt-2 pb-2 \"\n                  >\n                    <IoIcons.IoPrintOutline size={20} />\n                  </CButton>\n                )}\n                content={() => this.componentRef}\n              />\n            </div>\n          </div>\n        </div>\n        <CCard className=\"mb-4 bg-transparent border-0\">\n          <CCardHeader>\n            <CRow>\n              <CCol sm=\"5\" className=\"d-flex align-items-center\">\n                <h4 className=\"card-title mb-0 \">Products</h4>\n              </CCol>\n              <CCol sm=\"7\">\n                <CButtonGroup className=\"float-end\">\n                  {[\"ALL\", \"OK\", \"LOW\", \"OUT_OF_STOCK\"].map((value) => (\n                    <CButton\n                      color={\n                        value === \"LOW\"\n                          ? \"outline-warning\"\n                          : value === \"OUT_OF_STOCK\"\n                            ? \"outline-danger\"\n                            : value === \"ALL\"\n                              ? \"outline-secondary\"\n                              : \"outline-success\"\n                      }\n                      key={value}\n                      className=\"mx-0\"\n                      active={value === status}\n                      onClick={() => this.handleStatusOnClick(value)}\n                    >\n                      {value}\n                    </CButton>\n                  ))}\n                </CButtonGroup>\n              </CCol>\n            </CRow>\n          </CCardHeader>\n          <CCardBody className=\"p-0 m-0 \">\n            <CTable\n              striped\n              hover\n              className=\"shadow-sm \"\n              responsive\n              bordered\n              align=\"middle\"\n              ref={(el) => (this.componentRef = el)}\n            >\n              <CTableCaption>\n                List of Products: <b>{products.totalItems}</b>\n              </CTableCaption>\n\n              <CTableHead color=\"dark\">\n                <CTableRow className=\"text-center\">\n                  <CTableHeaderCell scope=\"col\">Barcode</CTableHeaderCell>\n                  <CTableHeaderCell scope=\"col\">Name</CTableHeaderCell>\n                  <CTableHeaderCell scope=\"col\">Price</CTableHeaderCell>\n                  <CTableHeaderCell scope=\"col\">\n                    Alert Stocks Threshold\n                  </CTableHeaderCell>\n                  <CTableHeaderCell scope=\"col\">Total Stocks</CTableHeaderCell>\n                  <CTableHeaderCell scope=\"col\">Status</CTableHeaderCell>\n                  <CTableHeaderCell scope=\"col\">Action</CTableHeaderCell>\n                </CTableRow>\n              </CTableHead>\n              <CTableBody className=\"text-center\" color=\"light\">\n                {message && (\n                  <CTableRow className=\"text-center\">\n                    <CTableDataCell colSpan=\"8\">\n                      <div className=\"alert alert-danger\" role=\"alert\">\n                        {message}\n                      </div>\n                    </CTableDataCell>\n                  </CTableRow>\n                )}\n                {products.data.length > 0 ? (\n                  products.data.map((product, index) => {\n                    const { id, barcode, productName, productPrice } =\n                      product.product\n                    const { threshold, status, totalStock } = product.inventory\n                    return (\n                      <CTableRow className=\"text-center\" key={index}>\n                        <CTableDataCell>\n                          <Barcode\n                            value={String(barcode)}\n                            height={50}\n                            width={1}\n                            fontSize={14}\n                            margin={7}\n                            background=\"#f5f5f548\"\n                          />\n                        </CTableDataCell>\n                        <CTableDataCell>{productName}</CTableDataCell>\n                        <CTableDataCell>\n                          &#8369;{productPrice.toFixed(2)}\n                        </CTableDataCell>\n                        <CTableDataCell>{threshold}</CTableDataCell>\n                        <CTableDataCell>{totalStock}</CTableDataCell>\n                        <CTableDataCell>\n                          {this.manageStatus(status)}\n                        </CTableDataCell>\n                        <CTableDataCell>\n                          <CButton\n                            color=\"secondary\"\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() =>\n                              this.props.setProductDetailsModal(\n                                true,\n                                \"view\",\n                                product,\n                              )\n                            }\n                          >\n                            <FaIcons.FaEye size=\"20\" />\n                          </CButton>\n                          <CButton\n                            color=\"info\"\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => this.handleGetProduct(id)}\n                          >\n                            <FaIcons.FaEdit size=\"20\" />\n                          </CButton>\n                          <CButton\n                            color=\"danger\"\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() =>\n                              // this.props.setAlertModal(\n                              //   !visible,\n                              //   \"DELETEPRODUCT\",\n                              //   \"PRODUCT\",\n                              //   product.id,\n                              // )\n                              this.props.setAlertModal(\n                                !visible,\n                                \"DELETEPRODUCT\",\n                                \"PRODUCT\",\n                                id,\n                              )\n                            }\n                          >\n                            <MdIcons.MdDelete size=\"20\" />\n                          </CButton>\n                        </CTableDataCell>\n                      </CTableRow>\n                    )\n                  })\n                ) : (\n                  <CTableRow>\n                    <CTableDataCell colSpan=\"7\">No data</CTableDataCell>\n                  </CTableRow>\n                )}\n              </CTableBody>\n            </CTable>\n          </CCardBody>\n        </CCard>\n        <ReactPaginate\n          previousLabel={\"previous\"}\n          nextLabel={\"next\"}\n          breakLabel={\"...\"}\n          breakClassName={\"break-me\"}\n          pageCount={products.totalPages}\n          marginPagesDisplayed={2}\n          pageRangeDisplayed={5}\n          onPageChange={this.handlePageClick}\n          containerClassName={\"pagination\"}\n          activeClassName={\"active\"}\n        />\n      </>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    productResponse: state.productResponser,\n    modalVisibleResponse: state.modalVisibleResponse,\n    userResponse: state.userResponse,\n    messageResponse: state.messageResponse,\n    inventoryResponse: state.inventoryResponse,\n    scannerResponse: state.scannerResponse,\n  }\n}\n\nexport default withRouter(\n  connect(mapStateToProps, {\n    setProductModal,\n    getProductsByStatus,\n    clearMessage,\n    setProductDetailsModal,\n    getProduct,\n    editProductModal,\n    clearMessage,\n    setAlertModal,\n    setScanModal,\n  })(Products),\n)\n","import React, { Component, Suspense } from \"react\"\nimport {\n  CContainer,\n  CModal,\n  CModalHeader,\n  CModalBody,\n  CModalFooter,\n  CButton,\n  CModalTitle,\n  CAlert,\n} from \"@coreui/react\"\nimport { connect } from \"react-redux\"\n//action\nimport { setScanModal } from \"src/service/apiActions/modalAction/modalAction\"\nimport { getDecodedBarcode } from \"src/service/apiActions/scannerAction/scannerAction\"\nimport { DotLoader } from \"react-spinners\"\nimport * as FaIcons from \"react-icons/fa\"\n\nconst BarcodeScannerComponent = React.lazy(() =>\n  import(\"react-qr-barcode-scanner\"),\n)\n\nexport class ScanBarcodeModal extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      visible: false,\n\n      decodeBarcode: \"\",\n      stopStreaming: false,\n      action: \"\",\n    }\n  }\n  componentDidUpdate(prevProps, prevState) {\n    this.manageModalVisible(prevProps, prevState)\n  }\n  manageModalVisible = (prevProps, prevState) => {\n    if (prevProps.modalVisible !== this.props.modalVisible) {\n      const { action, visible } = this.props.modalVisible\n      if (action === \"barcode\") {\n        this.setState({\n          visible: visible,\n          stopStreaming: false,\n          decodeBarcode: \"\",\n          action: action,\n        })\n      } else if (action === \"close\") {\n        this.setState({\n          visible: visible,\n          stopStreaming: false,\n          decodeBarcode: \"\",\n        })\n      } else if (action === \"closeScan\") {\n        this.setState({\n          visible: visible,\n          stopStreaming: false,\n          decodeBarcode: \"\",\n        })\n      } else if (action === \"inputBarcode\") {\n        this.setState({ action: action, visible: visible, decodeBarcode: \"\" })\n      }\n    }\n  }\n  handleDecodeBarcode = (decoded) => {\n    if (decoded) {\n      this.setState({\n        decodeBarcode: decoded,\n        stopStreaming: true,\n      })\n      // this.props.getDecodedBarcode(decoded, \"DECODEDBARCODE\");\n      // this.props.setScanModal(false, \"close\")\n    }\n  }\n  handleOnClose = () => {\n    const { action } = this.state\n    console.log(action)\n\n    if (action === \"inputBarcode\") {\n      this.props.setScanModal(false, \"closeScan\")\n    } else {\n      this.props.setScanModal(false, \"close\")\n    }\n  }\n  render() {\n    let { visible, decodeBarcode, stopStreaming, action } = this.state\n    return (\n      <div>\n        <CModal\n          visible={visible}\n          alignment=\"center\"\n          onDismiss={this.handleOnClose}\n        >\n          <CModalHeader onDismiss={this.handleOnClose}>\n            <CModalTitle>\n              <div className=\"d-flex align-items-center\">Scanner</div>\n            </CModalTitle>\n          </CModalHeader>\n          <CModalBody>\n            <CContainer className=\"text-center\">\n              <Suspense\n                fallback={\n                  <div className=\"d-flex justify-content-center align-items-center  position-fixed spinner\">\n                    <DotLoader color=\"#36D7B7\" size={100} />\n                  </div>\n                }\n              >\n                <CAlert color=\"info\" dismissible>\n                  <strong>Scan Product Barcode to Search</strong>\n                </CAlert>\n                <BarcodeScannerComponent\n                  className=\"w-25\"\n                  delay={500}\n                  facingMode\n                  stopStream={stopStreaming}\n                  torch=\"true\"\n                  onUpdate={(err, result) => {\n                    if (result) this.handleDecodeBarcode(result.text)\n                  }}\n                />\n              </Suspense>\n\n              <div>\n                <h4>{decodeBarcode}</h4>\n                {decodeBarcode &&\n                  (action === \"inputBarcode\" ? (\n                    <>\n                      <CButton\n                        onClick={() => {\n                          this.props.getDecodedBarcode(\n                            decodeBarcode,\n                            \"inputBarcode\",\n                          )\n                          this.setState({\n                            visible: false,\n                          })\n                        }}\n                        color=\"info\"\n                        variant=\"outline\"\n                        className=\"\"\n                      >\n                        <span className=\"ms-2\">Insert</span>\n                      </CButton>\n                    </>\n                  ) : (\n                    <CButton\n                      onClick={() => {\n                        this.props.getDecodedBarcode(\n                          decodeBarcode,\n                          \"DECODEDBARCODE\",\n                        )\n                        this.setState({\n                          visible: false,\n                        })\n                      }}\n                      color=\"info\"\n                      variant=\"outline\"\n                      className=\"\"\n                    >\n                      <FaIcons.FaSearch />\n                      <span className=\"ms-2\">Search</span>\n                    </CButton>\n                  ))}\n              </div>\n            </CContainer>\n          </CModalBody>\n          <CModalFooter>\n            <CButton color=\"dark\" variant=\"ghost\" onClick={this.handleOnClose}>\n              Close\n            </CButton>\n          </CModalFooter>\n        </CModal>\n      </div>\n    )\n  }\n}\nconst mapStateToProps = (state) => {\n  return {\n    modalVisible: state.modalVisibleResponse,\n  }\n}\nexport default connect(mapStateToProps, {\n  setScanModal,\n  getDecodedBarcode,\n})(ScanBarcodeModal)\n","import { GET_DECODED_BARCODE } from \"src/service/redux/constants\"\n\nexport const getDecodedBarcode = (decoded, action) => async (dispatch) => {\n    dispatch({\n        type: GET_DECODED_BARCODE,\n        payload: {\n            action: action,\n            decoded: decoded\n        }\n    })\n}"],"sourceRoot":""}