{"version":3,"sources":["views/common/public/register/Register.js","service/apiActions/messageAction/messageAction.js","_helper/history.js","service/restAPI/AccountApiService.js","service/apiActions/accountAction/accountAction.js"],"names":["RightFormCard","lazy","Register","Component","constructor","props","super","state","userCredentials","this","type","validated","loading","successful","message","isLoggedIn","permission","verifyform","verificationCode","storeInfo","username","password","email","firstName","lastName","phoneNumber","onResetValue","setState","handleOnChange","event","name","target","value","handleShowPassword","preventDefault","handleSubmit","validation","length","createAccount","then","successResponse","messageResponse","data","catch","handleVerificationCode","verifyCode","messgae","componentDidUpdate","prevProps","prevState","manageStoreInformationResponse","storeInformationResponse","action","status","history","listen","location","clearMessage","componentDidMount","redirectAuthenticated","getStoreInformation","userResponse","roleName","credentials","roles","render","Roles","SUPER_ADMIN","ADMIN","to","config","api","private","prefixFrontendUrl","margin","marginBottom","position","className","style","cursor","acronym","storeName","id","onSubmit","sm","md","lg","xs","autoCorrect","placeholder","onChange","required","htmlFor","size","form","color","width","invalid","onClick","role","button","connect","async","dispatch","CLEAR_MESSAGE","payload","createBrowserHistory","getAccountEmployees","query","page","limit","axios","get","headers","authHeader","params","getUsersAccount","saveEmployeeAccount","birthday","console","log","post","deleteAccount","delete","updateUser","put","banAccount","changePassword","currentPassword","newPassword","confirmPassword","forgotPassword","verifyAccount","code","validateToken","token","resetPassword","accountId","getMe","AccountApiService","response","GET_USERS_ACCOUNT","accounts","Promise","resolve","error","errorMessage","toString","SET_MESSAGE","reject","saveEmployee","SAVE_EMPLOYEE","DELETE_ACCOUNT","BAN_ACCOUNT","CHANGE_PASSWORD","FORGOT_PASSWORD","VALIDATE_TOKEN","tokenResponse","accoutnId","RESET_PASSWORD","GET_ME","account","UPDATE_USER","VERIFY_ACCOUNT"],"mappings":"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","file":"static/js/38.52a0567b.chunk.js","sourcesContent":["import React, { Component, lazy } from \"react\"\nimport {\n  CHeader,\n  CContainer,\n  CCol,\n  CRow,\n  CCardGroup,\n  CCard,\n  // CFormFeedback,\n  CButton,\n  CCardBody,\n  CForm,\n  CFormFloating,\n  CInputGroup,\n  CFormControl,\n  CFormLabel,\n  CSpinner,\n  CFormFeedback,\n} from \"@coreui/react\"\nimport * as FaIcons from \"react-icons/fa\"\nimport * as BsIcons from \"react-icons/bs\"\nimport { connect } from \"react-redux\"\nimport { Redirect } from \"react-router-dom\"\nimport { createAccount } from \"src/service/apiActions/userAction/userAction\"\nimport { history } from \"src/_helper/history\"\nimport { clearMessage } from \"src/service/apiActions/messageAction/messageAction\"\nimport Roles from \"src/router/config\"\nimport { Link } from \"react-router-dom\"\nimport config from \"../../../../config\"\nimport { getStoreInformation } from \"src/service/apiActions/storeAction/StoreInformationAction\"\nimport { verifyCode } from \"src/service/apiActions/accountAction/accountAction\"\nconst RightFormCard = lazy(() =>\n  import(\"../../../../components/public/RightFormCard\"),\n)\n\nexport class Register extends Component {\n  constructor(props) {\n    super(props)\n    history.listen((location) => {\n      clearMessage() // clear message when changing location\n    })\n  }\n  state = {\n    userCredentials: this.userCredentials,\n    type: \"password\",\n    validated: false,\n    loading: false,\n    successful: false,\n    message: \"\",\n    isLoggedIn: false,\n    permission: \"\",\n    verifyform: false,\n    verificationCode: \"\",\n    storeInfo: [],\n  }\n  userCredentials = {\n    username: \"\",\n    password: \"\",\n    email: \"\",\n    firstName: \"\",\n    lastName: \"\",\n    phoneNumber: \"\",\n  }\n  onResetValue = () => {\n    this.setState(() => this.userCredentials)\n  }\n  handleOnChange = (event) => {\n    const name = event.target.name\n    this.setState({\n      [name]: event.target.value,\n    })\n  }\n\n  handleShowPassword = (event) => {\n    const { type } = this.state\n    event.preventDefault()\n    this.setState({\n      type: type === \"password\" ? \"text\" : \"password\",\n    })\n  }\n  handleSubmit = (event) => {\n    const { username, password, email, firstName, lastName, phoneNumber } =\n      this.state\n    event.preventDefault()\n\n    this.setState({\n      validation: true,\n      loading: true,\n      successful: false,\n    })\n    if (username.length !== 0 && password.length !== 0 && email.length !== 0) {\n      this.props\n        .createAccount(\n          username,\n          password,\n          email,\n          firstName,\n          lastName,\n          phoneNumber,\n        )\n        .then(() => {\n          const successResponse = this.props.messageResponse.data.message\n          this.setState({\n            loading: false,\n            successful: true,\n            message: successResponse,\n            verifyform: true,\n          })\n          this.onResetValue()\n        })\n        .catch(() => {\n          this.setState({\n            loading: false,\n            successful: false,\n          })\n          this.onResetValue()\n        })\n    }\n  }\n  componentDidMount() {\n    this.redirectAuthenticated()\n    this.props.getStoreInformation()\n  }\n  redirectAuthenticated() {\n    const isLoggedIn = this.props.userResponse.isLoggedIn\n    if (isLoggedIn) {\n      let roleName = this.props.userResponse.credentials.roles.roleName\n      let permission = roleName\n        ? roleName\n        : this.props.userResponse.credentials.roles\n\n      this.setState({\n        isLoggedIn: isLoggedIn,\n        permission: permission,\n      })\n    }\n  }\n  handleVerificationCode = (event) => {\n    event.preventDefault()\n    let { verificationCode } = this.state\n    this.setState({\n      loading: true,\n    })\n    if (verificationCode) {\n      this.props\n        .verifyCode(verificationCode)\n        .then(() => {\n          let { data } = this.props.messageResponse\n          this.setState({\n            messgae: data.message,\n            verifyform: false,\n            loading: false,\n          })\n        })\n        .catch(() => {\n          let { data } = this.props.messageResponse\n          this.setState({\n            messgae: data.message,\n            verifyform: false,\n            loading: false,\n          })\n        })\n    }\n  }\n  componentDidUpdate = (prevProps, prevState) => {\n    this.manageStoreInformationResponse(prevProps, prevState)\n  }\n  manageStoreInformationResponse = (prevProps, prevState) => {\n    if (\n      prevProps.storeInformationResponse !== this.props.storeInformationResponse\n    ) {\n      const { action, status, data } = this.props.storeInformationResponse\n      if (action === \"GET_STORE_INFORMATION\" && status === 200) {\n        this.setState({\n          storeInfo: data.storeInfo,\n        })\n      }\n    }\n  }\n  render() {\n    let {\n      username,\n      password,\n      email,\n      firstName,\n      lastName,\n      phoneNumber,\n      type,\n      loading,\n      successful,\n      message,\n      isLoggedIn,\n      permission,\n      verifyform,\n      verificationCode,\n      storeInfo,\n    } = this.state\n    if (isLoggedIn) {\n      if (permission === Roles.SUPER_ADMIN || permission === Roles.ADMIN) {\n        return <Redirect to={config.api.private.prefixFrontendUrl + \"/app\"} />\n      } else {\n        return <Redirect to={config.api.private.prefixFrontendUrl + \"/home\"} />\n      }\n    }\n    const margin = {\n      marginBottom: \"12px\",\n    }\n    return (\n      <>\n        <CHeader position=\"sticky\">\n          <CContainer>\n            <Link\n              className=\"nav-link\"\n              to={config.api.private.prefixFrontendUrl + \"/home\"}\n              style={{ cursor: \"pointer\" }}\n            >\n              {storeInfo.acronym ? (\n                <strong style={{ ...margin }}>\n                  {storeInfo.acronym}\n                </strong>\n              ) : storeInfo.storeName ? (\n                <strong style={{ ...margin }}>\n                  {storeInfo.storeName}\n                </strong>\n              ) : (\n                <strong style={{ ...margin }}>\n                  IMSs\n                </strong>\n              )}\n            </Link>\n          </CContainer>\n        </CHeader>\n        <div className=\"min-vh-100 d-flex flex-row align-items-center text-dark \">\n          <CContainer>\n            <CRow className=\"justify-content-center align-items-center\">\n              <CCol>\n                <CCardGroup className=\"shadow-lg\">\n                  <CCard className=\"p-4 m-0 left-to-right form-container border-0\">\n                    <CCardBody>\n                      {!loading ? (\n                        verifyform ? (\n                          <>\n                            <CForm\n                              id=\"verificationForm\"\n                              onSubmit={this.handleVerificationCode}\n                            >\n                              <CCol\n                                sm=\"12\"\n                                md=\"12\"\n                                lg=\"12\"\n                                className=\"d-flex justify-content-center p-3\"\n                              >\n                                <h2 className=\"text-dark\">Verification Code</h2>\n                              </CCol>\n                              <CRow className=\"justify-content-center align-items-center\">\n                                <CCol>\n                                  <CInputGroup>\n                                    <CCol xs=\"12\" sm=\"12\" md=\"12\" lg=\"12\">\n                                      <CFormFloating className=\"mb-3 text-dark \">\n                                        <CFormControl\n                                          name=\"verificationCode\"\n                                          type=\"text\"\n                                          autoCorrect=\"false\"\n                                          id=\"floatingVerificationCode\"\n                                          placeholder=\"Verification Code\"\n                                          onChange={this.handleOnChange}\n                                          value={verificationCode}\n                                          required\n                                          className=\"rounded-pill  ps-4 pe-4\"\n                                        />\n                                        <CFormLabel\n                                          htmlFor=\"floatingVerificationCode \"\n                                          className=\"ps-4 pe-4\"\n                                        >\n                                          <FaIcons.FaLock size={18} />\n                                          <span className=\"ps-2\">\n                                            Verification Code\n                                          </span>\n                                        </CFormLabel>\n                                      </CFormFloating>\n                                    </CCol>\n                                  </CInputGroup>\n                                </CCol>\n                              </CRow>\n                              <CButton\n                                form=\"verificationForm\"\n                                type=\"submit\"\n                                color=\"info\"\n                                size=\"lg\"\n                                style={{ margin: \"20px auto\", width: \"50%\" }}\n                                className=\"d-flex justify-content-center align-items-center position-relative overflow-hidden login-btn\"\n                              >\n                                {loading ? (\n                                  <CSpinner size=\"sm\" />\n                                ) : (\n                                  <span className=\"d-flex align-items-center login-icon me-2\">\n                                    <FaIcons.FaLock size={20} />\n                                  </span>\n                                )}\n                                <span className=\"label-btn \">Verify</span>\n                              </CButton>\n                            </CForm>\n                          </>\n                        ) : (\n                          <>\n                            <CForm onSubmit={this.handleSubmit}>\n                              <CCol\n                                sm=\"12\"\n                                md=\"12\"\n                                lg=\"12\"\n                                className=\"d-flex justify-content-center p-3\"\n                              >\n                                <h2 className=\"text-dark\">Register</h2>\n                              </CCol>\n                              <CRow>\n                                <CCol xs=\"12\" sm=\"12\" md=\"6\" lg=\"6\">\n                                  <CInputGroup>\n                                    <CCol xs=\"12\" sm=\"12\" md=\"12\" lg=\"12\">\n                                      <CFormFloating className=\"mb-3 text-dark \">\n                                        <CFormControl\n                                          name=\"firstName\"\n                                          type=\"text\"\n                                          autoCorrect=\"false\"\n                                          id=\"floatingFirstName\"\n                                          placeholder=\"First name\"\n                                          onChange={this.handleOnChange}\n                                          value={firstName}\n                                          required\n                                          className=\"rounded-pill  ps-4 pe-4\"\n                                        />\n                                        <CFormLabel\n                                          htmlFor=\"floatingFirstName \"\n                                          className=\"ps-4 pe-4\"\n                                        >\n                                          <FaIcons.FaUser size={18} />\n                                          <span className=\"ps-2\">\n                                            First name\n                                          </span>\n                                        </CFormLabel>\n                                      </CFormFloating>\n                                    </CCol>\n                                  </CInputGroup>\n                                </CCol>\n                                <CCol xs=\"12\" sm=\"12\" md=\"6\" lg=\"6\">\n                                  <CInputGroup>\n                                    <CCol xs=\"12\" sm=\"12\" md=\"12\" lg=\"12\">\n                                      <CFormFloating className=\"mb-3 text-dark \">\n                                        <CFormControl\n                                          name=\"lastName\"\n                                          type=\"text\"\n                                          autoCorrect=\"false\"\n                                          id=\"floatingLastName\"\n                                          placeholder=\"Last name\"\n                                          onChange={this.handleOnChange}\n                                          value={lastName}\n                                          required\n                                          className=\"rounded-pill  ps-4 pe-4\"\n                                        />\n                                        <CFormLabel\n                                          htmlFor=\"floatingLastName\"\n                                          className=\"ps-4 pe-4\"\n                                        >\n                                          <FaIcons.FaUser size={18} />\n                                          <span className=\"ps-2\">\n                                            Last name\n                                          </span>\n                                        </CFormLabel>\n                                      </CFormFloating>\n                                    </CCol>\n                                  </CInputGroup>\n                                </CCol>\n                              </CRow>\n                              <CRow>\n                                <CCol md=\"6\" sm=\"12\" lg=\"6\">\n                                  <CInputGroup>\n                                    <CCol xs=\"12\" sm=\"12\" md=\"12\" lg=\"12\">\n                                      <CFormFloating className=\"mb-3 text-dark \">\n                                        <CFormControl\n                                          name=\"phoneNumber\"\n                                          type=\"number\"\n                                          autoCorrect=\"false\"\n                                          id=\"floatingPhoneNumber\"\n                                          placeholder=\"Phone number\"\n                                          onChange={this.handleOnChange}\n                                          value={phoneNumber}\n                                          required\n                                          className=\"rounded-pill  ps-4 pe-4\"\n                                        />\n                                        <CFormLabel\n                                          htmlFor=\"floatingPhoneNumber \"\n                                          className=\"ps-4 pe-4\"\n                                        >\n                                          <FaIcons.FaPhone size={18} />\n                                          <span className=\"ps-2\">\n                                            Phone number\n                                          </span>\n                                        </CFormLabel>\n                                      </CFormFloating>\n                                    </CCol>\n                                  </CInputGroup>\n                                </CCol>\n                                <CCol md=\"6\" sm=\"12\" lg=\"6\">\n                                  <CInputGroup>\n                                    <CCol xs=\"12\" sm=\"12\" md=\"12\" lg=\"12\">\n                                      <CFormFloating className=\"mb-3 text-dark position-relative\">\n                                        <CFormControl\n                                          name=\"email\"\n                                          type=\"email\"\n                                          id=\"floatingEmail\"\n                                          autoCorrect=\"false\"\n                                          placeholder=\"Email\"\n                                          onChange={this.handleOnChange}\n                                          value={email}\n                                          required\n                                          className=\"rounded-pill ps-4 pe-4\"\n                                        />\n                                        <CFormLabel\n                                          htmlFor=\"exampleFormControlTextarea1 \"\n                                          className=\"ps-4 pe-4\"\n                                        >\n                                          <FaIcons.FaEnvelope size={18} />\n                                          <span className=\"ps-2\">Email</span>\n                                        </CFormLabel>\n                                        <CFormFeedback invalid>\n                                          Please provide a valid username\n                                        </CFormFeedback>\n                                      </CFormFloating>\n                                    </CCol>\n                                  </CInputGroup>\n                                </CCol>\n                              </CRow>\n                              <CRow>\n                                <CCol md=\"6\" sm=\"12\" lg=\"6\">\n                                  <CInputGroup>\n                                    <CCol xs=\"12\" sm=\"12\" md=\"12\" lg=\"12\">\n                                      <CFormFloating className=\"mb-3 text-dark \">\n                                        <CFormControl\n                                          name=\"username\"\n                                          type=\"text\"\n                                          autoCorrect=\"false\"\n                                          id=\"floatingInput\"\n                                          placeholder=\"username\"\n                                          onChange={this.handleOnChange}\n                                          value={username}\n                                          required\n                                          className=\"rounded-pill  ps-4 pe-4\"\n                                        />\n                                        <CFormLabel\n                                          htmlFor=\"floatingInput \"\n                                          className=\"ps-4 pe-4\"\n                                        >\n                                          <FaIcons.FaUserCircle size={18} />\n                                          <span className=\"ps-2\">Username</span>\n                                        </CFormLabel>\n                                      </CFormFloating>\n                                    </CCol>\n                                  </CInputGroup>\n                                </CCol>\n                                <CCol md=\"6\" sm=\"12\" lg=\"6\">\n                                  <CInputGroup>\n                                    <CCol xs=\"12\" sm=\"12\" md=\"12\" lg=\"12\">\n                                      <CFormFloating className=\"mb-3 text-dark position-relative\">\n                                        <CFormControl\n                                          name=\"password\"\n                                          type={type}\n                                          id=\"floatingPassword\"\n                                          autoCorrect=\"false\"\n                                          placeholder=\"Password\"\n                                          onChange={this.handleOnChange}\n                                          value={password}\n                                          required\n                                          className=\"rounded-pill ps-4 pe-4\"\n                                        />\n                                        <CFormLabel\n                                          htmlFor=\"exampleFormControlTextarea1 \"\n                                          className=\"ps-4 pe-4\"\n                                        >\n                                          <FaIcons.FaLock size={18} />\n                                          <span className=\"ps-2\">Password</span>\n                                        </CFormLabel>\n                                        <span\n                                          onClick={this.handleShowPassword}\n                                          className=\"position-absolute top-50 end-0 translate-middle-y ps-4 pe-4\"\n                                        >\n                                          {type === \"password\" ? (\n                                            <FaIcons.FaEyeSlash size={20} />\n                                          ) : (\n                                            <FaIcons.FaEye size={20} />\n                                          )}\n                                        </span>\n                                        <CFormFeedback invalid>\n                                          Please provide a valid username\n                                        </CFormFeedback>\n                                      </CFormFloating>\n                                    </CCol>\n                                  </CInputGroup>\n                                </CCol>\n                              </CRow>\n                              <CCol\n                                sm=\"12\"\n                                md=\"12\"\n                                lg=\"12\"\n                                className=\"d-flex flex-column justify-content-center\"\n                              >\n                                <CButton\n                                  type=\"submit\"\n                                  color=\"success\"\n                                  size=\"lg\"\n                                  style={{ margin: \"20px auto\", width: \"50%\" }}\n                                  className=\"d-flex justify-content-center align-items-center position-relative overflow-hidden login-btn\"\n                                >\n                                  {loading ? (\n                                    <CSpinner size=\"sm\" />\n                                  ) : (\n                                    <span className=\"d-flex align-items-center login-icon me-2\">\n                                      <BsIcons.BsFillPersonPlusFill size={20} />\n                                    </span>\n                                  )}\n                                  <span className=\"label-btn \">Register</span>\n                                </CButton>\n                              </CCol>\n                            </CForm>\n                          </>\n                        )\n                      ) : (\n                        <CSpinner />\n                      )}\n                      {message && (\n                        <div className=\"form-group\">\n                          <div\n                            className={\n                              successful\n                                ? \"alert alert-success\"\n                                : \"alert alert-danger\"\n                            }\n                            role=\"alert\"\n                          >\n                            {message}\n                          </div>\n                        </div>\n                      )}\n                    </CCardBody>\n                  </CCard>\n                  <RightFormCard button=\"login\" />\n                </CCardGroup>\n              </CCol>\n            </CRow>\n          </CContainer>\n        </div>\n      </>\n    )\n  }\n}\nconst mapStateToProps = (state) => {\n  return {\n    userResponse: state.userResponse,\n    messageResponse: state.messageResponse,\n    storeInformationResponse: state.storeInformationResponse\n  }\n}\nexport default connect(mapStateToProps, {\n  createAccount,\n  clearMessage,\n  verifyCode,\n  getStoreInformation,\n})(Register)\n","import { SET_MESSAGE, CLEAR_MESSAGE } from \"src/constants/userConstants\";\n\nexport const setMessage = (message, status) => async (dispatch) => {\n    dispatch({\n        type: SET_MESSAGE,\n        payload: {\n            status: status,\n            data: {\n                message: message\n            }\n        }\n    })\n\n}\nexport const setProductMessage = (message, status) => async (dispatch) => {\n    dispatch({\n        type: SET_MESSAGE,\n        payload: {\n            status: status,\n            data: {\n                message: message\n            }\n        }\n    })\n}\nexport const setImageMesssage = (message, status) => async (dispatch) => {\n    dispatch({\n        type: SET_MESSAGE,\n        payload: {\n            status: status,\n            data: {\n                message: message\n            }\n        }\n    })\n}\nexport const clearMessage = () => async (dispatch) => {\n    dispatch({\n        type: CLEAR_MESSAGE,\n        payload: {\n            status: '',\n            data: {\n                message: ''\n            }\n        }\n    })\n};","import { createBrowserHistory } from 'history';\n\nexport const history = createBrowserHistory();","import authHeader from \"../auth/authHeader\"\nimport axios from \"./RestApi\"\n\nexport class AccountApiService {\n  getAccountEmployees(query, page, limit) {\n    return axios.get(\"/users/account\", {\n      headers: authHeader(),\n      params: {\n        query: query,\n        page: page,\n        limit: limit,\n      },\n    })\n  }\n  getUsersAccount(query, role, page, limit) {\n    return axios.get(\"/users/account\", {\n      headers: authHeader(),\n      params: {\n        query: query,\n        role: role,\n        page: page,\n        limit: limit,\n      },\n    })\n  }\n\n  saveEmployeeAccount(\n    firstName,\n    lastName,\n    email,\n    phoneNumber,\n    username,\n    password,\n    birthday,\n    role,\n  ) {\n    console.log(birthday)\n    return axios.post(\n      \"/users/account/create\",\n      {\n        firstName,\n        lastName,\n        email,\n        phoneNumber,\n        username,\n        password,\n        birthday,\n        role,\n      },\n      {\n        headers: authHeader(),\n      },\n    )\n  }\n  deleteAccount(id) {\n    return axios.delete(\"/users/account/delete/\" + id, {\n      headers: authHeader(),\n    })\n  }\n  updateUser(id, firstName, lastName, phoneNumber, birthday) {\n    return axios.put(\n      \"/users/account/update/\" + id,\n      {\n        firstName: firstName,\n        lastName: lastName,\n        phoneNumber: phoneNumber,\n        birthday: birthday,\n      },\n      {\n        headers: authHeader(),\n      },\n    )\n  }\n  banAccount(id) {\n    return axios.delete(\"/users/account/ban/\" + id, {\n      headers: authHeader(),\n    })\n  }\n  changePassword(id, currentPassword, newPassword, confirmPassword) {\n    let password = newPassword\n    return axios.post(\n      \"/users/account/change/password\",\n      {\n        id,\n        currentPassword,\n        password,\n        confirmPassword,\n      },\n      {\n        headers: authHeader(),\n      },\n    )\n  }\n  forgotPassword(email) {\n    console.log(email)\n    return axios.get(\"/account/password/forgot\", {\n      params: {\n        email: email,\n      },\n    })\n  }\n  verifyAccount(code) {\n    return axios.get(\"/account/verification/\" + code)\n  }\n  validateToken(token) {\n    return axios.get(\"/account/password/forgot/token\", {\n      params: {\n        token: token,\n      },\n    })\n  }\n  resetPassword(accountId, token, password, confirmPassword) {\n    return axios.post(\"/users/account/reset/password\", {\n      accountId: accountId,\n      token: token,\n      password: password,\n      confirmPassword: confirmPassword,\n    })\n  }\n  getMe() {\n    return axios.get(\"/users/account/me\", {\n      headers: authHeader(),\n    })\n  }\n}\nexport default new AccountApiService()\n","import {\n  BAN_ACCOUNT,\n  CHANGE_PASSWORD,\n  DELETE_ACCOUNT,\n  FORGOT_PASSWORD,\n  GET_ME,\n  GET_USERS_ACCOUNT,\n  RESET_PASSWORD,\n  SAVE_EMPLOYEE,\n  UPDATE_USER,\n  VALIDATE_TOKEN,\n  VERIFY_ACCOUNT,\n} from \"src/service/redux/constants\"\nimport AccountApiService from \"src/service/restAPI/AccountApiService\"\nimport { SET_MESSAGE } from \"src/constants/userConstants\"\n\nexport const getUsersAccount =\n  (query, role, page, limit) => async (dispatch) => {\n    return AccountApiService.getUsersAccount(query, role, page, limit).then(\n      (response) => {\n        dispatch({\n          type: GET_USERS_ACCOUNT,\n          payload: {\n            status: 200,\n            action: \"USERSACCOUNT\",\n            data: {\n              accounts: response.data,\n            },\n          },\n        })\n        return Promise.resolve()\n      },\n      (error) => {\n        const errorMessage =\n          (error.response &&\n            error.response.data &&\n            error.response.data.message) ||\n          error.message ||\n          error.toString()\n\n        const status =\n          (error.response && error.response.data && error.response.data.code) ||\n          error.toString()\n\n        dispatch({\n          type: SET_MESSAGE,\n          payload: {\n            status: status,\n            data: {\n              message: errorMessage,\n            },\n          },\n        })\n        return Promise.reject()\n      },\n    )\n  }\nexport const saveEmployee =\n  (\n    firstName,\n    lastName,\n    email,\n    phoneNumber,\n    username,\n    password,\n    birthday,\n    role,\n  ) =>\n    async (dispatch) => {\n      return AccountApiService.saveEmployeeAccount(\n        firstName,\n        lastName,\n        email,\n        phoneNumber,\n        username,\n        password,\n        birthday,\n        role,\n      ).then(\n        (response) => {\n          dispatch({\n            type: SAVE_EMPLOYEE,\n            payload: {\n              status: 200,\n              action: \"SAVEEMPLOYEE\",\n              data: {},\n            },\n          })\n          dispatch({\n            type: SET_MESSAGE,\n            payload: {\n              status: 200,\n              data: {\n                message: \"Successfully Saved\",\n              },\n            },\n          })\n        },\n        (error) => {\n          const errorMessage =\n            (error.response &&\n              error.response.data &&\n              error.response.data.message) ||\n            error.message ||\n            error.toString()\n\n          const status =\n            (error.response && error.response.data && error.response.data.code) ||\n            error.toString()\n\n          dispatch({\n            type: SET_MESSAGE,\n            payload: {\n              status: status,\n              data: {\n                message: errorMessage,\n              },\n            },\n          })\n          return Promise.reject()\n        },\n      )\n    }\nexport const deleteAccount = (id) => async (dispatch) => {\n  return AccountApiService.deleteAccount(id).then(\n    (response) => {\n      dispatch({\n        type: DELETE_ACCOUNT,\n        payload: {\n          status: 200,\n          action: \"DELETEACCOUNT\",\n          data: {},\n        },\n      })\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: 200,\n          data: {\n            message: \"Successfully Deleted\",\n          },\n        },\n      })\n    },\n    (error) => {\n      const errorMessage =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: errorMessage,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\nexport const banAccount = (id) => async (dispatch) => {\n  return AccountApiService.banAccount(id).then(\n    (response) => {\n      dispatch({\n        type: BAN_ACCOUNT,\n        payload: {\n          status: 200,\n          action: \"BANACCOUNT\",\n          data: {},\n        },\n      })\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: 200,\n          data: {\n            message: \"Successfully Banned\",\n          },\n        },\n      })\n    },\n    (error) => {\n      const errorMessage =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: errorMessage,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\nexport const changePassword =\n  (id, currentPassword, newPassword, confirmPassword) => async (dispatch) => {\n    return AccountApiService.changePassword(\n      id,\n      currentPassword,\n      newPassword,\n      confirmPassword,\n    ).then(\n      (response) => {\n        dispatch({\n          type: CHANGE_PASSWORD,\n          payload: {\n            status: 200,\n            action: \"changepassword\",\n            data: {},\n          },\n        })\n        dispatch({\n          type: SET_MESSAGE,\n          payload: {\n            status: 200,\n            data: {\n              message: \"Password Change Successfully.\",\n            },\n          },\n        })\n        return Promise.resolve()\n      },\n      (error) => {\n        const errorMessage =\n          (error.response &&\n            error.response.data &&\n            error.response.data.message) ||\n          error.message ||\n          error.toString()\n\n        const status =\n          (error.response && error.response.data && error.response.data.code) ||\n          error.toString()\n\n        dispatch({\n          type: SET_MESSAGE,\n          payload: {\n            status: status,\n            data: {\n              message: errorMessage,\n            },\n          },\n        })\n        return Promise.reject()\n      },\n    )\n  }\n\nexport const forgotPassword = (email) => async (dispatch) => {\n  console.log(email)\n  return AccountApiService.forgotPassword(email).then(\n    (response) => {\n      dispatch({\n        type: FORGOT_PASSWORD,\n        payload: {\n          status: 200,\n          action: FORGOT_PASSWORD,\n          data: {},\n        },\n      })\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: 200,\n          data: {\n            message:\n              \"The Forgot Password Token has been sent to your Email Address.\",\n            // {\n            //   message:,\n            //   note: \"If you not Found the Email Message in your inbox, Try to look in your Spam. Thankyou!\"\n            // },\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      const errorMessage =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: errorMessage,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\n\nexport const validateToken = (token) => async (dispatch) => {\n  return AccountApiService.validateToken(token).then(\n    (response) => {\n      dispatch({\n        type: VALIDATE_TOKEN,\n        payload: {\n          status: 200,\n          action: VALIDATE_TOKEN,\n          data: {\n            tokenResponse: response.data,\n          },\n        },\n      })\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: 200,\n          data: {\n            message: \"\",\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      const errorMessage =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: errorMessage,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\nexport const resetPassword =\n  (accoutnId, token, password, confirmPassword) => async (dispatch) => {\n    return AccountApiService.resetPassword(\n      accoutnId,\n      token,\n      password,\n      confirmPassword,\n    ).then(\n      (response) => {\n        dispatch({\n          type: RESET_PASSWORD,\n          payload: {\n            status: 200,\n            action: RESET_PASSWORD,\n            data: {},\n          },\n        })\n        dispatch({\n          type: SET_MESSAGE,\n          payload: {\n            status: 200,\n            data: {\n              message: \"Successfully Reset your Password\",\n            },\n          },\n        })\n        return Promise.resolve()\n      },\n      (error) => {\n        const errorMessage =\n          (error.response &&\n            error.response.data &&\n            error.response.data.message) ||\n          error.message ||\n          error.toString()\n\n        const status =\n          (error.response && error.response.data && error.response.data.code) ||\n          error.toString()\n\n        dispatch({\n          type: SET_MESSAGE,\n          payload: {\n            status: status,\n            data: {\n              message: errorMessage,\n            },\n          },\n        })\n        return Promise.reject()\n      },\n    )\n  }\nexport const getMe = () => async (dispatch) => {\n  return AccountApiService.getMe().then(\n    (response) => {\n      dispatch({\n        type: GET_ME,\n        payload: {\n          status: 200,\n          action: GET_ME,\n          data: {\n            account: response.data,\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      const errorMessage =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: errorMessage,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\nexport const updateUser =\n  (id, firstName, lastName, phoneNumber, birthday) => async (dispatch) => {\n    return AccountApiService.updateUser(\n      id,\n      firstName,\n      lastName,\n      phoneNumber,\n      birthday,\n    ).then(\n      (response) => {\n        dispatch({\n          type: UPDATE_USER,\n          payload: {\n            status: 200,\n            action: UPDATE_USER,\n            data: {},\n          },\n        })\n        dispatch({\n          type: SET_MESSAGE,\n          payload: {\n            status: 200,\n            data: {\n              message: \"Successfully Updated\",\n            },\n          },\n        })\n        return Promise.resolve()\n      },\n      (error) => {\n        const errorMessage =\n          (error.response &&\n            error.response.data &&\n            error.response.data.message) ||\n          error.message ||\n          error.toString()\n\n        const status =\n          (error.response && error.response.data && error.response.data.code) ||\n          error.toString()\n\n        dispatch({\n          type: SET_MESSAGE,\n          payload: {\n            status: status,\n            data: {\n              message: errorMessage,\n            },\n          },\n        })\n        return Promise.reject()\n      },\n    )\n  }\nexport const verifyCode = (code) => async (dispatch) => {\n  return AccountApiService.verifyAccount(code).then(\n    (response) => {\n      dispatch({\n        type: VERIFY_ACCOUNT,\n        payload: {\n          status: 200,\n          action: VERIFY_ACCOUNT,\n          data: {\n\n          }\n        }\n\n      })\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: 200,\n          data: {\n            message: \"Your Account has been Verified. Try To Login.\",\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n\n      const errorMessage =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: errorMessage,\n          },\n        },\n      })\n      return Promise.reject()\n    }\n  )\n}"],"sourceRoot":""}