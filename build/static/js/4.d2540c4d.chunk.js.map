{"version":3,"sources":["service/apiActions/modalAction/modalAction.js","service/apiActions/productAction/productAction.js","service/restAPI/ProductApiService.js","service/restAPI/BranchApiService.js","components/modals/alert/AlertModal.js","service/apiActions/branchAction/branchAction.js","service/restAPI/CategoriesApiService.js","service/apiActions/categoryAction/categoryAction.js","service/restAPI/SupplierApiService.js","service/apiActions/supplierAction/supplierAction.js","service/restAPI/AddressApiService.js","service/apiActions/addressAction/addressAction.js","service/restAPI/BrandApiService.js","service/apiActions/brandAction/brandAction.js","service/restAPI/PromoApiService.js","service/apiActions/promoAction/promoAction.js"],"names":["setProductModal","visible","action","icon","async","dispatch","type","SET_PRODUCTEDITMODAL_VISIBILIT","payload","status","data","setProductDetailsModal","product","SET_PRODUCT_DETAILS_MODAL","editProductModal","updateProduct","EDIT_PRODUCT_MODAL","setAlertModal","alert","module","id","ALERT_MODAL","setAlertBanModal","ALERT_BAN_MODAL","setStoreModal","storeInfo","UDPATE_STORE_INFORMATION","addBrandModal","branch","ADD_BRAND_MODAL","brand","addCategoryModal","category","ADD_CATEGORY_MODAL","addAccountModal","employee","ADD_EMPLOYEE_MODAL","changePasswordModal","CHANGE_PASSWORD_MODAL","setLoginModal","LOGIN_MODAL","setAddressModal","address","SET_ADDRESS_MODAL","setSupplierModal","supplier","SET_SUPPLIER_MODAL","setSupplyModal","supply","SET_SUPPLY_MODAL","setScanModal","SET_SCAN_MODAL","setPromoModal","promo","SET_PROMO_MODAL","setTermAndConditionModal","termsAndCondition","SET_TERMS_AND_CONDITION_MODAL","setCarouselModal","carousel","SET_CAROULSE_MDOAL","setTrackingInfoModal","order","SET_TRACKING_INFO_MODAL","saveProduct","formData","ProductApiService","then","response","SAVE_PRODUCT","SET_MESSAGE","message","Promise","resolve","error","console","log","error_message","toString","code","SAVE_FAIL","reject","getDiscoverProducts","query","page","limit","GET_DISCOVER_PRODUCT","products","SET_PRODUCT_MESSAGE","getPopularProducts","GET_POPULAR_PRODUCT","getImage","image","token","GET_IMAGE","FAIL_GET_IMAGE","getProduct","GET_PRODUCT","getProductDetails","GET_PRODUCT_DETAILS","deleteProduct","DELETE_PRODUCT","productId","UPDATE_PRODUCT","updatedProduct","searchProductByBarcodeOrName","SEARCH_PRODUCT","getProductsByCategoryName","categoryName","GET_PRODUCT_BY_CATEGORY_NAME","getProductsByStatus","GET_PRODUCTS_BY_STATUS","getProductsWithPromo","GET_PRODUCTS_WITH_PROMO","axios","post","headers","authHeader","put","delete","getProducts","get","params","path","getPath","responseType","getBranches","Authorization","getBranchesWithTotaProduct","saveBranch","updateBranch","deleteBranch","AlertModal","Component","state","loading","success","manageModalAlert","prevProps","prevState","modalVisible","this","props","setState","handleOnDelete","accessToken","userResponse","credentials","branchDelete","handleDeleteBrand","handleAccountDelete","handleSupplierDelete","handleDeleteCategory","handleDeleteProduct","handleDeletePromo","handleDeleteMe","handleDeleteAddress","setInterval","window","location","reload","catch","successFully","deleteBrand","messageResponse","deleteAccount","deleteSupplier","deleteCategory","deletePromo","logout","deleteAddress","componentDidUpdate","render","onDismiss","className","color","variant","onClick","disabled","size","connect","modalVisibleResponse","BranchApiService","DELETE_BRANCH","clearMessage","withRouter","saveCategory","name","updateCategory","getCategories","getCategory","getCategoriesList","CategoriesApiService","SAVE_CATEGORY","GET_CATEGORIES","categories","GET_CATEGORIES_LIST","categoriesList","UPDATE_CATEGORY","updatedCategory","DELETE_CATEGORY","createSupplier","phoneNumber","updateSupplier","getSuppliers","getSupplier","SupplierApiService","CREATE_SUPPLIER","errorMessage","UPDATE_SUPPLIER","DELETE_SUPPLIER","GET_SUPPLIERS","suppliers","getAddresses","updateAddress","firstName","lastName","region","city","province","barangay","street","postalCode","saveAddress","getAdress","AddressApiService","GET_ADDRESSES","addresses","SAVE_ADDRESS","UPDATE_ADDRESS","DELETE_CUSTOMER_ADDRESS","getBrands","getBrand","saveBrand","updateBrand","getBrandsList","BrandApiService","GET_BRANDS","brands","GET_BRANDS_LIST","savingBrand","SAVE_BRAND","FAIL_BRAND","UPDATE_BRAND","DELETE_BRAND","getPromos","savePromo","quantity","percentage","startDate","endDate","updatePromo","PromoApiService","GET_PROMOS","productsWithPromo","SAVE_PROMO","DELETE_PROMO","UPDATE_PROMO","updatedPromo"],"mappings":"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","file":"static/js/4.d2540c4d.chunk.js","sourcesContent":["import {\n  ADD_BRANCH_MODAL,\n  ALERT_MODAL,\n  EDIT_PRODUCT_MODAL,\n  SET_PRODUCTEDITMODAL_VISIBILIT,\n  ADD_BRAND_MODAL,\n  ADD_CATEGORY_MODAL,\n  ADD_EMPLOYEE_MODAL,\n  SET_PRODUCT_DETAILS_MODAL,\n  LOGIN_MODAL,\n  SET_ADDRESS_MODAL,\n  SET_SUPPLIER_MODAL,\n  SET_SUPPLY_MODAL,\n  SET_SCAN_MODAL,\n  SET_PROMO_MODAL,\n  ALERT_BAN_MODAL,\n  CHANGE_PASSWORD_MODAL,\n  UDPATE_STORE_INFORMATION,\n  SET_TERMS_AND_CONDITION_MODAL,\n  SET_CAROULSE_MDOAL,\n  SET_TRACKING_INFO_MODAL,\n} from \"src/service/redux/constants\"\n\nexport const setProductModal = (visible, action, icon) => async (dispatch) => {\n  dispatch({\n    type: SET_PRODUCTEDITMODAL_VISIBILIT,\n    payload: {\n      status: 200,\n      data: {\n        visible: visible,\n        action: action,\n        icon: icon,\n      },\n    },\n  })\n}\nexport const setProductDetailsModal =\n  (visible, action, product) => async (dispatch) => {\n    dispatch({\n      type: SET_PRODUCT_DETAILS_MODAL,\n      payload: {\n        status: 200,\n        data: {\n          visible: visible,\n          action: action,\n          product: product,\n        },\n      },\n    })\n  }\nexport const editProductModal =\n  (visible, action, updateProduct, icon) => async (dispatch) => {\n    dispatch({\n      type: EDIT_PRODUCT_MODAL,\n      payload: {\n        status: 200,\n        data: {\n          visible: visible,\n          action: action,\n          product: updateProduct,\n          icon: icon,\n        },\n      },\n    })\n  }\nexport const setAlertModal =\n  (alert, action, module, id) => async (dispatch) => {\n    dispatch({\n      type: ALERT_MODAL,\n      payload: {\n        action: action,\n        module: module,\n        alert: alert,\n        data: {\n          id: id,\n        },\n      },\n    })\n  }\nexport const setAlertBanModal =\n  (alert, action, module, id) => async (dispatch) => {\n    dispatch({\n      type: ALERT_BAN_MODAL,\n      payload: {\n        action: action,\n        module: module,\n        alert: alert,\n        data: {\n          id: id,\n        },\n      },\n    })\n  }\nexport const setStoreModal =\n  (visible, action, storeInfo, icon) => async (dispatch) => {\n    dispatch({\n      type: UDPATE_STORE_INFORMATION,\n      payload: {\n        status: 200,\n        data: {\n          visible: visible,\n          action: action,\n          storeInfo: storeInfo,\n          icon: icon,\n        },\n      },\n    })\n  }\n\nexport const addBrandModal =\n  (visible, action, branch, icon) => async (dispatch) => {\n    dispatch({\n      type: ADD_BRAND_MODAL,\n      payload: {\n        status: 200,\n        data: {\n          visible: visible,\n          action: action,\n          brand: branch,\n          icon: icon,\n        },\n      },\n    })\n  }\n\nexport const addCategoryModal =\n  (visible, action, category, icon) => async (dispatch) => {\n    dispatch({\n      type: ADD_CATEGORY_MODAL,\n      payload: {\n        status: 200,\n        data: {\n          visible: visible,\n          action: action,\n          category: category,\n          icon: icon,\n        },\n      },\n    })\n  }\n\nexport const addAccountModal =\n  (visible, action, employee, icon) => async (dispatch) => {\n    dispatch({\n      type: ADD_EMPLOYEE_MODAL,\n      payload: {\n        status: 200,\n        data: {\n          visible: visible,\n          action: action,\n          employee: employee,\n          icon: icon,\n        },\n      },\n    })\n  }\nexport const changePasswordModal =\n  (visible, action, employee, icon) => async (dispatch) => {\n    dispatch({\n      type: CHANGE_PASSWORD_MODAL,\n      payload: {\n        status: 200,\n        data: {\n          visible: visible,\n          action: action,\n          employee: employee,\n          icon: icon,\n        },\n      },\n    })\n  }\nexport const setLoginModal = (visible, action) => async (dispatch) => {\n  dispatch({\n    type: LOGIN_MODAL,\n    payload: {\n      data: {\n        visible: visible,\n        action: action,\n      },\n    },\n  })\n}\n\nexport const setAddressModal =\n  (visible, action, address, icon) => async (dispatch) => {\n    dispatch({\n      type: SET_ADDRESS_MODAL,\n      payload: {\n        data: {\n          visible: visible,\n          action: action,\n          address: address,\n          icon: icon,\n        },\n      },\n    })\n  }\n\nexport const setSupplierModal =\n  (visible, action, supplier, icon) => async (dispatch) => {\n    dispatch({\n      type: SET_SUPPLIER_MODAL,\n      payload: {\n        action: action,\n        data: {\n          visible: visible,\n          icon: icon,\n          supplier: supplier,\n        },\n      },\n    })\n  }\nexport const setSupplyModal =\n  (visible, action, supply, icon) => async (dispatch) => {\n    dispatch({\n      type: SET_SUPPLY_MODAL,\n      payload: {\n        action: action,\n        data: {\n          visible: visible,\n          icon: icon,\n          supply: supply,\n        },\n      },\n    })\n  }\n\nexport const setScanModal = (visible, action) => async (dispatch) => {\n  dispatch({\n    type: SET_SCAN_MODAL,\n    payload: {\n      action: action,\n      data: {\n        visible: visible,\n      },\n    },\n  })\n}\nexport const setPromoModal =\n  (visible, action, promo, icon) => async (dispatch) => {\n    dispatch({\n      type: SET_PROMO_MODAL,\n      payload: {\n        action: action,\n        data: {\n          visible: visible,\n          icon: icon,\n          promo: promo,\n        },\n      },\n    })\n  }\nexport const setTermAndConditionModal =\n  (visible, action, termsAndCondition, icon) => async (dispatch) => {\n    dispatch({\n      type: SET_TERMS_AND_CONDITION_MODAL,\n      payload: {\n        status: 200,\n        data: {\n          visible: visible,\n          action: action,\n          termsAndCondition: termsAndCondition,\n          icon: icon,\n        },\n      },\n    })\n  }\nexport const setCarouselModal =\n  (visible, action, carousel, icon) => async (dispatch) => {\n    dispatch({\n      type: SET_CAROULSE_MDOAL,\n      payload: {\n        status: 200,\n        data: {\n          visible: visible,\n          action: action,\n          carousel: carousel,\n          icon: icon,\n        },\n      },\n    })\n  }\n\nexport const setTrackingInfoModal = (visible, action, order, icon) => async (dispatch) => {\n  dispatch({\n    type: SET_TRACKING_INFO_MODAL,\n    payload: {\n      status: 200,\n      data: {\n        visible: visible,\n        action: action,\n        order: order,\n        icon: icon\n      }\n    }\n  })\n}\n","// import RestApi from '../RestApi'\nimport { SET_MESSAGE } from \"src/constants/userConstants\"\nimport ProductApiService from \"src/service/restAPI/ProductApiService\"\nimport {\n  DELETE_PRODUCT,\n  FAIL_GET_IMAGE,\n  GET_DISCOVER_PRODUCT,\n  GET_IMAGE,\n  GET_PRODUCT,\n  GET_PRODUCTS,\n  GET_PRODUCTS_BY_STATUS,\n  GET_PRODUCTS_WITH_PROMO,\n  GET_PRODUCT_BY_CATEGORY_NAME,\n  GET_PRODUCT_DETAILS,\n  SAVE_FAIL,\n  // UPDATE_PRODUCT,\n  // DELETE_PRODUCT\n  SAVE_PRODUCT,\n  SEARCH_PRODUCT,\n  SET_PRODUCT_MESSAGE,\n  UPDATE_PRODUCT,\n  GET_POPULAR_PRODUCT\n} from \"../../redux/constants\"\n\nexport const saveProduct = (formData) => async (dispatch) => {\n  return ProductApiService.saveProduct(formData).then(\n    (response) => {\n      dispatch({\n        type: SAVE_PRODUCT,\n      })\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: 200,\n          data: {\n            message: \"Successfully Saved\",\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      console.log(error)\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.error_message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.toString()\n      console.log(status)\n      dispatch({\n        type: SAVE_FAIL,\n      })\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: message,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\n\nexport const getProducts = (query, page, limit) => async (dispatch) => {\n  return ProductApiService.getProducts(query, page, limit).then(\n    (response) => {\n      dispatch({\n        type: GET_PRODUCTS,\n        payload: {\n          status: 200,\n          data: {\n            products: response.data,\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.error_message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.status ||\n        error.toString()\n\n      dispatch({\n        type: SET_PRODUCT_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: message,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\n\nexport const getDiscoverProducts = (query, page, limit) => async (dispatch) => {\n  return ProductApiService.getDiscoverProducts(query, page, limit).then(\n    (response) => {\n      dispatch({\n        type: GET_DISCOVER_PRODUCT,\n        payload: {\n          status: 200,\n          data: {\n            products: response.data,\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.error_message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.status ||\n        error.toString()\n\n      dispatch({\n        type: SET_PRODUCT_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: message,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\n\nexport const getPopularProducts = (query, page, limit) => async (dispatch) => {\n  return ProductApiService.getPopularProducts(query, page, limit).then(\n    (response) => {\n      dispatch({\n        type: GET_POPULAR_PRODUCT,\n        payload: {\n          status: 200,\n          data: {\n            products: response.data,\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.error_message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.status ||\n        error.toString()\n\n      dispatch({\n        type: SET_PRODUCT_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: message,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\n\nexport const getImage = (image, token) => async (dispatch) => {\n  return ProductApiService.getImage(image, token).then(\n    (response) => {\n      console.log(response)\n      dispatch({\n        type: GET_IMAGE,\n        payload: {\n          status: response.status,\n          data: {\n            image: response.data,\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.error_message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.status ||\n        error.toString()\n      dispatch({\n        type: FAIL_GET_IMAGE,\n      })\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: message,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\nexport const getProduct = (id) => async (dispatch) => {\n  return ProductApiService.getProduct(id).then(\n    (response) => {\n      dispatch({\n        type: GET_PRODUCT,\n        payload: {\n          status: 200,\n          data: {\n            product: response.data,\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.error_message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.status ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: message,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\nexport const getProductDetails = (id) => async (dispatch) => {\n  return ProductApiService.getProductDetails(id).then(\n    (response) => {\n      dispatch({\n        type: GET_PRODUCT_DETAILS,\n        payload: {\n          status: 200,\n          data: {\n            product: response.data,\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.error_message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.status ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: message,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\nexport const deleteProduct = (id) => async (dispatch) => {\n  return ProductApiService.deleteProduct(id).then(\n    (response) => {\n      dispatch({\n        type: DELETE_PRODUCT,\n        payload: {\n          status: 200,\n          action: DELETE_PRODUCT,\n          data: {},\n        },\n      })\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: 200,\n          data: {\n            message: \"Successfully Deleted\",\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.error_message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.status ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: message,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\n\nexport const updateProduct = (productId, formData) => async (dispatch) => {\n  return ProductApiService.updateProduct(productId, formData).then(\n    (response) => {\n      dispatch({\n        type: UPDATE_PRODUCT,\n        payload: {\n          status: 200,\n          action: UPDATE_PRODUCT,\n          data: {\n            updatedProduct: response.data,\n          },\n        },\n      })\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: 200,\n          data: {\n            message: \"Successfully Updated\",\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.error_message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.status ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: message,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\nexport const searchProductByBarcodeOrName =\n  (query, page, limit) => async (dispatch) => {\n    return ProductApiService.searchProductByBarcodeOrName(\n      query,\n      page,\n      limit,\n    ).then(\n      (response) => {\n        dispatch({\n          type: SEARCH_PRODUCT,\n          payload: {\n            status: 200,\n            action: SEARCH_PRODUCT,\n            data: {\n              products: response.data,\n            },\n          },\n        })\n        return Promise.resolve()\n      },\n      (error) => {\n        const message =\n          (error.response &&\n            error.response.data &&\n            error.response.data.message) ||\n          error.message ||\n          error.error_message ||\n          error.toString()\n\n        const status =\n          (error.response && error.response.data && error.response.data.code) ||\n          error.status ||\n          error.toString()\n\n        dispatch({\n          type: SET_MESSAGE,\n          payload: {\n            status: status,\n            data: {\n              message: message,\n            },\n          },\n        })\n        return Promise.reject()\n      },\n    )\n  }\n\nexport const getProductsByCategoryName =\n  (categoryName, query, page, limit) => async (dispatch) => {\n    return ProductApiService.getProductsByCategoryName(\n      categoryName,\n      query,\n      page,\n      limit,\n    ).then(\n      (response) => {\n        dispatch({\n          type: GET_PRODUCT_BY_CATEGORY_NAME,\n          payload: {\n            status: 200,\n            action: GET_PRODUCT_BY_CATEGORY_NAME,\n            data: {\n              products: response.data,\n            },\n          },\n        })\n        return Promise.resolve()\n      },\n      (error) => {\n        const message =\n          (error.response &&\n            error.response.data &&\n            error.response.data.message) ||\n          error.message ||\n          error.error_message ||\n          error.toString()\n\n        const status =\n          (error.response && error.response.data && error.response.data.code) ||\n          error.status ||\n          error.toString()\n\n        dispatch({\n          type: SET_MESSAGE,\n          payload: {\n            status: status,\n            data: {\n              message: message,\n            },\n          },\n        })\n        return Promise.reject()\n      },\n    )\n  }\nexport const getProductsByStatus =\n  (query, status, page, limit) => async (dispatch) => {\n    return ProductApiService.getProductsByStatus(\n      query,\n      status,\n      page,\n      limit,\n    ).then(\n      (response) => {\n        dispatch({\n          type: GET_PRODUCTS_BY_STATUS,\n          payload: {\n            status: 200,\n            action: GET_PRODUCTS_BY_STATUS,\n            data: {\n              products: response.data,\n            },\n          },\n        })\n      },\n      (error) => {\n        const message =\n          (error.response &&\n            error.response.data &&\n            error.response.data.message) ||\n          error.message ||\n          error.error_message ||\n          error.toString()\n\n        const status =\n          (error.response && error.response.data && error.response.data.code) ||\n          error.status ||\n          error.toString()\n\n        dispatch({\n          type: SET_MESSAGE,\n          payload: {\n            status: status,\n            data: {\n              message: message,\n            },\n          },\n        })\n        return Promise.reject()\n      },\n    )\n  }\n\nexport const getProductsWithPromo =\n  (status, query, page, limit) => async (dispatch) => {\n    return ProductApiService.getProductsWithPromo(\n      status,\n      query,\n      page,\n      limit,\n    ).then(\n      (response) => {\n        dispatch({\n          type: GET_PRODUCTS_WITH_PROMO,\n          payload: {\n            status: 200,\n            action: GET_PRODUCTS_WITH_PROMO,\n            data: {\n              products: response.data,\n            },\n          },\n        })\n        return Promise.resolve()\n      },\n      (error) => {\n        const message =\n          (error.response &&\n            error.response.data &&\n            error.response.data.message) ||\n          error.message ||\n          error.error_message ||\n          error.toString()\n\n        const status =\n          (error.response && error.response.data && error.response.data.code) ||\n          error.status ||\n          error.toString()\n\n        dispatch({\n          type: SET_MESSAGE,\n          payload: {\n            status: status,\n            data: {\n              message: message,\n            },\n          },\n        })\n        return Promise.reject()\n      },\n    )\n  }\n","import authHeader from \"../auth/authHeader\"\nimport axios from \"./RestApi\"\n\nexport class ProductApiService {\n  saveProduct(formData) {\n    return axios.post(\"/products/save\", formData, { headers: authHeader() })\n  }\n  updateProduct(productId, formData) {\n    return axios.put(\"/products/update/\" + productId, formData, {\n      headers: authHeader(),\n    })\n  }\n  deleteProduct(id) {\n    return axios.delete(\"/products/delete/\" + id, {\n      headers: authHeader(),\n    })\n  }\n  getProducts(query, page, limit) {\n    return axios.get(\"/products\", {\n      headers: authHeader(),\n      params: {\n        query: query,\n        page: page,\n        limit: limit,\n      },\n    })\n  }\n  getImage(path, image) {\n    console.log()\n    let getPath = path ? path : \"null/\"\n\n    return axios.get(\"/products/getImages/bytesArrays/\" + getPath + image, {\n      responseType: \"blob\",\n    })\n  }\n  getProduct(id) {\n    return axios.get(\"/products/\" + id, {\n      headers: authHeader(),\n    })\n  }\n  getProductDetails(id) {\n    return axios.get(\"/products/details/\" + id, {\n      headers: authHeader(),\n    })\n  }\n  getDiscoverProducts(query, page, limit) {\n    return axios.get(\"/products/discover\", {\n      headers: authHeader(),\n      params: {\n        query: query,\n        page: page,\n        limit: limit,\n      },\n    })\n  }\n  getPopularProducts(query, page, limit) {\n    return axios.get(\"/products/popular\", {\n      headers: authHeader(),\n      params: {\n        query: query,\n        page: page,\n        limit: limit,\n      },\n    })\n  }\n  searchProductByBarcodeOrName(query, page, limit) {\n    return axios.get(\"/products/search\", {\n      headers: authHeader(),\n      params: {\n        query: query,\n        page: page,\n        limit: limit,\n      },\n    })\n  }\n  getProductsByCategoryName(categoryName, query, page, limit) {\n    return axios.get(\"/products/category/\" + categoryName, {\n\n      headers: authHeader(),\n      params: {\n        query: query,\n        page: page,\n        limit: limit,\n      },\n    })\n  }\n  getProductsByStatus(query, status, page, limit) {\n    return axios.get(\"/products/status\", {\n      headers: authHeader(),\n      params: {\n        status: status,\n        query: query,\n        page: page,\n        limit: limit,\n      },\n    })\n  }\n  getProductsWithPromo(status, query, page, limit) {\n    return axios.get(\"/products/promo\", {\n      headers: authHeader(),\n      params: {\n        status: status,\n        query: query,\n        page: page,\n        limit: limit,\n      },\n    })\n  }\n}\n\nexport default new ProductApiService()\n\n// export default new ProductApiService();\n","import axios from './RestApi'\n\nexport class BranchApiService {\n    getBranches(token) {\n        return axios.get(\"/branches/options\", {\n            headers: { Authorization: token }\n        })\n    }\n    getBranchesWithTotaProduct(token) {\n        return axios.get(\"/branches\", {\n            headers: { Authorization: token }\n        })\n    }\n    saveBranch(branch, token) {\n        return axios.post(\"/branches/save\", {\n            branch\n        }, {\n            headers: { Authorization: token }\n        });\n    }\n    updateBranch(id, branch, token) {\n        console.log(id)\n        return axios.post(\"/branches/update/\" + id, {\n            branch\n        }, {\n            headers: { Authorization: token }\n        })\n    }\n    deleteBranch(id, token) {\n        return axios.delete(\"/branches/delete/\" + id, {\n            headers: { Authorization: token }\n        })\n    }\n}\nexport default new BranchApiService();","import React, { Component } from \"react\"\nimport {\n  CModal,\n  CModalHeader,\n  CModalBody,\n  CModalFooter,\n  CButton,\n  CModalTitle,\n  CSpinner,\n} from \"@coreui/react\"\nimport { connect } from \"react-redux\"\n//action\nimport { deleteBranch } from \"src/service/apiActions/branchAction/branchAction\"\nimport { setAlertModal } from \"src/service/apiActions/modalAction/modalAction\"\nimport { clearMessage } from \"src/service/apiActions/messageAction/messageAction\"\nimport { deleteBrand } from \"src/service/apiActions/brandAction/brandAction\"\nimport { deleteAccount } from \"src/service/apiActions/accountAction/accountAction\"\nimport { deleteSupplier } from \"src/service/apiActions/supplierAction/supplierAction\"\nimport { deleteCategory } from \"src/service/apiActions/categoryAction/categoryAction\"\nimport { deleteProduct } from \"src/service/apiActions/productAction/productAction\"\nimport { deletePromo } from \"src/service/apiActions/promoAction/promoAction\"\nimport { deleteAddress } from \"src/service/apiActions/addressAction/addressAction\"\nimport { withRouter } from \"react-router\"\nimport { logout } from \"src/service/apiActions/userAction/userAction\"\nexport class AlertModal extends Component {\n  state = {\n    visible: false,\n    id: \"\",\n    action: \"\",\n    module: \"\",\n    loading: false,\n    success: false,\n    message: \"\",\n    status: \"\",\n  }\n  componentDidUpdate(prevProps, prevState) {\n    this.manageModalAlert(prevProps, prevState)\n  }\n  manageModalAlert = (prevProps, prevState) => {\n    if (prevProps.modalVisible !== this.props.modalVisible) {\n      let { alert, id, module, action } = this.props.modalVisible\n      switch (action) {\n        case \"DELETEBRANCH\":\n          this.setState({\n            visible: alert,\n            id: id,\n            module: module,\n            action: action,\n          })\n          break\n        case \"DELETEBRAND\":\n          this.setState({\n            visible: alert,\n            id: id,\n            module: module,\n            action: action,\n          })\n          break\n        case \"DELETEEMPLOYEE\":\n          this.setState({\n            visible: alert,\n            id: id,\n            module: module,\n            action: action,\n          })\n          break\n\n        case \"DELETECUSTOMER\":\n          this.setState({\n            visible: alert,\n            id: id,\n            module: module,\n            action: action,\n          })\n          break\n\n        case \"DELETESUPPLIER\":\n          this.setState({\n            visible: alert,\n            id: id,\n            module: module,\n            action: action,\n          })\n          break\n\n        case \"DELETECATEGORY\":\n          this.setState({\n            visible: alert,\n            id: id,\n            module: module,\n            action: action,\n          })\n          break\n\n        case \"DELETEPRODUCT\":\n          this.setState({\n            visible: alert,\n            id: id,\n            module: module,\n            action: action,\n          })\n          break\n\n        case \"DELETEPROMO\":\n          this.setState({\n            visible: alert,\n            id: id,\n            module: module,\n            action: action,\n          })\n          break\n\n        case \"DELETEME\":\n          this.setState({\n            visible: alert,\n            id: id,\n            module: module,\n            action: action,\n          })\n          break\n        case \"DELETECUSTOMERADDRESS\":\n          this.setState({\n            visible: alert,\n            id: id,\n            module: module,\n            action: action,\n          })\n          break\n\n        default:\n          this.setState({\n            visible: alert,\n          })\n      }\n    }\n  }\n\n  handleOnDelete = () => {\n    let { id, action, module } = this.state\n    let { accessToken, type } = this.props.userResponse.credentials\n    let token = type + accessToken\n    this.setState({\n      loading: true,\n    })\n    if (action === \"DELETEBRANCH\" && module === \"BRANCH\") {\n      this.branchDelete(id, token)\n      console.log(\"BRANCH\")\n    } else if (action === \"DELETEBRAND\" && module === \"BRAND\") {\n      this.handleDeleteBrand(id, token)\n    } else if (action === \"DELETEEMPLOYEE\" && module === \"EMPLOYEE\") {\n      this.handleAccountDelete(id)\n    } else if (action === \"DELETECUSTOMER\" && module === \"CUSTOMER\") {\n      this.handleAccountDelete(id)\n    } else if (action === \"DELETESUPPLIER\" && module === \"SUPPLIER\") {\n      this.handleSupplierDelete(id)\n    } else if (action === \"DELETECATEGORY\" && module === \"CATEGORY\") {\n      this.handleDeleteCategory(id)\n    } else if (action === \"DELETEPRODUCT\" && module === \"PRODUCT\") {\n      this.handleDeleteProduct(id)\n    } else if (action === \"DELETEPROMO\" && module === \"PROMO\") {\n      this.handleDeletePromo(id)\n    } else if (action === \"DELETEME\" && module === \"ACCOUNT\") {\n      this.handleDeleteMe(id)\n    } else if (action === \"DELETECUSTOMERADDRESS\" && module === \"ADDRESS\") {\n      this.handleDeleteAddress(id)\n    } else {\n      console.log(\"ERRPR\")\n    }\n  }\n  branchDelete = (id, token) => {\n    this.props\n      .deleteBranch(id, token)\n      .then(() => {\n        this.setState({\n          loading: false,\n        })\n        setInterval(function () {\n          window.location.reload()\n        }, 1000)\n      })\n      .catch(() => {\n        this.setState({\n          successFully: false,\n          loading: false,\n        })\n      })\n  }\n  handleDeleteBrand = (id, token) => {\n    this.props\n      .deleteBrand(id, token)\n      .then(() => {\n        let { data } = this.props.messageResponse\n        this.setState({\n          loading: false,\n        })\n        setInterval(function () {\n          window.location.reload()\n        }, 1000)\n      })\n      .catch(() => {\n        this.setState({\n          successFully: false,\n          loading: false,\n        })\n      })\n  }\n  handleAccountDelete = (id) => {\n    this.props\n      .deleteAccount(id)\n      .then(() => {\n        let { data } = this.props.messageResponse\n        this.setState({\n          loading: false,\n        })\n        setInterval(function () {\n          window.location.reload()\n        }, 1000)\n      })\n      .catch(() => {\n        this.setState({\n          successFully: false,\n          loading: false,\n        })\n      })\n  }\n  handleSupplierDelete = (id) => {\n    this.props\n      .deleteSupplier(id)\n      .then(() => {\n        this.setState({\n          loading: false,\n        })\n        setInterval(function () {\n          window.location.reload()\n        }, 1000)\n      })\n      .catch(() => {\n        this.setState({\n          successFully: false,\n          loading: false,\n        })\n      })\n  }\n  handleDeleteCategory = (id) => {\n    this.props\n      .deleteCategory(id)\n      .then(() => {\n        this.setState({\n          loading: false,\n        })\n        setInterval(function () {\n          window.location.reload()\n        }, 1000)\n      })\n      .catch(() => {\n        this.setState({\n          successFully: false,\n          loading: false,\n        })\n      })\n  }\n  handleDeleteProduct = (id) => {\n    this.props\n      .deleteProduct(id)\n      .then(() => {\n        this.setState({\n          loading: false,\n        })\n        setInterval(function () {\n          window.location.reload()\n        }, 1000)\n      })\n      .catch(() => {\n        this.setState({\n          successFully: false,\n          loading: false,\n        })\n      })\n  }\n  handleDeletePromo = (id) => {\n    this.props\n      .deletePromo(id)\n      .then(() => {\n        this.setState({\n          loading: false,\n        })\n        setInterval(function () {\n          window.location.reload()\n        }, 1000)\n      })\n      .catch(() => {\n        this.setState({\n          successFully: false,\n          loading: false,\n        })\n      })\n  }\n  handleDeleteMe = (id) => {\n    this.props\n      .deleteAccount(id)\n      .then(() => {\n        let { data } = this.props.messageResponse\n        this.setState({\n          loading: false,\n        })\n        setInterval(() => {\n          this.props.logout()\n        }, 1000)\n        this.props.setAlertModal(false, \"close\", \"\", \"\")\n      })\n      .catch(() => {\n        this.setState({\n          successFully: false,\n          loading: false,\n        })\n      })\n  }\n  handleDeleteAddress = (id) => {\n    this.props\n      .deleteAddress(id)\n      .then(() => {\n        this.setState({\n          loading: false,\n        })\n        this.props.setAlertModal(false, \"close\", \"\", \"\")\n      })\n      .catch(() => {\n        this.setState({\n          successFully: false,\n          loading: false,\n        })\n      })\n  }\n  render() {\n    let { visible, loading } = this.state\n    return (\n      <div>\n        <CModal\n          visible={visible}\n          onDismiss={() => this.props.setAlertModal(false)}\n        >\n          <CModalHeader onDismiss={() => this.props.setAlertModal(false)}>\n            <CModalTitle>Confirmation</CModalTitle>\n          </CModalHeader>\n          <CModalBody className=\"text-center\">\n            <h6>Are you sure you want to delete?</h6>\n          </CModalBody>\n          <CModalFooter>\n            <CButton\n              color=\"dark\"\n              variant=\"ghost\"\n              onClick={() => {\n                this.props.setAlertModal(false, \"close\", \"\", \"\")\n              }}\n            >\n              No\n            </CButton>\n            <CButton\n              type=\"submit\"\n              color=\"primary\"\n              disabled={loading}\n              onClick={() => this.handleOnDelete()}\n            >\n              {loading && <CSpinner size=\"sm\" className=\"ms-1\" />}\n              Yes\n            </CButton>\n          </CModalFooter>\n        </CModal>\n      </div>\n    )\n  }\n}\nconst mapStateToProps = (state) => {\n  return {\n    modalVisible: state.modalVisibleResponse,\n    messageResponse: state.messageResponse,\n    userResponse: state.userResponse,\n  }\n}\n\nexport default connect(mapStateToProps, {\n  setAlertModal,\n  deleteBranch,\n  clearMessage,\n  deleteBrand,\n  deleteAccount,\n  deleteSupplier,\n  deleteCategory,\n  deleteProduct,\n  deletePromo,\n  deleteAddress,\n  logout,\n})(withRouter(AlertModal))\n","import { DELETE_BRANCH, GET_BRANCH, GET_BRANCH_TOTAL_PRODUCT, SAVE_BRANCH, SAVE_BRAND, UPDATE_BRANCH, } from \"src/service/redux/constants\";\nimport { SET_MESSAGE } from \"src/constants/userConstants\";\nimport BranchApiService from \"src/service/restAPI/BranchApiService\";\n\n\nexport const getBranches = (token) => async (dispatch) => {\n    return BranchApiService.getBranches(token).then(\n        (response) => {\n            dispatch({\n                type: GET_BRANCH,\n                payload: {\n                    status: 200,\n                    action: \"GETBRANCH\",\n                    data: {\n                        branches: response.data\n                    }\n                }\n            })\n            return Promise.resolve();\n        },\n        (error) => {\n            const errorMessage =\n                (error.response &&\n                    error.response.data &&\n                    error.response.data.message) ||\n                error.message ||\n                error.toString();\n\n            const status = (error.response &&\n                error.response.data &&\n                error.response.data.code) ||\n                error.toString();\n            console.log(status)\n\n            dispatch({\n                type: SET_MESSAGE,\n                payload: {\n                    status: status,\n                    data: {\n                        message: errorMessage\n                    }\n                }\n            })\n            return Promise.reject();\n        }\n    )\n\n}\n\nexport const getBranchesWithTotalProduct = (token) => async (dispatch) => {\n    return BranchApiService.getBranchesWithTotaProduct(token).then(\n        (response) => {\n            dispatch({\n                type: GET_BRANCH_TOTAL_PRODUCT,\n                payload: {\n                    status: 200,\n                    action: \"GETBRANCHPRODUCT\",\n                    data: {\n                        branches: response.data\n                    }\n                }\n            })\n            return Promise.resolve();\n        },\n        (error) => {\n            const errorMessage =\n                (error.response &&\n                    error.response.data &&\n                    error.response.data.message) ||\n                error.message ||\n                error.toString();\n\n            const status = (error.response &&\n                error.response.data &&\n                error.response.data.code) ||\n                error.toString();\n\n            dispatch({\n                type: SET_MESSAGE,\n                payload: {\n                    status: status,\n                    data: {\n                        message: errorMessage\n                    }\n                }\n            })\n            return Promise.reject();\n        }\n    )\n}\n\nexport const saveBranch = (branch, token) => async (dispatch) => {\n    return BranchApiService.saveBranch(branch, token)\n        .then(\n            (response) => {\n                console.log(response);\n                dispatch({\n                    type: SAVE_BRANCH,\n                    payload: {\n                        status: 200,\n                        action: SAVE_BRANCH\n                    }\n                })\n                dispatch({\n                    type: SET_MESSAGE,\n                    payload: {\n                        status: 200,\n                        data: {\n                            message: \"Successfully Saved\"\n                        }\n                    }\n                })\n                return Promise.resolve();\n            },\n\n            (error) => {\n                console.log(error)\n                const message = (error.response &&\n                    error.response.data &&\n                    error.response.data.message) ||\n                    error.message || error.error_message ||\n                    error.toString();\n\n                const status = (error.response &&\n                    error.response.data &&\n                    error.response.data.code) ||\n                    error.toString();\n                console.log(status)\n\n                dispatch({\n                    type: SET_MESSAGE,\n                    payload: {\n                        status: status,\n                        data: {\n                            message: message\n                        }\n                    }\n                })\n                return Promise.reject();\n            }\n        )\n}\nexport const updateBranch = (id, branch, token) => async (dispatch) => {\n    return BranchApiService.updateBranch(id, branch, token)\n        .then((response) => {\n            console.log(response)\n            dispatch({\n                type: UPDATE_BRANCH,\n                payload: {\n                    status: 200,\n                    action: \"UPDATEBRANCH\",\n\n                }\n            })\n            dispatch({\n                type: SET_MESSAGE,\n                payload: {\n                    status: 200,\n                    data: {\n                        message: \"Successfully Updated\"\n                    }\n                }\n            })\n            return Promise.resolve();\n\n        },\n            (error) => {\n                console.log(error)\n                const message = (error.response &&\n                    error.response.data &&\n                    error.response.data.message) ||\n                    error.message || error.error_message ||\n                    error.toString();\n\n                const status = (error.response &&\n                    error.response.data &&\n                    error.response.data.code) ||\n                    error.toString();\n                console.log(status)\n\n                dispatch({\n                    type: SET_MESSAGE,\n                    payload: {\n                        status: status,\n                        data: {\n                            message: message\n                        }\n                    }\n                })\n                return Promise.reject();\n            }\n        )\n}\n\nexport const deleteBranch = (id, token) => async (dispatch) => {\n    return BranchApiService.deleteBranch(id, token)\n        .then((response) => {\n            console.log(response)\n            dispatch({\n                type: DELETE_BRANCH,\n                payload: {\n                    status: 200,\n                    action: \"DELETEBRANCH\",\n\n                }\n            })\n            dispatch({\n                type: SET_MESSAGE,\n                payload: {\n                    status: 200,\n                    data: {\n                        message: \"Successfully DELETED\"\n                    }\n                }\n            })\n            return Promise.resolve();\n\n        },\n            (error) => {\n                console.log(error)\n                const message = (error.response &&\n                    error.response.data &&\n                    error.response.data.message) ||\n                    error.message || error.error_message ||\n                    error.toString();\n\n                const status = (error.response &&\n                    error.response.data &&\n                    error.response.data.code) ||\n                    error.toString();\n                console.log(status)\n\n                dispatch({\n                    type: SET_MESSAGE,\n                    payload: {\n                        status: status,\n                        data: {\n                            message: message\n                        }\n                    }\n                })\n                return Promise.reject();\n            }\n        )\n}","import authHeader from \"../auth/authHeader\"\nimport axios from \"./RestApi\"\n\nexport class CategoriesApiService {\n  saveCategory(categoryName) {\n    let name = categoryName\n    return axios.post(\n      \"/categories/save\",\n      {\n        name,\n      },\n      {\n        headers: authHeader(),\n      },\n    )\n  }\n  updateCategory(id, name) {\n    return axios.put(\n      \"/categories/update/\" + id,\n      {\n        name,\n      },\n      {\n        headers: authHeader(),\n      },\n    )\n  }\n\n  deleteCategory(id) {\n    return axios.delete(\"/categories/delete/\" + id, {\n      headers: authHeader(),\n    })\n  }\n  getCategories(query, page, limit) {\n    return axios.get(\"/categories\", {\n      headers: authHeader(),\n      params: {\n        query,\n        page,\n        limit,\n      },\n    })\n  }\n  getCategory(id) {\n    return axios.get(\"/categories/id\", {\n      headers: authHeader(),\n    })\n  }\n  getCategoriesList() {\n    return axios.get(\"/categories/list\")\n  }\n}\nexport default new CategoriesApiService()\n","import { SET_MESSAGE } from \"src/constants/userConstants\"\nimport {\n  DELETE_CATEGORY,\n  GET_CATEGORIES,\n  GET_CATEGORIES_LIST,\n  GET_CATEGORY,\n  SAVE_CATEGORY,\n  UPDATE_CATEGORY,\n} from \"src/service/redux/constants\"\nimport CategoriesApiService from \"src/service/restAPI/CategoriesApiService\"\n\nexport const saveCategory = (categoryName) => async (dispatch) => {\n  return CategoriesApiService.saveCategory(categoryName).then(\n    (response) => {\n      dispatch({\n        type: SAVE_CATEGORY,\n        payload: {\n          status: 200,\n          action: SAVE_CATEGORY,\n          data: {},\n        },\n      })\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: 200,\n          data: {\n            message: \"Successfully Saved\",\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.error_message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: message,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\nexport const getCategories = (query, page, limit) => async (dispatch) => {\n  return CategoriesApiService.getCategories(query, page, limit).then(\n    (response) => {\n      dispatch({\n        type: GET_CATEGORIES,\n        payload: {\n          status: 200,\n          action: GET_CATEGORIES,\n          data: {\n            categories: response.data,\n          },\n        },\n      })\n\n      return Promise.resolve()\n    },\n\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.error_message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: message,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\nexport const getCategoriesList = () => async (dispatch) => {\n  return CategoriesApiService.getCategoriesList().then(\n    (response) => {\n      dispatch({\n        type: GET_CATEGORIES_LIST,\n        payload: {\n          status: 200,\n          action: GET_CATEGORIES_LIST,\n          data: {\n            categoriesList: response.data,\n          },\n        },\n      })\n\n      return Promise.resolve()\n    },\n\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.error_message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: message,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\nexport const getCategory = (id) => async (dispatch) => {\n  return CategoriesApiService.getCategory(id).then(\n    (response) => {\n      dispatch({\n        type: GET_CATEGORY,\n        payload: {\n          status: 200,\n          action: GET_CATEGORY,\n          data: {\n            category: response.data,\n          },\n        },\n      })\n\n      return Promise.resolve()\n    },\n\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.error_message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: message,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\nexport const updateCategory = (id, name) => async (dispatch) => {\n  return CategoriesApiService.updateCategory(id, name).then(\n    (response) => {\n      dispatch({\n        type: UPDATE_CATEGORY,\n        payload: {\n          status: 200,\n          action: UPDATE_CATEGORY,\n          data: {\n            updatedCategory: response.data,\n          },\n        },\n      })\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: 200,\n          data: {\n            message: \"Successfully Updated\",\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.error_message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: message,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\n\nexport const deleteCategory = (id) => async (dispatch) => {\n  return CategoriesApiService.deleteCategory(id).then(\n    (response) => {\n      dispatch({\n        type: DELETE_CATEGORY,\n        payload: {\n          status: 200,\n          action: DELETE_CATEGORY,\n          data: {},\n        },\n      })\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: 200,\n          data: {\n            message: \"Successfully Deleted.\",\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.error_message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: message,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\n","import authHeader from \"../auth/authHeader\"\nimport axios from \"./RestApi\"\n\nexport class SupplierApiService {\n  createSupplier(name, address, phoneNumber) {\n    console.log(address)\n    return axios.post(\n      \"/suppliers/create\",\n      {\n        name: name,\n        address: address,\n        phoneNumber: phoneNumber\n      },\n      {\n        headers: authHeader(),\n      },\n    )\n  }\n  updateSupplier(id, name, address, phoneNumber) {\n    return axios.put(\n      \"/suppliers/update/\" + id,\n      {\n        name,\n      },\n      {\n        headers: authHeader(),\n      },\n    )\n  }\n  deleteSupplier(id) {\n    return axios.delete(\"/suppliers/delete/\" + id, {\n      headers: authHeader(),\n    })\n  }\n  getSuppliers(query, page, limit) {\n    return axios.get(\"/suppliers\", {\n      headers: authHeader(),\n      params: {\n        query: query,\n        page: page,\n        limit: limit,\n      },\n    })\n  }\n  getSupplier(id) {\n    return axios.get(\"/suppliers/\" + id, {\n      headers: authHeader(),\n    })\n  }\n}\nexport default new SupplierApiService()\n","import { SET_MESSAGE } from \"src/constants/userConstants\"\nimport {\n  CREATE_SUPPLIER,\n  DELETE_SUPPLIER,\n  GET_SUPPLIER,\n  GET_SUPPLIERS,\n  UPDATE_SUPPLIER,\n} from \"src/service/redux/constants\"\nimport SupplierApiService from \"src/service/restAPI/SupplierApiService\"\n\nexport const createSupplier = (name, address, phoneNumber) => async (dispatch) => {\n  return SupplierApiService.createSupplier(name, address, phoneNumber).then(\n    (response) => {\n      dispatch({\n        type: CREATE_SUPPLIER,\n        payload: {\n          status: 200,\n          action: CREATE_SUPPLIER,\n          data: {},\n        },\n      })\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: 200,\n          data: {\n            message: \"Successfully Created.\",\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      const errorMessage =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: errorMessage,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\nexport const updateSupplier = (id, name, address, phoneNumber) => async (dispatch) => {\n  return SupplierApiService.updateSupplier(id, name, address, phoneNumber).then(\n    (response) => {\n      dispatch({\n        type: UPDATE_SUPPLIER,\n        payload: {\n          status: 200,\n          action: UPDATE_SUPPLIER,\n          data: {\n            supplier: response.data,\n          },\n        },\n      })\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: 200,\n          data: {\n            message: \"Successfully Updated.\",\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      const errorMessage =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: errorMessage,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\n// export const deleteSupplier = (id) => async (dispatch) => {\n//   return SupplierApiService.deleteSupplier(id).then(\n//     (response) => {\n//       dispatch({\n//         type: DELETE_SUPPLIER,\n//         payload: {\n//           status: 200,\n//           action: GET_SUPPLIERS,\n//           data: {},\n//         },\n//       })\n//       dispatch({\n//         type: SET_MESSAGE,\n//         payload: {\n//           status: 200,\n//           data: {\n//             message: \"Successfully Deleted.\",\n//           },\n//         },\n//       })\n//       return Promise.resolve()\n//     },\n//     (error) => {\n//       const errorMessage =\n//         (error.response &&\n//           error.response.data &&\n//           error.response.data.message) ||\n//         error.message ||\n//         error.toString()\n\n//       const status =\n//         (error.response && error.response.data && error.response.data.code) ||\n//         error.toString()\n\n//       dispatch({\n//         type: SET_MESSAGE,\n//         payload: {\n//           status: status,\n//           data: {\n//             message: errorMessage,\n//           },\n//         },\n//       })\n//       return Promise.reject()\n//     },\n//   )\n// }\nexport const deleteSupplier = (id) => async (dispatch) => {\n  return SupplierApiService.deleteSupplier(id).then(\n    (response) => {\n      console.log(response)\n      dispatch({\n        type: DELETE_SUPPLIER,\n        payload: {\n          status: 200,\n          action: \"DELETESUPPLIER\",\n        },\n      })\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: 200,\n          data: {\n            message: \"Successfully DELETED\",\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.error_message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: message,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\nexport const getSuppliers = (query, page, limit) => async (dispatch) => {\n  return SupplierApiService.getSuppliers(query, page, limit).then(\n    (response) => {\n      dispatch({\n        type: GET_SUPPLIERS,\n        payload: {\n          status: 200,\n          action: GET_SUPPLIERS,\n          data: {\n            suppliers: response.data,\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      const errorMessage =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: errorMessage,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\n\nexport const getSupplier = (id) => async (dispatch) => {\n  return SupplierApiService.getSupplier(id).then(\n    (response) => {\n      dispatch({\n        type: GET_SUPPLIER,\n        payload: {\n          status: 200,\n          action: GET_SUPPLIER,\n          data: {\n            supplier: response.data,\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      const errorMessage =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: errorMessage,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\n","import authHeader from \"../auth/authHeader\"\nimport axios from \"./RestApi\"\n\nexport class AddressApiService {\n  getAddresses() {\n    return axios.get(\"/addresses\", {\n      headers: authHeader(),\n    })\n  }\n  updateAddress(id, address) {\n    return axios.put(\n      \"/addresses/update/\" + id,\n      {\n        firstName: address.firstName,\n        lastName: address.lastName,\n        phoneNumber: address.phoneNumber,\n        region: address.region,\n        city: address.city,\n        province: address.province,\n        barangay: address.barangay,\n        street: address.street,\n        postalCode: address.postalCode,\n      },\n      {\n        headers: authHeader(),\n      },\n    )\n  }\n  saveAddress(address) {\n    return axios.post(\n      \"/addresses/save\",\n      {\n        firstName: address.firstName,\n        lastName: address.lastName,\n        phoneNumber: address.phoneNumber,\n        region: address.region,\n        city: address.city,\n        province: address.province,\n        barangay: address.barangay,\n        street: address.street,\n        postalCode: address.postalCode,\n      },\n      {\n        headers: authHeader(),\n      },\n    )\n  }\n  deleteAddress(id) {\n    return axios.delete(\"/addresses/delete/\" + id, {\n      headers: authHeader(),\n    })\n  }\n}\n\nexport default new AddressApiService()\n","import { SET_MESSAGE } from \"src/constants/userConstants\"\nimport {\n  DELETE_CUSTOMER_ADDRESS,\n  GET_ADDRESSES,\n  SAVE_ADDRESS,\n  UPDATE_ADDRESS,\n} from \"src/service/redux/constants\"\nimport AddressApiService from \"src/service/restAPI/AddressApiService\"\n\nexport const getAdress = () => async (dispatch) => {\n  return AddressApiService.getAddresses().then(\n    (response) => {\n      dispatch({\n        type: GET_ADDRESSES,\n        payload: {\n          status: 200,\n          action: \"GET_ADDRESSES\",\n          data: {\n            addresses: response.data,\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      const errorMessage =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: errorMessage,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\n\nexport const saveAddress = (address) => async (dispatch) => {\n  console.log(address)\n  return AddressApiService.saveAddress(address).then(\n    (response) => {\n      dispatch({\n        type: SAVE_ADDRESS,\n        payload: {\n          status: 200,\n          action: \"SAVE_ADDRESS\",\n          data: {},\n        },\n      })\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: 200,\n          data: {\n            message: \"Address Successfully Saved\",\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      const errorMessage =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: errorMessage,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\nexport const updateAddress = (id, address) => async (dispatch) => {\n  return AddressApiService.updateAddress(id, address).then(\n    (response) => {\n      dispatch({\n        type: UPDATE_ADDRESS,\n        payload: {\n          status: 200,\n          action: UPDATE_ADDRESS,\n          data: {},\n        },\n      })\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: 200,\n          data: {\n            message: \"Successfully Updated.\",\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      const errorMessage =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: errorMessage,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\nexport const deleteAddress = (id) => async (dispatch) => {\n  return AddressApiService.deleteAddress(id).then(\n    (response) => {\n      dispatch({\n        type: DELETE_CUSTOMER_ADDRESS,\n        payload: {\n          status: 200,\n          action: DELETE_CUSTOMER_ADDRESS,\n          data: {},\n        },\n      })\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: 200,\n          data: {\n            message: \"Successfully Deleted.\",\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      const errorMessage =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: errorMessage,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}","import axios from \"./RestApi\"\nimport authHeader from \"../auth/authHeader\"\nexport class BrandApiService {\n  getBrands(query, page, limit) {\n    return axios.get(\"/brands\", {\n      headers: authHeader(),\n      params: {\n        query: query,\n        page: page,\n        limit: limit,\n      },\n    })\n  }\n  getBrand(id, token) {\n    return axios.get(\"/brands\" + id, {\n      headers: { Authorization: token },\n    })\n  }\n  saveBrand(brand, token) {\n    return axios.post(\n      \"/brands/save\",\n      {\n        brand,\n      },\n      {\n        headers: { Authorization: token },\n      },\n    )\n  }\n  updateBrand(id, brand, token) {\n    return axios.put(\n      \"/brands/update/\" + id,\n      {\n        brand,\n      },\n      {\n        headers: { Authorization: token },\n      },\n    )\n  }\n  deleteBrand(id, token) {\n    return axios.delete(\"/brands/delete/\" + id, {\n      headers: { Authorization: token },\n    })\n  }\n  getBrandsList() {\n    return axios.get(\"/brands/list\", {\n      headers: authHeader()\n    })\n  }\n}\nexport default new BrandApiService()\n","import { SET_MESSAGE } from \"src/constants/userConstants\"\nimport {\n  DELETE_BRAND,\n  FAIL_BRAND,\n  GET_BRANDS,\n  GET_BRANDS_LIST,\n  SAVE_BRAND,\n  UPDATE_BRAND,\n} from \"src/service/redux/constants\"\nimport BrandApiService from \"src/service/restAPI/BrandApiService\"\n\nexport const getBrands = (query, page, limit) => async (dispatch) => {\n  return BrandApiService.getBrands(query, page, limit).then(\n    (response) => {\n      dispatch({\n        type: GET_BRANDS,\n        payload: {\n          status: 200,\n          action: \"GETBRANDS\",\n          data: {\n            brands: response.data,\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      const errorMessage =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: errorMessage,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\nexport const getBrandsList = () => async (dispatch) => {\n  return BrandApiService.getBrandsList().then(\n    (response) => {\n      dispatch({\n        type: GET_BRANDS_LIST,\n        payload: {\n          status: 200,\n          action: GET_BRANDS_LIST,\n          data: {\n            brands: response.data,\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      const errorMessage =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: errorMessage,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\nexport const savingBrand = (brand, token) => async (dispatch) => {\n  return BrandApiService.saveBrand(brand, token).then(\n    (response) => {\n      dispatch({\n        type: SAVE_BRAND,\n        payload: {\n          status: 200,\n          action: SAVE_BRAND,\n        },\n      })\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: 200,\n          data: {\n            message: \"Successfully Saved\",\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n\n    (error) => {\n      console.log(error)\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.error_message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.toString()\n      console.log(status)\n      dispatch({\n        type: FAIL_BRAND,\n      })\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: message,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\n\nexport const updateBrand = (id, branch, token) => async (dispatch) => {\n  return BrandApiService.updateBrand(id, branch, token).then(\n    (response) => {\n      dispatch({\n        type: UPDATE_BRAND,\n        payload: {\n          status: 200,\n          action: \"UPDATEBRAND\",\n        },\n      })\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: 200,\n          data: {\n            message: \"Successfully Updated\",\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.error_message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: message,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\n\nexport const deleteBrand = (id, token) => async (dispatch) => {\n  return BrandApiService.deleteBrand(id, token).then(\n    (response) => {\n      dispatch({\n        type: DELETE_BRAND,\n        payload: {\n          status: 200,\n          action: \"DELETEBRAND\",\n        },\n      })\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: 200,\n          data: {\n            message: \"Successfully DELETED\",\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.error_message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: message,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\n","import authHeader from \"../auth/authHeader\"\nimport axios from \"./RestApi\"\n\nexport class PromoApiService {\n  getPromos() {\n    return axios.get(\"/promos\", {\n      headers: authHeader(),\n    })\n  }\n  savePromo(quantity, percentage, productId, startDate, endDate) {\n    return axios.post(\n      \"/promos/save\",\n      {\n        productId,\n        quantity,\n        percentage,\n        startDate,\n        endDate,\n      },\n      {\n        headers: authHeader(),\n      },\n    )\n  }\n  updatePromo(id, quantity, percentage, productId, startDate, endDate) {\n    return axios.put(\n      \"/promos/update/\" + id,\n      {\n        productId,\n        quantity,\n        percentage,\n        startDate,\n        endDate,\n      },\n      {\n        headers: authHeader(),\n      },\n    )\n  }\n  deletePromo(id) {\n    return axios.delete(\"/promos/delete/\" + id, {\n      headers: authHeader(),\n    })\n  }\n}\nexport default new PromoApiService()\n","import { SET_MESSAGE } from \"src/constants/userConstants\"\nimport {\n  DELETE_PROMO,\n  GET_PROMOS,\n  SAVE_PROMO,\n  UPDATE_PROMO,\n} from \"src/service/redux/constants\"\nimport PromoApiService from \"src/service/restAPI/PromoApiService\"\n\nexport const getPromos = () => async (dispatch) => {\n  return PromoApiService.getPromos().then(\n    (response) => {\n      dispatch({\n        type: GET_PROMOS,\n        payload: {\n          status: 200,\n          action: GET_PROMOS,\n          data: {\n            productsWithPromo: response.data,\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.error_message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.status ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: message,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\nexport const savePromo =\n  (quantity, percentage, productId, startDate, endDate) => async (dispatch) => {\n    return PromoApiService.savePromo(\n      quantity,\n      percentage,\n      productId,\n      startDate,\n      endDate,\n    ).then(\n      (response) => {\n        dispatch({\n          type: SAVE_PROMO,\n          payload: {\n            status: 200,\n            action: SAVE_PROMO,\n            data: {},\n          },\n        })\n        dispatch({\n          type: SET_MESSAGE,\n          payload: {\n            status: 200,\n            data: {\n              message: \"Successfully Saved\",\n            },\n          },\n        })\n        return Promise.resolve()\n      },\n      (error) => {\n        const message =\n          (error.response &&\n            error.response.data &&\n            error.response.data.message) ||\n          error.message ||\n          error.error_message ||\n          error.toString()\n\n        const status =\n          (error.response && error.response.data && error.response.data.code) ||\n          error.status ||\n          error.toString()\n\n        dispatch({\n          type: SET_MESSAGE,\n          payload: {\n            status: status,\n            data: {\n              message: message,\n            },\n          },\n        })\n        return Promise.reject()\n      },\n    )\n  }\nexport const deletePromo = (id) => async (dispatch) => {\n  return PromoApiService.deletePromo(id).then(\n    (response) => {\n      dispatch({\n        type: DELETE_PROMO,\n        payload: {\n          action: DELETE_PROMO,\n          status: 200,\n          data: {},\n        },\n      })\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: 200,\n          data: {\n            message: \"Successfully DELETED\",\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.error_message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.status ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: message,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\nexport const updatePromo =\n  (id, quantity, percentage, productId, startDate, endDate) =>\n  async (dispatch) => {\n    return PromoApiService.updatePromo(\n      id,\n      quantity,\n      percentage,\n      productId,\n      startDate,\n      endDate,\n    ).then(\n      (response) => {\n          dispatch({\n            type: UPDATE_PROMO,\n            payload: {\n              action: UPDATE_PROMO,\n              status: 200,\n              data: {\n                updatedPromo: response.data\n              },\n            },\n          })\n          dispatch({\n            type: SET_MESSAGE,\n            payload: {\n              status: 200,\n              data: {\n                message: \"Successfully Updated\",\n              },\n            },\n          })\n        return Promise.resolve()\n      },\n      (error) => {\n         const message =\n           (error.response &&\n             error.response.data &&\n             error.response.data.message) ||\n           error.message ||\n           error.error_message ||\n           error.toString()\n\n         const status =\n           (error.response &&\n             error.response.data &&\n             error.response.data.code) ||\n           error.status ||\n           error.toString()\n\n         dispatch({\n           type: SET_MESSAGE,\n           payload: {\n             status: status,\n             data: {\n               message: message,\n             },\n           },\n         })\n        return Promise.reject()\n      },\n    )\n  }\n"],"sourceRoot":""}