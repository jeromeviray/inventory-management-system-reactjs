{"version":3,"sources":["components/carousel/HeroCarousel.js","service/apiActions/carouselAction/carouselAction.js","service/restAPI/CarouselApiService.js"],"names":["HeroCarousel","Component","state","carouselImages","componentDidUpdate","prevProps","prevState","this","getResponseCarouselImages","carouselResponser","props","response","action","status","setState","carouselData","console","log","componentDidMount","getCarouselImages","render","arrowStyles","position","zIndex","top","height","cursor","border","showArrows","autoPlay","showThumbs","infiniteLoop","dynamicHeight","renderArrowPrev","onClickHandler","hasPrev","label","type","onClick","title","className","style","left","size","color","renderArrowNext","hasNext","right","length","map","image","index","config","api","private","baseUrl","imageName","src","alt","NO_IMAGE_BASE64","connect","async","CarouselApiService","then","dispatch","GET_CAROUSEL_IMAGES","payload","data","Promise","resolve","error","message","error_message","toString","code","SET_MESSAGE","reject","saveCarouselImages","formData","SAVE_CAROUSEL_IMAGES","updateCarouselImages","UPDATE_CAROUSEL_IMAGES","axios","get","headers","authHeader","post","put","getImages","fileName","responseType"],"mappings":"sKAAA,wHAQO,MAAMA,UAAqBC,YAAW,eAAD,oBAC1CC,MAAQ,CACNC,eAAgB,IAFwB,KAO1CC,mBAAqB,CAACC,EAAWC,KAC/BC,KAAKC,0BAA0BH,EAAWC,IARF,KAU1CE,0BAA4B,CAACH,EAAWC,KACtC,GAAID,EAAUI,oBAAsBF,KAAKG,MAAMD,kBAAmB,CAChE,IAAIE,EAAWJ,KAAKG,MAAMD,kBACF,aAApBE,EAASC,SACPD,EAASE,QAAU,KAAOF,EAASE,QAAU,IAC/CN,KAAKO,SAAS,CACZX,eAAgBQ,EAASI,eAElBJ,EAASE,OAAS,KAC3BG,QAAQC,IAAI,YAfpBC,oBACEX,KAAKG,MAAMS,oBAmBbC,SACE,IAAI,eAAEjB,GAAmBI,KAAKL,MAC9B,MAAMmB,EAAc,CAClBC,SAAU,WACVC,OAAQ,IACRC,IAAK,kBAELC,OAAQ,OACRC,OAAQ,UACRC,OAAQ,QAEV,OACE,mCACE,cAAC,WAAD,CACEC,YAAY,EACZC,UAAU,EACVC,YAAY,EACZC,cAAc,EACdC,eAAe,EACfC,gBAAiB,CAACC,EAAgBC,EAASC,IACzCD,GACE,wBACEE,KAAK,SACLC,QAASJ,EACTK,MAAOH,EACPI,UAAU,cACVC,MAAO,IAAKpB,EAAaqB,KAAM,GALjC,SAOE,cAAC,IAAD,CAAwBC,KAAK,KAAKF,MAAO,CAAEG,MAAO,aAIxDC,gBAAiB,CAACX,EAAgBY,EAASV,IACzCU,GACE,wBACET,KAAK,SACLC,QAASJ,EACTK,MAAOH,EACPI,UAAU,cACVC,MAAO,IAAKpB,EAAa0B,MAAO,GALlC,SAOE,cAAC,IAAD,CACEJ,KAAK,KACLF,MAAO,CAAEG,MAAO,aA9B1B,SAoCGzC,EAAe6C,OAAS,EACvB7C,EAAe8C,KAAI,CAACC,EAAOC,KACzBnC,QAAQC,IACNmC,IAAOC,IAAIC,QAAQC,QACjB,0CACAL,EAAMM,WAGR,8BACE,qBACEhB,UAAU,WACVf,OAAO,MACPgC,IACEL,IAAOC,IAAIC,QAAQC,QACnB,0CACAL,EAAMM,UAERE,IAAKR,EAAMM,aATLL,MAed,qBACEX,UAAU,WACVf,OAAO,MACPgC,IAAKE,kBACLD,IAAI,qBAaHE,uBALU1D,IAChB,CACLO,kBAAmBP,EAAMO,qBAGW,CAAEU,uBAA3ByC,CAAgD5D,I,iCCzH/D,kIAUO,MAAMmB,EAAoB,IAAM0C,SAC9BC,IAAmB3C,oBAAoB4C,MAC3CpD,IACCqD,EAAS,CACP3B,KAAM4B,sBACNC,QAAS,CACPrD,OAAQ,IACRsD,KAAM,CACJhE,eAAgBQ,EAASwD,SAIxBC,QAAQC,aAEhBC,IACC,MAAMC,EACHD,EAAM3D,UACL2D,EAAM3D,SAASwD,MACfG,EAAM3D,SAASwD,KAAKI,SACtBD,EAAMC,SACND,EAAME,eACNF,EAAMG,WAEF5D,EACHyD,EAAM3D,UAAY2D,EAAM3D,SAASwD,MAAQG,EAAM3D,SAASwD,KAAKO,MAC9DJ,EAAMG,WAWR,OATAT,EAAS,CACP3B,KAAMsC,IACNT,QAAS,CACPrD,OAAQA,EACRsD,KAAM,CACJI,QAASA,MAIRH,QAAQQ,YAKRC,EAAsBC,GAAajB,SACvCC,IAAmBe,mBAAmBC,GAAUf,MACpDpD,IACCqD,EAAS,CACP3B,KAAM0C,uBACNb,QAAS,CACPrD,OAAQ,IACRD,OAAQmE,uBACRZ,KAAM,MAGVH,EAAS,CACP3B,KAAMsC,IACNT,QAAS,CACPrD,OAAQ,IACRsD,KAAM,CACJI,QAAS,0BAIRH,QAAQC,aAEhBC,IACC,MAAMC,EACHD,EAAM3D,UACL2D,EAAM3D,SAASwD,MACfG,EAAM3D,SAASwD,KAAKI,SACtBD,EAAMC,SACND,EAAME,eACNF,EAAMG,WAEF5D,EACHyD,EAAM3D,UAAY2D,EAAM3D,SAASwD,MAAQG,EAAM3D,SAASwD,KAAKO,MAC9DJ,EAAMG,WAWR,OATAT,EAAS,CACP3B,KAAMsC,IACNT,QAAS,CACPrD,OAAQA,EACRsD,KAAM,CACJI,QAASA,MAIRH,QAAQQ,YAIRI,EAAwBF,GAAajB,SACzCC,IAAmBkB,qBAAqBF,GAAUf,MACtDpD,IACCqD,EAAS,CACP3B,KAAM4C,yBACNf,QAAS,CACPrD,OAAQ,IACRD,OAAQqE,yBACRd,KAAM,MAGVH,EAAS,CACP3B,KAAMsC,IACNT,QAAS,CACPrD,OAAQ,IACRsD,KAAM,CACJI,QAAS,4BAIRH,QAAQC,aAEhBC,IACC,MAAMC,EACHD,EAAM3D,UACL2D,EAAM3D,SAASwD,MACfG,EAAM3D,SAASwD,KAAKI,SACtBD,EAAMC,SACND,EAAME,eACNF,EAAMG,WAEF5D,EACHyD,EAAM3D,UAAY2D,EAAM3D,SAASwD,MAAQG,EAAM3D,SAASwD,KAAKO,MAC9DJ,EAAMG,WAWR,OATAT,EAAS,CACP3B,KAAMsC,IACNT,QAAS,CACPrD,OAAQA,EACRsD,KAAM,CACJI,QAASA,MAIRH,QAAQQ,a,iCC/IrB,qBA0Be,QAvBR,MACLzD,oBACE,OAAO+D,IAAMC,IAAI,YAAa,CAC5BC,QAASC,gBAGbR,mBAAmBC,GACjB,OAAOI,IAAMI,KAAK,iBAAkBR,EAAU,CAC5CM,QAASC,gBAGbL,qBAAqBF,GACnB,OAAOI,IAAMK,IAAI,mBAAoBT,EAAU,CAC7CM,QAASC,gBAGbG,UAAUC,GACR,OAAOP,IAAMC,IAAI,mCAAqCM,EAAU,CAC9DL,QAASC,cACTK,aAAc","file":"static/js/47.b1076eed.chunk.js","sourcesContent":["import React, { Component } from \"react\"\nimport { getCarouselImages } from \"../../service/apiActions/carouselAction/carouselAction\"\nimport { connect } from \"react-redux\"\nimport { Carousel } from \"react-responsive-carousel\"\nimport * as IoIcons from \"react-icons/io\"\nimport { NO_IMAGE_BASE64 } from \"src/service/redux/constants\"\nimport config from \"src/config\"\n\nexport class HeroCarousel extends Component {\n  state = {\n    carouselImages: [],\n  }\n  componentDidMount() {\n    this.props.getCarouselImages()\n  }\n  componentDidUpdate = (prevProps, prevState) => {\n    this.getResponseCarouselImages(prevProps, prevState)\n  }\n  getResponseCarouselImages = (prevProps, prevState) => {\n    if (prevProps.carouselResponser !== this.props.carouselResponser) {\n      let response = this.props.carouselResponser\n      if (response.action === \"RETRIEVE\") {\n        if (response.status >= 200 && response.status <= 300) {\n          this.setState({\n            carouselImages: response.carouselData,\n          })\n        } else if (response.status < 400) {\n          console.log(\"ERROR\")\n        }\n      }\n    }\n  }\n  render() {\n    let { carouselImages } = this.state\n    const arrowStyles = {\n      position: \"absolute\",\n      zIndex: \"2\",\n      top: \"calc(4% - 16px)\",\n      // width: \"30\",\n      height: \"100%\",\n      cursor: \"pointer\",\n      border: \"none\",\n    }\n    return (\n      <>\n        <Carousel\n          showArrows={true}\n          autoPlay={true}\n          showThumbs={false}\n          infiniteLoop={true}\n          dynamicHeight={false}\n          renderArrowPrev={(onClickHandler, hasPrev, label) =>\n            hasPrev && (\n              <button\n                type=\"button\"\n                onClick={onClickHandler}\n                title={label}\n                className=\"arrow-style\"\n                style={{ ...arrowStyles, left: 0 }}\n              >\n                <IoIcons.IoIosArrowBack size=\"40\" style={{ color: \"white\" }} />\n              </button>\n            )\n          }\n          renderArrowNext={(onClickHandler, hasNext, label) =>\n            hasNext && (\n              <button\n                type=\"button\"\n                onClick={onClickHandler}\n                title={label}\n                className=\"arrow-style\"\n                style={{ ...arrowStyles, right: 0 }}\n              >\n                <IoIcons.IoIosArrowForward\n                  size=\"40\"\n                  style={{ color: \"white\" }}\n                />\n              </button>\n            )\n          }\n        >\n          {carouselImages.length > 0 ? (\n            carouselImages.map((image, index) => {\n              console.log(\n                config.api.private.baseUrl +\n                  \"/api/v1/carousel/getImages/bytesArrays/\" +\n                  image.imageName,\n              )\n              return (\n                <div key={index}>\n                  <img\n                    className=\"d-block \"\n                    height=\"400\"\n                    src={\n                      config.api.private.baseUrl +\n                      \"/api/v1/carousel/getImages/bytesArrays/\" +\n                      image.imageName\n                    }\n                    alt={image.imageName}\n                  />\n                </div>\n              )\n            })\n          ) : (\n            <img\n              className=\"d-block \"\n              height=\"400\"\n              src={NO_IMAGE_BASE64}\n              alt=\"unavailable\"\n            />\n          )}\n        </Carousel>\n      </>\n    )\n  }\n}\nconst mapStatetoProps = (state) => {\n  return {\n    carouselResponser: state.carouselResponser,\n  }\n}\nexport default connect(mapStatetoProps, { getCarouselImages })(HeroCarousel)\n","// import { GET_CAROUSEL_IMAGES, CAROUSEL_FOLDER_DIRECTORY } from \"../../../redux/constants\";\nimport { SET_MESSAGE } from \"src/constants/userConstants\"\nimport {\n  GET_CAROUSEL_IMAGES,\n  CAROUSEL_FOLDER_DIRECTORY,\n  SAVE_CAROUSEL_IMAGES,\n  UPDATE_CAROUSEL_IMAGES,\n} from \"src/service/redux/constants\"\nimport CarouselApiService from \"src/service/restAPI/CarouselApiService\"\n\nexport const getCarouselImages = () => async (dispatch) => {\n  return CarouselApiService.getCarouselImages().then(\n    (response) => {\n      dispatch({\n        type: GET_CAROUSEL_IMAGES,\n        payload: {\n          status: 200,\n          data: {\n            carouselImages: response.data,\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.error_message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: message,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\n\nexport const saveCarouselImages = (formData) => async (dispatch) => {\n  return CarouselApiService.saveCarouselImages(formData).then(\n    (response) => {\n      dispatch({\n        type: SAVE_CAROUSEL_IMAGES,\n        payload: {\n          status: 200,\n          action: SAVE_CAROUSEL_IMAGES,\n          data: {},\n        },\n      })\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: 200,\n          data: {\n            message: \"Successfully saved.\",\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.error_message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: message,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\nexport const updateCarouselImages = (formData) => async (dispatch) => {\n  return CarouselApiService.updateCarouselImages(formData).then(\n    (response) => {\n      dispatch({\n        type: UPDATE_CAROUSEL_IMAGES,\n        payload: {\n          status: 200,\n          action: UPDATE_CAROUSEL_IMAGES,\n          data: {},\n        },\n      })\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: 200,\n          data: {\n            message: \"Successfully updated.\",\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.error_message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: message,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\n","import axios from \"./RestApi\"\nimport authHeader from \"../auth/authHeader\"\n\nexport class CarouselApiService {\n  getCarouselImages() {\n    return axios.get(\"/carousel\", {\n      headers: authHeader(),\n    })\n  }\n  saveCarouselImages(formData) {\n    return axios.post(\"/carousel/save\", formData, {\n      headers: authHeader(),\n    })\n  }\n  updateCarouselImages(formData) {\n    return axios.put(\"/carousel/update\", formData, {\n      headers: authHeader(),\n    })\n  }\n  getImages(fileName) {\n    return axios.get(\"/carousel/getImages/bytesArrays/\" + fileName, {\n      headers: authHeader(),\n      responseType: \"blob\",\n    })\n  }\n}\nexport default new CarouselApiService()\n"],"sourceRoot":""}