{"version":3,"sources":["service/apiActions/modalAction/modalAction.js","service/restAPI/AddressApiService.js","service/apiActions/addressAction/addressAction.js","views/common/address/CustomerAddressController.js","components/modals/address/AddressModal.js","../node_modules/select-philippines-address/index.js"],"names":["setProductModal","visible","action","icon","async","dispatch","type","SET_PRODUCTEDITMODAL_VISIBILIT","payload","status","data","setProductDetailsModal","product","SET_PRODUCT_DETAILS_MODAL","editProductModal","updateProduct","EDIT_PRODUCT_MODAL","setAlertModal","alert","module","id","ALERT_MODAL","setAlertBanModal","ALERT_BAN_MODAL","setStoreModal","storeInfo","UDPATE_STORE_INFORMATION","addBrandModal","branch","ADD_BRAND_MODAL","brand","addCategoryModal","category","ADD_CATEGORY_MODAL","addAccountModal","employee","ADD_EMPLOYEE_MODAL","changePasswordModal","CHANGE_PASSWORD_MODAL","setLoginModal","LOGIN_MODAL","setAddressModal","address","SET_ADDRESS_MODAL","setSupplierModal","supplier","SET_SUPPLIER_MODAL","setSupplyModal","supply","SET_SUPPLY_MODAL","setScanModal","SET_SCAN_MODAL","setPromoModal","promo","SET_PROMO_MODAL","setTermAndConditionModal","termsAndCondition","SET_TERMS_AND_CONDITION_MODAL","setCarouselModal","carousel","SET_CAROULSE_MDOAL","getAddresses","axios","get","headers","authHeader","updateAddress","update","saveAddress","post","firstName","lastName","phoneNumber","region","city","province","barangay","street","postalCode","getAdress","AddressApiService","then","response","GET_ADDRESSES","addresses","Promise","resolve","error","errorMessage","message","toString","code","SET_MESSAGE","reject","console","log","SAVE_ADDRESS","CustomerAddressController","Component","state","addressId","isCart","retreiveAddressResponse","this","props","manageAddressResponse","prevProps","prevState","addressResponse","setState","manageModalVisible","modalVisible","componentDidMount","userResponse","isLoggedIn","history","push","config","api","private","prefixFrontendUrl","componentDidUpdate","render","shape","color","variant","className","onClick","size","style","marginLeft","map","index","checked","getValue","md","fontStyle","role","connect","messageResponse","modalVisibleResponse","clearMessage","withRouter","AddressModal","addressStates","loading","regionsData","provincesData","citiesData","baranggaysData","baranggayId","cityId","provinceId","regionId","handleOnChange","event","target","name","value","handleOnSubmit","currentTarget","checkValidity","preventDefault","stopPropagation","handleSaveAddress","onResetValue","catch","onRegionChanged","provinces","dt","province_name","province_code","onProvinceChanged","cities","city_name","city_code","onCityChanged","barangays","brgy_name","brgy_code","onBaranggayChanged","regions","region_name","region_code","prevPros","onDismiss","onSubmit","placeholder","onChange","required","htmlFor","pattern","disabled","form","require","exports","psgc_code","e","filter","filtered","region_desc"],"mappings":"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","file":"static/js/35.eacf1ed4.chunk.js","sourcesContent":["import {\n  ADD_BRANCH_MODAL,\n  ALERT_MODAL,\n  EDIT_PRODUCT_MODAL,\n  SET_PRODUCTEDITMODAL_VISIBILIT,\n  ADD_BRAND_MODAL,\n  ADD_CATEGORY_MODAL,\n  ADD_EMPLOYEE_MODAL,\n  SET_PRODUCT_DETAILS_MODAL,\n  LOGIN_MODAL,\n  SET_ADDRESS_MODAL,\n  SET_SUPPLIER_MODAL,\n  SET_SUPPLY_MODAL,\n  SET_SCAN_MODAL,\n  SET_PROMO_MODAL,\n  ALERT_BAN_MODAL,\n  CHANGE_PASSWORD_MODAL,\n  UDPATE_STORE_INFORMATION,\n  SET_TERMS_AND_CONDITION_MODAL,\n  SET_CAROULSE_MDOAL,\n} from \"src/service/redux/constants\"\n\nexport const setProductModal = (visible, action, icon) => async (dispatch) => {\n  dispatch({\n    type: SET_PRODUCTEDITMODAL_VISIBILIT,\n    payload: {\n      status: 200,\n      data: {\n        visible: visible,\n        action: action,\n        icon: icon,\n      },\n    },\n  })\n}\nexport const setProductDetailsModal =\n  (visible, action, product) => async (dispatch) => {\n    dispatch({\n      type: SET_PRODUCT_DETAILS_MODAL,\n      payload: {\n        status: 200,\n        data: {\n          visible: visible,\n          action: action,\n          product: product,\n        },\n      },\n    })\n  }\nexport const editProductModal =\n  (visible, action, updateProduct, icon) => async (dispatch) => {\n    dispatch({\n      type: EDIT_PRODUCT_MODAL,\n      payload: {\n        status: 200,\n        data: {\n          visible: visible,\n          action: action,\n          product: updateProduct,\n          icon: icon,\n        },\n      },\n    })\n  }\nexport const setAlertModal =\n  (alert, action, module, id) => async (dispatch) => {\n    dispatch({\n      type: ALERT_MODAL,\n      payload: {\n        action: action,\n        module: module,\n        alert: alert,\n        data: {\n          id: id,\n        },\n      },\n    })\n  }\nexport const setAlertBanModal =\n  (alert, action, module, id) => async (dispatch) => {\n    dispatch({\n      type: ALERT_BAN_MODAL,\n      payload: {\n        action: action,\n        module: module,\n        alert: alert,\n        data: {\n          id: id,\n        },\n      },\n    })\n  }\nexport const setStoreModal =\n  (visible, action, storeInfo, icon) => async (dispatch) => {\n    dispatch({\n      type: UDPATE_STORE_INFORMATION,\n      payload: {\n        status: 200,\n        data: {\n          visible: visible,\n          action: action,\n          storeInfo: storeInfo,\n          icon: icon,\n        },\n      },\n    })\n  }\n\nexport const addBrandModal =\n  (visible, action, branch, icon) => async (dispatch) => {\n    dispatch({\n      type: ADD_BRAND_MODAL,\n      payload: {\n        status: 200,\n        data: {\n          visible: visible,\n          action: action,\n          brand: branch,\n          icon: icon,\n        },\n      },\n    })\n  }\n\nexport const addCategoryModal =\n  (visible, action, category, icon) => async (dispatch) => {\n    dispatch({\n      type: ADD_CATEGORY_MODAL,\n      payload: {\n        status: 200,\n        data: {\n          visible: visible,\n          action: action,\n          category: category,\n          icon: icon,\n        },\n      },\n    })\n  }\n\nexport const addAccountModal =\n  (visible, action, employee, icon) => async (dispatch) => {\n    dispatch({\n      type: ADD_EMPLOYEE_MODAL,\n      payload: {\n        status: 200,\n        data: {\n          visible: visible,\n          action: action,\n          employee: employee,\n          icon: icon,\n        },\n      },\n    })\n  }\nexport const changePasswordModal =\n  (visible, action, employee, icon) => async (dispatch) => {\n    dispatch({\n      type: CHANGE_PASSWORD_MODAL,\n      payload: {\n        status: 200,\n        data: {\n          visible: visible,\n          action: action,\n          employee: employee,\n          icon: icon,\n        },\n      },\n    })\n  }\nexport const setLoginModal = (visible, action) => async (dispatch) => {\n  dispatch({\n    type: LOGIN_MODAL,\n    payload: {\n      data: {\n        visible: visible,\n        action: action,\n      },\n    },\n  })\n}\n\nexport const setAddressModal =\n  (visible, action, address, icon) => async (dispatch) => {\n    dispatch({\n      type: SET_ADDRESS_MODAL,\n      payload: {\n        data: {\n          visible: visible,\n          action: action,\n          address: address,\n          icon: icon,\n        },\n      },\n    })\n  }\n\nexport const setSupplierModal =\n  (visible, action, supplier, icon) => async (dispatch) => {\n    dispatch({\n      type: SET_SUPPLIER_MODAL,\n      payload: {\n        action: action,\n        data: {\n          visible: visible,\n          icon: icon,\n          supplier: supplier,\n        },\n      },\n    })\n  }\nexport const setSupplyModal =\n  (visible, action, supply, icon) => async (dispatch) => {\n    dispatch({\n      type: SET_SUPPLY_MODAL,\n      payload: {\n        action: action,\n        data: {\n          visible: visible,\n          icon: icon,\n          supply: supply,\n        },\n      },\n    })\n  }\n\nexport const setScanModal = (visible, action) => async (dispatch) => {\n  dispatch({\n    type: SET_SCAN_MODAL,\n    payload: {\n      action: action,\n      data: {\n        visible: visible,\n      },\n    },\n  })\n}\nexport const setPromoModal =\n  (visible, action, promo, icon) => async (dispatch) => {\n    dispatch({\n      type: SET_PROMO_MODAL,\n      payload: {\n        action: action,\n        data: {\n          visible: visible,\n          icon: icon,\n          promo: promo,\n        },\n      },\n    })\n  }\nexport const setTermAndConditionModal =\n  (visible, action, termsAndCondition, icon) => async (dispatch) => {\n    dispatch({\n      type: SET_TERMS_AND_CONDITION_MODAL,\n      payload: {\n        status: 200,\n        data: {\n          visible: visible,\n          action: action,\n          termsAndCondition: termsAndCondition,\n          icon: icon,\n        },\n      },\n    })\n  }\n  export const setCarouselModal =\n    (visible, action, carousel, icon) => async (dispatch) => {\n      dispatch({\n        type: SET_CAROULSE_MDOAL,\n        payload: {\n          status: 200,\n          data: {\n            visible: visible,\n            action: action,\n            carousel: carousel,\n            icon: icon,\n          },\n        },\n      })\n    }","import authHeader from '../auth/authHeader';\nimport axios from './RestApi'\n\nexport class AddressApiService {\n    getAddresses() {\n        return axios.get(\"/addresses\", {\n            headers: authHeader()\n        })\n    }\n    updateAddress(id, address) {\n        return axios.update(\"/addresses/update/\" + id, {\n            address\n        }, {\n            headers: authHeader()\n        })\n    }\n    saveAddress(address) {\n        return axios.post(\"/addresses/save\", {\n            firstName: address.firstName,\n            lastName: address.lastName,\n            phoneNumber: address.phoneNumber,\n            region: address.region,\n            city: address.city,\n            province: address.province,\n            barangay: address.barangay,\n            street: address.street,\n            postalCode: address.postalCode\n        }, {\n            headers: authHeader()\n        })\n    }\n}\n\nexport default new AddressApiService();","import { SET_MESSAGE } from \"src/constants/userConstants\";\nimport { GET_ADDRESSES, SAVE_ADDRESS } from \"src/service/redux/constants\";\nimport AddressApiService from \"src/service/restAPI/AddressApiService\"\n\nexport const getAdress = () => async (dispatch) => {\n    return AddressApiService.getAddresses().then(\n        (response) => {\n            dispatch({\n                type: GET_ADDRESSES,\n                payload: {\n                    status: 200,\n                    action: \"GET_ADDRESSES\",\n                    data: {\n                        addresses: response.data\n                    }\n                }\n            })\n            return Promise.resolve();\n        },\n        (error) => {\n            const errorMessage =\n                (error.response &&\n                    error.response.data &&\n                    error.response.data.message) ||\n                error.message ||\n                error.toString();\n\n            const status = (error.response &&\n                error.response.data &&\n                error.response.data.code) ||\n                error.toString();\n\n            dispatch({\n                type: SET_MESSAGE,\n                payload: {\n                    status: status,\n                    data: {\n                        message: errorMessage\n                    }\n                }\n            })\n            return Promise.reject();\n        }\n    )\n}\n\nexport const saveAddress = (address) => async (dispatch) => {\n    console.log(address)\n    return AddressApiService.saveAddress(address).then(\n        (response) => {\n            dispatch({\n                type: SAVE_ADDRESS,\n                payload: {\n                    status: 200,\n                    action: \"SAVE_ADDRESS\",\n                    data: {\n                    }\n                }\n            })\n            dispatch({\n                type: SET_MESSAGE,\n                payload: {\n                    status: 200,\n                    data: {\n                        message: \"Address Successfully Saved\"\n                    }\n                }\n            })\n            return Promise.resolve();\n        },\n        (error) => {\n            const errorMessage =\n                (error.response &&\n                    error.response.data &&\n                    error.response.data.message) ||\n                error.message ||\n                error.toString();\n\n            const status = (error.response &&\n                error.response.data &&\n                error.response.data.code) ||\n                error.toString();\n\n            dispatch({\n                type: SET_MESSAGE,\n                payload: {\n                    status: status,\n                    data: {\n                        message: errorMessage\n                    }\n                }\n            })\n            return Promise.reject();\n        }\n    )\n}","import React, { Component } from \"react\"\nimport {\n  CButton,\n  CRow,\n  CCol,\n  CCard,\n  CCardTitle,\n  CCardBody,\n  CAlert,\n} from \"@coreui/react\"\nimport { withRouter } from \"react-router\"\nimport { getAdress } from \"src/service/apiActions/addressAction/addressAction\"\nimport { clearMessage } from \"src/service/apiActions/messageAction/messageAction\"\nimport { setAddressModal } from \"src/service/apiActions/modalAction/modalAction\"\nimport AddressModal from \"src/components/modals/address/AddressModal\"\nimport { connect } from \"react-redux\"\nimport * as FaIcons from \"react-icons/fa\"\nimport config from \"../../../config\"\nexport class CustomerAddressController extends Component {\n  state = {\n    message: \"\",\n    action: \"\",\n    addresses: [],\n    addressId: \"\",\n    visible: false,\n    isCart: false\n  }\n  componentDidMount() {\n    if (!this.props.userResponse.isLoggedIn) {\n      this.props.history.push(config.api.private.prefixFrontendUrl + \"/login\")\n    } else {\n      this.retreiveAddressResponse()\n    }\n  }\n  retreiveAddressResponse = () => {\n    this.props.getAdress()\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    this.manageAddressResponse(prevProps, prevState)\n    this.manageModalVisible(prevProps, prevState)\n  }\n  manageAddressResponse = (prevProps, prevState) => {\n    if (prevProps.addressResponse !== this.props.addressResponse) {\n      let { action, status, data } = this.props.addressResponse\n      if (action === \"GET_ADDRESSES\" && status === 200) {\n        this.setState({\n          addresses: data.addresses,\n        })\n      }\n    }\n  }\n  manageModalVisible = (prevProps, prevState) => {\n    if (prevProps.modalVisible !== this.props.modalVisible) {\n      let { action } = this.props.modalVisible\n      if (action === \"close\") {\n        this.retreiveAddressResponse()\n      }\n    }\n  }\n  render() {\n    let { message, addresses, visible, isCart } = this.state\n    const cursorStyle = {\n      cursor: \"pointer\",\n    }\n    return (\n      <>\n        <AddressModal />\n        <CButton\n          shape=\"rounded-pill\"\n          color=\"primary\"\n          variant=\"ghost\"\n          className=\"d-flex justify-content-center align-items-center mb-3\"\n          onClick={() =>\n            this.props.setAddressModal(\n              !visible,\n              \"Add\",\n              \"\",\n              <FaIcons.FaPlus size={20} className=\"me-2\" />,\n            )\n          }\n        >\n          <FaIcons.FaPlus size={20} />\n          <span style={{ marginLeft: \"10px\" }}>Add Address</span>\n        </CButton>\n        <CRow>\n          {addresses.map((address, index) => {\n            const {\n              firstName,\n              lastName,\n              phoneNumber,\n              street,\n              barangay,\n              province,\n              region,\n              city,\n              postalCode } = address;\n            let checked = this.props.getValue == address.id\n            return (\n              <CCol key={index} md={12} className=\"mb-3\">\n                <CCard\n                  className={\n                    checked ? \"border-envelope shadow\" : \"border-envelope\"\n                  }\n                >\n                  <CCardBody className=\"p-3 \">\n                    <div className=\"d-flex align-items-center justify-content-start\">\n                      <CCardTitle>\n                        {address.firstName + \" \" + address.lastName}\n                      </CCardTitle>\n                    </div>\n                    <div className=\"ps-2\">\n                      Mobile #: {phoneNumber}\n                    </div>\n                    <div className=\"ps-2\">\n                      Address: {street + \", \" + barangay + \", \" + city + \", \" + province + \", \" + region}\n                    </div>\n                  </CCardBody>\n                </CCard>\n              </CCol>\n            )\n          })}\n          {isCart && <CCol className=\"m-3 text-center\" style={{ fontStyle: \"italic\" }}>\n            <CAlert color=\"warning\">\n              To Proceed to the next step Select or Add your Address Information\n            </CAlert>\n          </CCol>\n          }\n        </CRow>\n        {\n          message && (\n            <div className=\"form-group d-flex justify-content-center align-items-center\">\n              <div className=\"alert alert-danger\" role=\"alert\">\n                {message}\n              </div>\n            </div>\n          )\n        }\n      </>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    addressResponse: state.addressResponse,\n    userResponse: state.userResponse,\n    messageResponse: state.messageResponse,\n    modalVisible: state.modalVisibleResponse,\n  }\n}\nexport default connect(mapStateToProps, {\n  getAdress,\n  clearMessage,\n  setAddressModal,\n})(withRouter(CustomerAddressController))\n","import React, { Component } from \"react\"\nimport {\n  CButton,\n  // CRow,\n  CCol,\n  CFormFloating,\n  CFormLabel,\n  CFormControl,\n  CForm,\n  CModal,\n  CModalBody,\n  CModalHeader,\n  CModalTitle,\n  CModalFooter,\n  CSpinner,\n  CFormSelect\n} from \"@coreui/react\"\nimport { connect } from \"react-redux\"\n//action\nimport { setAddressModal } from \"src/service/apiActions/modalAction/modalAction\"\nimport { saveAddress } from \"src/service/apiActions/addressAction/addressAction\"\nimport { clearMessage } from \"src/service/apiActions/messageAction/messageAction\"\n\nimport { regions, provinces, cities, barangays } from 'select-philippines-address';\n\nexport class AddressModal extends Component {\n  state = {\n    visible: false,\n    icon: \"\",\n    address: this.addressStates,\n    loading: false,\n    action: \"\",\n    regionsData: [],\n    provincesData: [],\n    citiesData: [],\n    baranggaysData: [],\n    baranggayId: \"\",\n    cityId: \"\",\n    provinceId: \"\",\n    regionId: \"\"\n  }\n\n  addressStates = {\n    firstName: \"\",\n    lastName: \"\",\n    phoneNumber: \"\",\n    region: \"\",\n    city: \"\",\n    province: \"\",\n    barangay: \"\",\n    street: \"\",\n    postalCode: \"\",\n  }\n\n  componentDidMount() {\n    regions().then((regions) => {\n      let regionsData = [];\n      regions.map((region) => {\n        regionsData[region.id] = {\n          name: region.region_name,\n          code: region.region_code\n        };\n      })\n      this.setState({\n        regionsData: regionsData\n      })\n    });\n  }\n\n  componentDidUpdate(prevPros, prevState) {\n    this.manageModalVisible(prevPros, prevState);\n  }\n\n  manageModalVisible = (prevProps, prevState) => {\n    if (prevProps.modalVisible !== this.props.modalVisible) {\n      let { visible, action, address, icon } = this.props.modalVisible\n      if (action === \"Add\") {\n        this.setState({\n          visible: visible,\n          icon: icon,\n          action: action,\n        })\n      } else if (action === \"Edit\") {\n        this.setState({\n          visible: visible,\n          icon: icon,\n          action: action,\n        })\n      } else {\n        this.setState({\n          visible: visible,\n          icon: \"\",\n          action: \"\",\n        })\n      }\n    }\n  }\n\n  handleOnChange = (event) => {\n    this.setState({\n      [event.target.name]: event.target.value,\n    })\n  }\n\n  handleOnSubmit = (event) => {\n    const form = event.currentTarget\n    if (form.checkValidity() === false) {\n      event.preventDefault()\n      event.stopPropagation()\n    }\n    this.setState({\n      loading: true,\n    })\n    let {\n      action,\n      firstName,\n      lastName,\n      phoneNumber,\n      region,\n      city,\n      province,\n      barangay,\n      street,\n      postalCode,\n    } = this.state\n\n    let address = {\n      firstName: firstName,\n      lastName: lastName,\n      phoneNumber: phoneNumber,\n      region: region,\n      city: city,\n      province: province,\n      barangay: barangay,\n      street: street,\n      postalCode: postalCode,\n    }\n    if (action === \"Add\") {\n      this.handleSaveAddress(address)\n    } else if (action === \"Edit\") {\n    }\n  }\n\n  onResetValue = () => {\n    this.setState(() => this.addressStates)\n  }\n\n  handleSaveAddress = (address) => {\n    this.props\n      .saveAddress(address)\n      .then(() => {\n        let { status } = this.props.messageResponse\n        if (status === 200) {\n          this.setState({\n            loading: false,\n          })\n          this.onResetValue()\n        }\n      })\n      .catch(() => {\n        let { status, data } = this.props.messageResponse\n        this.setState({\n          loading: false,\n        })\n      })\n  }\n\n\n  onRegionChanged = (event) => {\n    const regionsData = this.state.regionsData;\n\n\n    if (event.target.value == \"\") {\n      return;\n    }\n\n    const data = regionsData[event.target.value];\n\n    this.setState({\n      regionId: event.target.value,\n      region: data.name\n    })\n\n    provinces(data.code).then((province) => {\n      let provincesData = [];\n      province.map((dt, index) => {\n        provincesData[index] = {\n          name: dt.province_name,\n          code: dt.province_code\n        };\n      })\n      this.setState({\n        provincesData: provincesData\n      })\n    });\n  }\n\n  onProvinceChanged = (event) => {\n    const provincesData = this.state.provincesData;\n\n    if (event.target.value == \"\") {\n      return;\n    }\n\n    const data = provincesData[event.target.value];\n\n    this.setState({\n      provinceId: event.target.value,\n      province: data.name\n    })\n\n\n    cities(data.code).then((city) => {\n      let citiesData = [];\n      city.map((dt, index) => {\n        citiesData[index] = {\n          name: dt.city_name,\n          code: dt.city_code\n        };\n      })\n      this.setState({\n        citiesData: citiesData\n      })\n    });\n  }\n\n  onCityChanged = (event) => {\n    const citiesData = this.state.citiesData;\n\n    if (event.target.value == \"\") {\n      return;\n    }\n    const data = citiesData[event.target.value];\n\n    this.setState({\n      cityId: event.target.value,\n      city: data.name\n    })\n\n    barangays(data.code).then((barangay) => {\n      let baranggaysData = [];\n      barangay.map((dt, index) => {\n        baranggaysData[index] = {\n          name: dt.brgy_name,\n          code: dt.brgy_code\n        };\n      })\n      this.setState({\n        baranggaysData: baranggaysData\n      })\n    });\n  }\n\n  onBaranggayChanged = (event) => {\n    const baranggaysData = this.state.baranggaysData;\n\n    if (event.target.value == \"\") {\n      return;\n    }\n    const data = baranggaysData[event.target.value];\n\n    this.setState({\n      baranggayId: event.target.value,\n      barangay: data.name\n    })\n  }\n\n  render() {\n    let {\n      visible,\n      firstName,\n      lastName,\n      phoneNumber,\n      region,\n      city,\n      province,\n      barangay,\n      street,\n      postalCode,\n      loading,\n      action,\n      regionsData,\n      provincesData,\n      citiesData,\n      baranggaysData,\n      baranggayId,\n      cityId,\n      regionId,\n      provinceId,\n    } = this.state;\n    return (\n      <>\n\n        <CModal size=\"lg\" visible={visible}>\n          <CModalHeader\n            onDismiss={() => this.props.setAddressModal(false, \"close\", \"\", \"\")}\n          >\n            <CModalTitle>Customer Address</CModalTitle>\n          </CModalHeader>\n          <CModalBody>\n            <CForm\n\n              className=\"row g-3 needs-validation\"\n              id=\"address-form\"\n              onSubmit={this.handleOnSubmit}\n            >\n              <CCol md={6}>\n                <CFormFloating className=\"mb-3\">\n                  <CFormControl\n                    name=\"firstName\"\n                    type=\"text\"\n                    id=\"floatingFirstName\"\n                    placeholder=\"First name\"\n                    value={firstName}\n                    onChange={this.handleOnChange}\n                    required\n                  />\n                  <CFormLabel htmlFor=\"floatingFirstName\">\n                    First name\n                  </CFormLabel>\n                </CFormFloating>\n              </CCol>\n              <CCol md={6}>\n                <CFormFloating>\n                  <CFormControl\n                    name=\"lastName\"\n                    type=\"text\"\n                    id=\"floatingLastName\"\n                    placeholder=\"Last name\"\n                    value={lastName}\n                    onChange={this.handleOnChange}\n                    required\n                  />\n                  <CFormLabel htmlFor=\"floatingLastName\">Last name</CFormLabel>\n                </CFormFloating>\n              </CCol>\n              <CCol md={6}>\n                <CFormFloating>\n                  <CFormControl\n                    name=\"phoneNumber\"\n                    type=\"tel\"\n                    required\n                    pattern={\"^(09|\\\\+639)\\\\d{9}$\"}\n                    id=\"floatingPhoneNumber\"\n                    placeholder=\"Last name\"\n                    value={phoneNumber}\n                    onChange={this.handleOnChange}\n                  />\n                  <CFormLabel htmlFor=\"floatingPhoneNumber\">\n                    Phone number\n                  </CFormLabel>\n                </CFormFloating>\n              </CCol>\n              <CCol md={6}>\n\n              </CCol>\n              <CCol md={12}>\n                <CFormFloating>\n                  <CFormControl\n                    name=\"street\"\n                    type=\"text\"\n                    id=\"floatingStreet\"\n                    placeholder=\"Street\"\n                    value={street}\n                    onChange={this.handleOnChange}\n                    required\n                  />\n                  <CFormLabel htmlFor=\"floatingStreet\">Street</CFormLabel>\n                </CFormFloating>\n              </CCol>\n              <CCol md={6}>\n                <CFormFloating className=\"mb-3\">\n                  <CFormSelect\n                    name=\"region\"\n                    type=\"text\"\n                    id=\"floatingRegion\"\n                    placeholder=\"Region\"\n                    value={regionId}\n                    onChange={this.onRegionChanged}\n                    required\n                  >\n                    <option value=\"\" disabled>-- Choose Region --</option>\n                    {regionsData.map((region, index) => {\n                      return <option value={index} key={index}>{region.name}</option>\n                    })}\n                  </CFormSelect>\n                  <CFormLabel htmlFor=\"floatingRegion\">Region</CFormLabel>\n                </CFormFloating>\n              </CCol>\n              <CCol md={6}>\n                <CFormFloating>\n                  <CFormSelect\n                    name=\"province\"\n                    type=\"text\"\n                    id=\"floatingProvince\"\n                    placeholder=\"Province\"\n                    value={provinceId}\n                    onChange={this.onProvinceChanged}\n                    required\n                  >\n                    <option value=\"\" disabled>-- Choose Province --</option>\n                    {provincesData.map((region, index) => {\n                      return <option value={index} key={region.name}>{region.name}</option>\n                    })}\n                  </CFormSelect>\n                  <CFormLabel htmlFor=\"floatingProvince\">Province</CFormLabel>\n                </CFormFloating>\n              </CCol>\n              <CCol md={6}>\n                <CFormFloating>\n                  <CFormSelect\n                    name=\"city\"\n                    type=\"text\"\n                    id=\"floatingCity\"\n                    placeholder=\"City\"\n                    value={cityId}\n                    onChange={this.onCityChanged}\n                    required\n                  >\n                    <option value=\"\" disabled>-- Choose City --</option>\n                    {citiesData.map((region, index) => {\n                      return <option value={index} key={index}>{region.name}</option>\n                    })}\n                  </CFormSelect>\n                  <CFormLabel htmlFor=\"floatingCity\">City</CFormLabel>\n                </CFormFloating>\n              </CCol>\n              <CCol md={6}>\n                <CFormFloating>\n                  <CFormSelect\n                    name=\"barangay\"\n                    type=\"text\"\n                    id=\"floatingBarangay\"\n                    placeholder=\"Barangay\"\n                    value={baranggayId}\n                    onChange={this.onBaranggayChanged}\n                    required\n                  >\n                    <option value=\"\" disabled>-- Choose Barangay --</option>\n                    {baranggaysData.map((region, index) => {\n                      return <option value={index} key={index}>{region.name}</option>\n                    })}\n                  </CFormSelect>\n                  <CFormLabel htmlFor=\"floatingBarangay\">Barangay</CFormLabel>\n                </CFormFloating>\n              </CCol>\n              {/* <CCol md={3}>\n                <CFormFloating>\n                  <CFormControl\n                    name=\"postalCode\"\n                    type=\"number\"\n                    id=\"floatingPostalCode\"\n                    placeholder=\"Postal Code\"\n                    value={postalCode}\n                    onChange={this.handleOnChange}\n                    required\n                  />\n                  <CFormLabel htmlFor=\"floatingPostalCode\">\n                    Postal code\n                  </CFormLabel>\n                </CFormFloating>\n              </CCol> */}\n            </CForm>\n          </CModalBody>\n          <CModalFooter>\n            <CButton\n              color=\"dark\"\n              variant=\"ghost\"\n              onClick={() => {\n                this.props.setAddressModal(false, \"close\", \"\", \"\")\n                // this.props.clearMessage();\n              }}\n            >\n              Close\n            </CButton>\n            <CButton\n              color=\"info\"\n              disabled={loading}\n              type=\"submit\"\n              form=\"address-form\"\n            >\n              {loading && <CSpinner size=\"sm\" className=\"ms-1\" />}\n              Save {action === \"Edit\" ? \"Changes\" : \"Address\"}\n            </CButton>\n          </CModalFooter>\n        </CModal>\n      </>\n    )\n  }\n}\nconst mapStateToProps = (state) => {\n  return {\n    modalVisible: state.modalVisibleResponse,\n    messageResponse: state.messageResponse,\n  }\n}\nexport default connect(mapStateToProps, {\n  setAddressModal,\n  saveAddress,\n  clearMessage,\n})(AddressModal)\n","const axios = require('axios');\r\n\r\n// Returns all regions\r\n// @param NULL\r\n\r\nconst regions = async () => {\r\n    try {\r\n        const regions = await axios.get(\r\n            'https://isaacdarcilla.github.io/philippine-addresses/region.json'\r\n        );\r\n        return regions.data.map((region) => {\r\n            return {\r\n                id: region.id,\r\n                psgc_code: region.psgc_code,\r\n                region_name: region.region_name,\r\n                region_code: region.region_code\r\n            };\r\n        })\r\n    } catch (e) {\r\n        return e.message;\r\n    }\r\n};\r\n\r\n// Returns all provinces base on region code parameter.\r\n// @param REGION CODE\r\n\r\nconst provinces = async (code) => {\r\n    try {\r\n        const provinces = await axios.get(\r\n            'https://isaacdarcilla.github.io/philippine-addresses/province.json'\r\n        );\r\n        return provinces.data.filter(province => province.region_code === code)\r\n            .map((filtered) => {\r\n                return {\r\n                    psgc_code: filtered.psgc_code,\r\n                    province_name: filtered.province_name,\r\n                    province_code: filtered.province_code,\r\n                    region_code: filtered.region_code\r\n                };\r\n            });\r\n    } catch (e) {\r\n        return e.message;\r\n    }\r\n};\r\n\r\n// Returns all cities base on province code parameter.\r\n// @param PROVINCE CODE\r\n\r\nconst cities = async (code) => {\r\n    try {\r\n        const cities = await axios.get(\r\n            'https://isaacdarcilla.github.io/philippine-addresses/city.json'\r\n        );\r\n        return cities.data.filter(city => city.province_code === code)\r\n            .map((filtered) => {\r\n                return {\r\n                    city_name: filtered.city_name,\r\n                    city_code: filtered.city_code,\r\n                    province_code: filtered.province_code,\r\n                    region_desc: filtered.region_desc,\r\n                };\r\n            });\r\n    } catch (e) {\r\n        return e.message;\r\n    }\r\n};\r\n\r\n// Returns all barangays base on city code parameter.\r\n// @param CITY CODE\r\n\r\nconst barangays = async (code) => {\r\n    try {\r\n        const barangays = await axios.get(\r\n            'https://isaacdarcilla.github.io/philippine-addresses/barangay.json'\r\n        );\r\n        return barangays.data.filter(barangay => barangay.city_code === code)\r\n            .map((filtered) => {\r\n                return {\r\n                    brgy_name: filtered.brgy_name,\r\n                    brgy_code: filtered.brgy_code,\r\n                    province_code: filtered.province_code,\r\n                    region_code: filtered.region_code,\r\n                };\r\n            });\r\n    } catch (e) {\r\n        return e.message;\r\n    }\r\n};\r\n\r\nmodule.exports = { regions, provinces, cities, barangays };"],"sourceRoot":""}