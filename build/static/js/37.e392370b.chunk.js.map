{"version":3,"sources":["service/apiActions/modalAction/modalAction.js","service/apiActions/productAction/productAction.js","service/restAPI/ProductApiService.js","service/restAPI/SupplierApiService.js","service/apiActions/supplierAction/supplierAction.js","service/restAPI/IncomingSupplyApiService.js","service/apiActions/incomingSupplyAction/incomingSupplyAction.js","components/modals/supply/SupplyModal.js","views/private/incoming/IncomingSuppliesController.js"],"names":["setProductModal","visible","action","icon","async","dispatch","type","SET_PRODUCTEDITMODAL_VISIBILIT","payload","status","data","setProductDetailsModal","product","SET_PRODUCT_DETAILS_MODAL","editProductModal","updateProduct","EDIT_PRODUCT_MODAL","setAlertModal","alert","module","id","ALERT_MODAL","setAlertBanModal","ALERT_BAN_MODAL","setStoreModal","storeInfo","UDPATE_STORE_INFORMATION","addBrandModal","branch","ADD_BRAND_MODAL","brand","addCategoryModal","category","ADD_CATEGORY_MODAL","addAccountModal","employee","ADD_EMPLOYEE_MODAL","changePasswordModal","CHANGE_PASSWORD_MODAL","setLoginModal","LOGIN_MODAL","setAddressModal","address","SET_ADDRESS_MODAL","setSupplierModal","supplier","SET_SUPPLIER_MODAL","setSupplyModal","supply","SET_SUPPLY_MODAL","setScanModal","SET_SCAN_MODAL","setPromoModal","promo","SET_PROMO_MODAL","setTermAndConditionModal","termsAndCondition","SET_TERMS_AND_CONDITION_MODAL","setCarouselModal","carousel","SET_CAROULSE_MDOAL","setTrackingInfoModal","order","SET_TRACKING_INFO_MODAL","saveProduct","formData","ProductApiService","then","response","SAVE_PRODUCT","SET_MESSAGE","message","Promise","resolve","error","console","log","error_message","toString","code","SAVE_FAIL","reject","getDiscoverProducts","query","page","limit","GET_DISCOVER_PRODUCT","products","SET_PRODUCT_MESSAGE","getPopularProducts","GET_POPULAR_PRODUCT","getImage","image","token","GET_IMAGE","FAIL_GET_IMAGE","getProduct","GET_PRODUCT","getProductDetails","GET_PRODUCT_DETAILS","deleteProduct","DELETE_PRODUCT","productId","UPDATE_PRODUCT","updatedProduct","searchProductByBarcodeOrName","SEARCH_PRODUCT","getProductsByCategoryName","categoryName","GET_PRODUCT_BY_CATEGORY_NAME","getProductsByStatus","GET_PRODUCTS_BY_STATUS","getProductsWithPromo","GET_PRODUCTS_WITH_PROMO","axios","post","headers","authHeader","put","delete","getProducts","get","params","path","getPath","responseType","createSupplier","name","phoneNumber","updateSupplier","deleteSupplier","getSuppliers","getSupplier","SupplierApiService","CREATE_SUPPLIER","errorMessage","UPDATE_SUPPLIER","DELETE_SUPPLIER","GET_SUPPLIERS","suppliers","saveIncomingSupply","incomingSupplyItems","supplierId","getIncomingSupplies","getIncomingSupply","markIncomingSuppliesAsDelivered","updateIncomingSuppleis","removedIncomingSupplyItems","incomingSupply","removedItems","IncomingSupplyApiService","GET_INCOMING_SUPPLIES","incomingSupplies","GET_INCOMING_SUPPLY","SAVE_INCOMING_SUPPLY","MARK_INCOMING_SUPPLY_AS_DELIVERED","updateIncomingSupplyItems","UPDATE_INCOMING_SUPPLY","SupplyModal","Component","state","loading","productItems","supplierItems","supplierSelected","items","showScanner","supplierErrorMessage","incomingSupplyMessage","removedProductItems","this","props","manageSupplyModal","prevProps","prevState","modalVisible","setState","manageSupplierResponse","supplierResponse","manageProductResponse","productResponse","map","index","handleTempProductItem","item","slice","find","findIndex","numberReceived","productName","barcode","push","handleRemoveTempProductItem","removed","splice","handleOnChange","event","handleSupplierOnSearch","string","results","catch","messageResponse","logout","clearMessage","handleSupplierOnSelect","handleProductOnSelect","searchProduct","handleSupplierOnClear","handleProductOnClear","handleOnSeachProduct","handleDecodeBarcode","decoded","handleOnSubmit","preventDefault","handleOnSave","handleOnUpdate","length","setInterval","validation","incrementValue","decrementValue","handleQuantityOnChange","value","max","min","target","Math","Number","componentDidMount","componentDidUpdate","render","size","scrollable","onDismiss","className","onSubmit","sm","md","lg","onSearch","onSelect","onClear","fuseOptions","keys","resultStringKeyName","placeholder","autoFocus","styling","boxShadow","fontSize","zIndex","padding","height","border","fontWiegth","placeholderColor","width","color","variant","onClick","striped","hover","responsive","align","delay","facingMode","torch","onUpdate","err","result","text","bordered","scope","productItem","String","margin","background","disabled","pattern","onChange","readOnly","colSpan","role","form","connect","modalVisibleResponse","productResponser","IncomingSupplies","React","lazy","IncomingSuppliesController","activeKey","totalPages","totalCounts","PENDING","DELIVERED","manageIncomingSupplies","incomingSupplyResponse","totalCountChange","shape","style","marginLeft","layout","href","active","overflow","fallback"],"mappings":"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","file":"static/js/37.e392370b.chunk.js","sourcesContent":["import {\n  ADD_BRANCH_MODAL,\n  ALERT_MODAL,\n  EDIT_PRODUCT_MODAL,\n  SET_PRODUCTEDITMODAL_VISIBILIT,\n  ADD_BRAND_MODAL,\n  ADD_CATEGORY_MODAL,\n  ADD_EMPLOYEE_MODAL,\n  SET_PRODUCT_DETAILS_MODAL,\n  LOGIN_MODAL,\n  SET_ADDRESS_MODAL,\n  SET_SUPPLIER_MODAL,\n  SET_SUPPLY_MODAL,\n  SET_SCAN_MODAL,\n  SET_PROMO_MODAL,\n  ALERT_BAN_MODAL,\n  CHANGE_PASSWORD_MODAL,\n  UDPATE_STORE_INFORMATION,\n  SET_TERMS_AND_CONDITION_MODAL,\n  SET_CAROULSE_MDOAL,\n  SET_TRACKING_INFO_MODAL,\n} from \"src/service/redux/constants\"\n\nexport const setProductModal = (visible, action, icon) => async (dispatch) => {\n  dispatch({\n    type: SET_PRODUCTEDITMODAL_VISIBILIT,\n    payload: {\n      status: 200,\n      data: {\n        visible: visible,\n        action: action,\n        icon: icon,\n      },\n    },\n  })\n}\nexport const setProductDetailsModal =\n  (visible, action, product) => async (dispatch) => {\n    dispatch({\n      type: SET_PRODUCT_DETAILS_MODAL,\n      payload: {\n        status: 200,\n        data: {\n          visible: visible,\n          action: action,\n          product: product,\n        },\n      },\n    })\n  }\nexport const editProductModal =\n  (visible, action, updateProduct, icon) => async (dispatch) => {\n    dispatch({\n      type: EDIT_PRODUCT_MODAL,\n      payload: {\n        status: 200,\n        data: {\n          visible: visible,\n          action: action,\n          product: updateProduct,\n          icon: icon,\n        },\n      },\n    })\n  }\nexport const setAlertModal =\n  (alert, action, module, id) => async (dispatch) => {\n    dispatch({\n      type: ALERT_MODAL,\n      payload: {\n        action: action,\n        module: module,\n        alert: alert,\n        data: {\n          id: id,\n        },\n      },\n    })\n  }\nexport const setAlertBanModal =\n  (alert, action, module, id) => async (dispatch) => {\n    dispatch({\n      type: ALERT_BAN_MODAL,\n      payload: {\n        action: action,\n        module: module,\n        alert: alert,\n        data: {\n          id: id,\n        },\n      },\n    })\n  }\nexport const setStoreModal =\n  (visible, action, storeInfo, icon) => async (dispatch) => {\n    dispatch({\n      type: UDPATE_STORE_INFORMATION,\n      payload: {\n        status: 200,\n        data: {\n          visible: visible,\n          action: action,\n          storeInfo: storeInfo,\n          icon: icon,\n        },\n      },\n    })\n  }\n\nexport const addBrandModal =\n  (visible, action, branch, icon) => async (dispatch) => {\n    dispatch({\n      type: ADD_BRAND_MODAL,\n      payload: {\n        status: 200,\n        data: {\n          visible: visible,\n          action: action,\n          brand: branch,\n          icon: icon,\n        },\n      },\n    })\n  }\n\nexport const addCategoryModal =\n  (visible, action, category, icon) => async (dispatch) => {\n    dispatch({\n      type: ADD_CATEGORY_MODAL,\n      payload: {\n        status: 200,\n        data: {\n          visible: visible,\n          action: action,\n          category: category,\n          icon: icon,\n        },\n      },\n    })\n  }\n\nexport const addAccountModal =\n  (visible, action, employee, icon) => async (dispatch) => {\n    dispatch({\n      type: ADD_EMPLOYEE_MODAL,\n      payload: {\n        status: 200,\n        data: {\n          visible: visible,\n          action: action,\n          employee: employee,\n          icon: icon,\n        },\n      },\n    })\n  }\nexport const changePasswordModal =\n  (visible, action, employee, icon) => async (dispatch) => {\n    dispatch({\n      type: CHANGE_PASSWORD_MODAL,\n      payload: {\n        status: 200,\n        data: {\n          visible: visible,\n          action: action,\n          employee: employee,\n          icon: icon,\n        },\n      },\n    })\n  }\nexport const setLoginModal = (visible, action) => async (dispatch) => {\n  dispatch({\n    type: LOGIN_MODAL,\n    payload: {\n      data: {\n        visible: visible,\n        action: action,\n      },\n    },\n  })\n}\n\nexport const setAddressModal =\n  (visible, action, address, icon) => async (dispatch) => {\n    dispatch({\n      type: SET_ADDRESS_MODAL,\n      payload: {\n        data: {\n          visible: visible,\n          action: action,\n          address: address,\n          icon: icon,\n        },\n      },\n    })\n  }\n\nexport const setSupplierModal =\n  (visible, action, supplier, icon) => async (dispatch) => {\n    dispatch({\n      type: SET_SUPPLIER_MODAL,\n      payload: {\n        action: action,\n        data: {\n          visible: visible,\n          icon: icon,\n          supplier: supplier,\n        },\n      },\n    })\n  }\nexport const setSupplyModal =\n  (visible, action, supply, icon) => async (dispatch) => {\n    dispatch({\n      type: SET_SUPPLY_MODAL,\n      payload: {\n        action: action,\n        data: {\n          visible: visible,\n          icon: icon,\n          supply: supply,\n        },\n      },\n    })\n  }\n\nexport const setScanModal = (visible, action) => async (dispatch) => {\n  dispatch({\n    type: SET_SCAN_MODAL,\n    payload: {\n      action: action,\n      data: {\n        visible: visible,\n      },\n    },\n  })\n}\nexport const setPromoModal =\n  (visible, action, promo, icon) => async (dispatch) => {\n    dispatch({\n      type: SET_PROMO_MODAL,\n      payload: {\n        action: action,\n        data: {\n          visible: visible,\n          icon: icon,\n          promo: promo,\n        },\n      },\n    })\n  }\nexport const setTermAndConditionModal =\n  (visible, action, termsAndCondition, icon) => async (dispatch) => {\n    dispatch({\n      type: SET_TERMS_AND_CONDITION_MODAL,\n      payload: {\n        status: 200,\n        data: {\n          visible: visible,\n          action: action,\n          termsAndCondition: termsAndCondition,\n          icon: icon,\n        },\n      },\n    })\n  }\nexport const setCarouselModal =\n  (visible, action, carousel, icon) => async (dispatch) => {\n    dispatch({\n      type: SET_CAROULSE_MDOAL,\n      payload: {\n        status: 200,\n        data: {\n          visible: visible,\n          action: action,\n          carousel: carousel,\n          icon: icon,\n        },\n      },\n    })\n  }\n\nexport const setTrackingInfoModal = (visible, action, order, icon) => async (dispatch) => {\n  dispatch({\n    type: SET_TRACKING_INFO_MODAL,\n    payload: {\n      status: 200,\n      data: {\n        visible: visible,\n        action: action,\n        order: order,\n        icon: icon\n      }\n    }\n  })\n}\n","// import RestApi from '../RestApi'\nimport { SET_MESSAGE } from \"src/constants/userConstants\"\nimport ProductApiService from \"src/service/restAPI/ProductApiService\"\nimport {\n  DELETE_PRODUCT,\n  FAIL_GET_IMAGE,\n  GET_DISCOVER_PRODUCT,\n  GET_IMAGE,\n  GET_PRODUCT,\n  GET_PRODUCTS,\n  GET_PRODUCTS_BY_STATUS,\n  GET_PRODUCTS_WITH_PROMO,\n  GET_PRODUCT_BY_CATEGORY_NAME,\n  GET_PRODUCT_DETAILS,\n  SAVE_FAIL,\n  // UPDATE_PRODUCT,\n  // DELETE_PRODUCT\n  SAVE_PRODUCT,\n  SEARCH_PRODUCT,\n  SET_PRODUCT_MESSAGE,\n  UPDATE_PRODUCT,\n  GET_POPULAR_PRODUCT\n} from \"../../redux/constants\"\n\nexport const saveProduct = (formData) => async (dispatch) => {\n  return ProductApiService.saveProduct(formData).then(\n    (response) => {\n      dispatch({\n        type: SAVE_PRODUCT,\n      })\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: 200,\n          data: {\n            message: \"Successfully Saved\",\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      console.log(error)\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.error_message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.toString()\n      console.log(status)\n      dispatch({\n        type: SAVE_FAIL,\n      })\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: message,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\n\nexport const getProducts = (query, page, limit) => async (dispatch) => {\n  return ProductApiService.getProducts(query, page, limit).then(\n    (response) => {\n      dispatch({\n        type: GET_PRODUCTS,\n        payload: {\n          status: 200,\n          data: {\n            products: response.data,\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.error_message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.status ||\n        error.toString()\n\n      dispatch({\n        type: SET_PRODUCT_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: message,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\n\nexport const getDiscoverProducts = (query, page, limit) => async (dispatch) => {\n  return ProductApiService.getDiscoverProducts(query, page, limit).then(\n    (response) => {\n      dispatch({\n        type: GET_DISCOVER_PRODUCT,\n        payload: {\n          status: 200,\n          data: {\n            products: response.data,\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.error_message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.status ||\n        error.toString()\n\n      dispatch({\n        type: SET_PRODUCT_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: message,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\n\nexport const getPopularProducts = (query, page, limit) => async (dispatch) => {\n  return ProductApiService.getPopularProducts(query, page, limit).then(\n    (response) => {\n      dispatch({\n        type: GET_POPULAR_PRODUCT,\n        payload: {\n          status: 200,\n          data: {\n            products: response.data,\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.error_message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.status ||\n        error.toString()\n\n      dispatch({\n        type: SET_PRODUCT_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: message,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\n\nexport const getImage = (image, token) => async (dispatch) => {\n  return ProductApiService.getImage(image, token).then(\n    (response) => {\n      console.log(response)\n      dispatch({\n        type: GET_IMAGE,\n        payload: {\n          status: response.status,\n          data: {\n            image: response.data,\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.error_message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.status ||\n        error.toString()\n      dispatch({\n        type: FAIL_GET_IMAGE,\n      })\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: message,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\nexport const getProduct = (id) => async (dispatch) => {\n  return ProductApiService.getProduct(id).then(\n    (response) => {\n      dispatch({\n        type: GET_PRODUCT,\n        payload: {\n          status: 200,\n          data: {\n            product: response.data,\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.error_message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.status ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: message,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\nexport const getProductDetails = (id) => async (dispatch) => {\n  return ProductApiService.getProductDetails(id).then(\n    (response) => {\n      dispatch({\n        type: GET_PRODUCT_DETAILS,\n        payload: {\n          status: 200,\n          data: {\n            product: response.data,\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.error_message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.status ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: message,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\nexport const deleteProduct = (id) => async (dispatch) => {\n  return ProductApiService.deleteProduct(id).then(\n    (response) => {\n      dispatch({\n        type: DELETE_PRODUCT,\n        payload: {\n          status: 200,\n          action: DELETE_PRODUCT,\n          data: {},\n        },\n      })\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: 200,\n          data: {\n            message: \"Successfully Deleted\",\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.error_message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.status ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: message,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\n\nexport const updateProduct = (productId, formData) => async (dispatch) => {\n  return ProductApiService.updateProduct(productId, formData).then(\n    (response) => {\n      dispatch({\n        type: UPDATE_PRODUCT,\n        payload: {\n          status: 200,\n          action: UPDATE_PRODUCT,\n          data: {\n            updatedProduct: response.data,\n          },\n        },\n      })\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: 200,\n          data: {\n            message: \"Successfully Updated\",\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.error_message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.status ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: message,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\nexport const searchProductByBarcodeOrName =\n  (query, page, limit) => async (dispatch) => {\n    return ProductApiService.searchProductByBarcodeOrName(\n      query,\n      page,\n      limit,\n    ).then(\n      (response) => {\n        dispatch({\n          type: SEARCH_PRODUCT,\n          payload: {\n            status: 200,\n            action: SEARCH_PRODUCT,\n            data: {\n              products: response.data,\n            },\n          },\n        })\n        return Promise.resolve()\n      },\n      (error) => {\n        const message =\n          (error.response &&\n            error.response.data &&\n            error.response.data.message) ||\n          error.message ||\n          error.error_message ||\n          error.toString()\n\n        const status =\n          (error.response && error.response.data && error.response.data.code) ||\n          error.status ||\n          error.toString()\n\n        dispatch({\n          type: SET_MESSAGE,\n          payload: {\n            status: status,\n            data: {\n              message: message,\n            },\n          },\n        })\n        return Promise.reject()\n      },\n    )\n  }\n\nexport const getProductsByCategoryName =\n  (categoryName, query, page, limit) => async (dispatch) => {\n    return ProductApiService.getProductsByCategoryName(\n      categoryName,\n      query,\n      page,\n      limit,\n    ).then(\n      (response) => {\n        dispatch({\n          type: GET_PRODUCT_BY_CATEGORY_NAME,\n          payload: {\n            status: 200,\n            action: GET_PRODUCT_BY_CATEGORY_NAME,\n            data: {\n              products: response.data,\n            },\n          },\n        })\n        return Promise.resolve()\n      },\n      (error) => {\n        const message =\n          (error.response &&\n            error.response.data &&\n            error.response.data.message) ||\n          error.message ||\n          error.error_message ||\n          error.toString()\n\n        const status =\n          (error.response && error.response.data && error.response.data.code) ||\n          error.status ||\n          error.toString()\n\n        dispatch({\n          type: SET_MESSAGE,\n          payload: {\n            status: status,\n            data: {\n              message: message,\n            },\n          },\n        })\n        return Promise.reject()\n      },\n    )\n  }\nexport const getProductsByStatus =\n  (query, status, page, limit) => async (dispatch) => {\n    return ProductApiService.getProductsByStatus(\n      query,\n      status,\n      page,\n      limit,\n    ).then(\n      (response) => {\n        dispatch({\n          type: GET_PRODUCTS_BY_STATUS,\n          payload: {\n            status: 200,\n            action: GET_PRODUCTS_BY_STATUS,\n            data: {\n              products: response.data,\n            },\n          },\n        })\n      },\n      (error) => {\n        const message =\n          (error.response &&\n            error.response.data &&\n            error.response.data.message) ||\n          error.message ||\n          error.error_message ||\n          error.toString()\n\n        const status =\n          (error.response && error.response.data && error.response.data.code) ||\n          error.status ||\n          error.toString()\n\n        dispatch({\n          type: SET_MESSAGE,\n          payload: {\n            status: status,\n            data: {\n              message: message,\n            },\n          },\n        })\n        return Promise.reject()\n      },\n    )\n  }\n\nexport const getProductsWithPromo =\n  (status, query, page, limit) => async (dispatch) => {\n    return ProductApiService.getProductsWithPromo(\n      status,\n      query,\n      page,\n      limit,\n    ).then(\n      (response) => {\n        dispatch({\n          type: GET_PRODUCTS_WITH_PROMO,\n          payload: {\n            status: 200,\n            action: GET_PRODUCTS_WITH_PROMO,\n            data: {\n              products: response.data,\n            },\n          },\n        })\n        return Promise.resolve()\n      },\n      (error) => {\n        const message =\n          (error.response &&\n            error.response.data &&\n            error.response.data.message) ||\n          error.message ||\n          error.error_message ||\n          error.toString()\n\n        const status =\n          (error.response && error.response.data && error.response.data.code) ||\n          error.status ||\n          error.toString()\n\n        dispatch({\n          type: SET_MESSAGE,\n          payload: {\n            status: status,\n            data: {\n              message: message,\n            },\n          },\n        })\n        return Promise.reject()\n      },\n    )\n  }\n","import authHeader from \"../auth/authHeader\"\nimport axios from \"./RestApi\"\n\nexport class ProductApiService {\n  saveProduct(formData) {\n    return axios.post(\"/products/save\", formData, { headers: authHeader() })\n  }\n  updateProduct(productId, formData) {\n    return axios.put(\"/products/update/\" + productId, formData, {\n      headers: authHeader(),\n    })\n  }\n  deleteProduct(id) {\n    return axios.delete(\"/products/delete/\" + id, {\n      headers: authHeader(),\n    })\n  }\n  getProducts(query, page, limit) {\n    return axios.get(\"/products\", {\n      headers: authHeader(),\n      params: {\n        query: query,\n        page: page,\n        limit: limit,\n      },\n    })\n  }\n  getImage(path, image) {\n    console.log()\n    let getPath = path ? path : \"null/\"\n\n    return axios.get(\"/products/getImages/bytesArrays/\" + getPath + image, {\n      responseType: \"blob\",\n    })\n  }\n  getProduct(id) {\n    return axios.get(\"/products/\" + id, {\n      headers: authHeader(),\n    })\n  }\n  getProductDetails(id) {\n    return axios.get(\"/products/details/\" + id, {\n      headers: authHeader(),\n    })\n  }\n  getDiscoverProducts(query, page, limit) {\n    return axios.get(\"/products/discover\", {\n      headers: authHeader(),\n      params: {\n        query: query,\n        page: page,\n        limit: limit,\n      },\n    })\n  }\n  getPopularProducts(query, page, limit) {\n    return axios.get(\"/products/popular\", {\n      headers: authHeader(),\n      params: {\n        query: query,\n        page: page,\n        limit: limit,\n      },\n    })\n  }\n  searchProductByBarcodeOrName(query, page, limit) {\n    return axios.get(\"/products/search\", {\n      headers: authHeader(),\n      params: {\n        query: query,\n        page: page,\n        limit: limit,\n      },\n    })\n  }\n  getProductsByCategoryName(categoryName, query, page, limit) {\n    return axios.get(\"/products/category/\" + categoryName, {\n\n      headers: authHeader(),\n      params: {\n        query: query,\n        page: page,\n        limit: limit,\n      },\n    })\n  }\n  getProductsByStatus(query, status, page, limit) {\n    return axios.get(\"/products/status\", {\n      headers: authHeader(),\n      params: {\n        status: status,\n        query: query,\n        page: page,\n        limit: limit,\n      },\n    })\n  }\n  getProductsWithPromo(status, query, page, limit) {\n    return axios.get(\"/products/promo\", {\n      headers: authHeader(),\n      params: {\n        status: status,\n        query: query,\n        page: page,\n        limit: limit,\n      },\n    })\n  }\n}\n\nexport default new ProductApiService()\n\n// export default new ProductApiService();\n","import authHeader from \"../auth/authHeader\"\nimport axios from \"./RestApi\"\n\nexport class SupplierApiService {\n  createSupplier(name, address, phoneNumber) {\n    console.log(address)\n    return axios.post(\n      \"/suppliers/create\",\n      {\n        name: name,\n        address: address,\n        phoneNumber: phoneNumber\n      },\n      {\n        headers: authHeader(),\n      },\n    )\n  }\n  updateSupplier(id, name, address, phoneNumber) {\n    return axios.put(\n      \"/suppliers/update/\" + id,\n      {\n        name,\n      },\n      {\n        headers: authHeader(),\n      },\n    )\n  }\n  deleteSupplier(id) {\n    return axios.delete(\"/suppliers/delete/\" + id, {\n      headers: authHeader(),\n    })\n  }\n  getSuppliers(query, page, limit) {\n    return axios.get(\"/suppliers\", {\n      headers: authHeader(),\n      params: {\n        query: query,\n        page: page,\n        limit: limit,\n      },\n    })\n  }\n  getSupplier(id) {\n    return axios.get(\"/suppliers/\" + id, {\n      headers: authHeader(),\n    })\n  }\n}\nexport default new SupplierApiService()\n","import { SET_MESSAGE } from \"src/constants/userConstants\"\nimport {\n  CREATE_SUPPLIER,\n  DELETE_SUPPLIER,\n  GET_SUPPLIER,\n  GET_SUPPLIERS,\n  UPDATE_SUPPLIER,\n} from \"src/service/redux/constants\"\nimport SupplierApiService from \"src/service/restAPI/SupplierApiService\"\n\nexport const createSupplier = (name, address, phoneNumber) => async (dispatch) => {\n  return SupplierApiService.createSupplier(name, address, phoneNumber).then(\n    (response) => {\n      dispatch({\n        type: CREATE_SUPPLIER,\n        payload: {\n          status: 200,\n          action: CREATE_SUPPLIER,\n          data: {},\n        },\n      })\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: 200,\n          data: {\n            message: \"Successfully Created.\",\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      const errorMessage =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: errorMessage,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\nexport const updateSupplier = (id, name, address, phoneNumber) => async (dispatch) => {\n  return SupplierApiService.updateSupplier(id, name, address, phoneNumber).then(\n    (response) => {\n      dispatch({\n        type: UPDATE_SUPPLIER,\n        payload: {\n          status: 200,\n          action: UPDATE_SUPPLIER,\n          data: {\n            supplier: response.data,\n          },\n        },\n      })\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: 200,\n          data: {\n            message: \"Successfully Updated.\",\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      const errorMessage =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: errorMessage,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\n// export const deleteSupplier = (id) => async (dispatch) => {\n//   return SupplierApiService.deleteSupplier(id).then(\n//     (response) => {\n//       dispatch({\n//         type: DELETE_SUPPLIER,\n//         payload: {\n//           status: 200,\n//           action: GET_SUPPLIERS,\n//           data: {},\n//         },\n//       })\n//       dispatch({\n//         type: SET_MESSAGE,\n//         payload: {\n//           status: 200,\n//           data: {\n//             message: \"Successfully Deleted.\",\n//           },\n//         },\n//       })\n//       return Promise.resolve()\n//     },\n//     (error) => {\n//       const errorMessage =\n//         (error.response &&\n//           error.response.data &&\n//           error.response.data.message) ||\n//         error.message ||\n//         error.toString()\n\n//       const status =\n//         (error.response && error.response.data && error.response.data.code) ||\n//         error.toString()\n\n//       dispatch({\n//         type: SET_MESSAGE,\n//         payload: {\n//           status: status,\n//           data: {\n//             message: errorMessage,\n//           },\n//         },\n//       })\n//       return Promise.reject()\n//     },\n//   )\n// }\nexport const deleteSupplier = (id) => async (dispatch) => {\n  return SupplierApiService.deleteSupplier(id).then(\n    (response) => {\n      console.log(response)\n      dispatch({\n        type: DELETE_SUPPLIER,\n        payload: {\n          status: 200,\n          action: \"DELETESUPPLIER\",\n        },\n      })\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: 200,\n          data: {\n            message: \"Successfully DELETED\",\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.error_message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: message,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\nexport const getSuppliers = (query, page, limit) => async (dispatch) => {\n  return SupplierApiService.getSuppliers(query, page, limit).then(\n    (response) => {\n      dispatch({\n        type: GET_SUPPLIERS,\n        payload: {\n          status: 200,\n          action: GET_SUPPLIERS,\n          data: {\n            suppliers: response.data,\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      const errorMessage =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: errorMessage,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\n\nexport const getSupplier = (id) => async (dispatch) => {\n  return SupplierApiService.getSupplier(id).then(\n    (response) => {\n      dispatch({\n        type: GET_SUPPLIER,\n        payload: {\n          status: 200,\n          action: GET_SUPPLIER,\n          data: {\n            supplier: response.data,\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      const errorMessage =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: errorMessage,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\n","import axios from \"./RestApi\"\nimport authHeader from \"../auth/authHeader\"\n\nexport class IncomingSupplyApiService {\n  saveIncomingSupply(incomingSupplyItems, supplierId) {\n    console.log(supplierId)\n    return axios.post(\n      \"/supplies/save\",\n      {\n        incomingSupplyItems: incomingSupplyItems,\n        supplier: {\n          id: supplierId,\n        },\n      },\n      {\n        headers: authHeader(),\n      },\n    )\n  }\n  getIncomingSupplies(query, status, page, limit) {\n    return axios.get(\"/supplies\", {\n      headers: authHeader(),\n      params: {\n        query: query,\n        status: status,\n        page: page,\n        limit: limit,\n      },\n    })\n  }\n\n  getIncomingSupply(id) {\n    return axios.get(\"/supplies/\" + id, {\n      headers: authHeader(),\n    })\n  }\n\n  markIncomingSuppliesAsDelivered(id) {\n    return axios.put(\n      \"/supplies/delivered\",\n      {},\n      {\n        headers: authHeader(),\n        params: {\n          id: id,\n        },\n      },\n    )\n  }\n  updateIncomingSuppleis(\n    id,\n    incomingSupplyItems,\n    supplier,\n    removedIncomingSupplyItems,\n  ) {\n    return axios.put(\n      \"/supplies/update/\" + id,\n      {\n        incomingSupply: {\n          incomingSupplyItems: incomingSupplyItems,\n          supplier: {\n            id: supplier.id,\n          },\n        },\n        removedItems: removedIncomingSupplyItems,\n      },\n      {\n        headers: authHeader(),\n      },\n    )\n  }\n}\nexport default new IncomingSupplyApiService()\n","import { SET_MESSAGE } from \"src/constants/userConstants\"\nimport {\n  GET_INCOMING_SUPPLIES,\n  GET_INCOMING_SUPPLIES_BY_DELIVERED_STATUS,\n  GET_INCOMING_SUPPLIES_BY_PENDING_STATUS,\n  GET_INCOMING_SUPPLY,\n  MARK_INCOMING_SUPPLY_AS_DELIVERED,\n  SAVE_INCOMING_SUPPLY,\n  UPDATE_INCOMING_SUPPLY,\n} from \"src/service/redux/constants\"\nimport IncomingSupplyApiService from \"src/service/restAPI/IncomingSupplyApiService\"\n\nexport const getIncomingSupplies =\n  (query, status, page, limit) => async (dispatch) => {\n    return IncomingSupplyApiService.getIncomingSupplies(\n      query,\n      status,\n      page,\n      limit,\n    ).then(\n      (response) => {\n        dispatch({\n          type: GET_INCOMING_SUPPLIES,\n          payload: {\n            action: GET_INCOMING_SUPPLIES,\n            status: 200,\n            data: {\n              incomingSupplies: response.data,\n            },\n          },\n        })\n        return Promise.resolve()\n      },\n      (error) => {\n        const errorMessage =\n          (error.response &&\n            error.response.data &&\n            error.response.data.message) ||\n          error.message ||\n          error.toString()\n\n        const status =\n          (error.response && error.response.data && error.response.data.code) ||\n          error.toString()\n\n        dispatch({\n          type: SET_MESSAGE,\n          payload: {\n            status: status,\n            data: {\n              message: errorMessage,\n            },\n          },\n        })\n        return Promise.reject()\n      },\n    )\n  }\nexport const getIncomingSupply = (id) => async (dispatch) => {\n  return IncomingSupplyApiService.getIncomingSupply(id).then(\n    (response) => {\n      dispatch({\n        type: GET_INCOMING_SUPPLY,\n        payload: {\n          action: GET_INCOMING_SUPPLY,\n          status: 200,\n          data: {\n            incomingSupply: response.data,\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      const errorMessage =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: errorMessage,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\n\nexport const saveIncomingSupply =\n  (incomingSupplies, supplierId) => async (dispatch) => {\n    return IncomingSupplyApiService.saveIncomingSupply(\n      incomingSupplies,\n      supplierId,\n    ).then(\n      (response) => {\n        dispatch({\n          type: SAVE_INCOMING_SUPPLY,\n          payload: {\n            status: 200,\n            action: SAVE_INCOMING_SUPPLY,\n            data: {},\n          },\n        })\n        dispatch({\n          type: SET_MESSAGE,\n          payload: {\n            status: 200,\n            data: {\n              message: \"Successfully Saved\",\n            },\n          },\n        })\n        return Promise.resolve()\n      },\n      (error) => {\n        const errorMessage =\n          (error.response &&\n            error.response.data &&\n            error.response.data.message) ||\n          error.message ||\n          error.toString()\n\n        const status =\n          (error.response && error.response.data && error.response.data.code) ||\n          error.toString()\n\n        dispatch({\n          type: SET_MESSAGE,\n          payload: {\n            status: status,\n            data: {\n              message: errorMessage,\n            },\n          },\n        })\n        return Promise.reject()\n      },\n    )\n  }\nexport const markIncomingSuppliesAsDelivered = (id) => async (dispatch) => {\n  return IncomingSupplyApiService.markIncomingSuppliesAsDelivered(id).then(\n    (response) => {\n      dispatch({\n        type: MARK_INCOMING_SUPPLY_AS_DELIVERED,\n        payload: {\n          status: 200,\n          action: MARK_INCOMING_SUPPLY_AS_DELIVERED,\n          data: {},\n        },\n      })\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: 200,\n          data: {\n            message: \"Incoming Supply Items has been Delivered.\",\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      const errorMessage =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: errorMessage,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\nexport const updateIncomingSupplyItems = (id, incomingSupplyItems, supplier, removedIncomingSupplyItems) => async (dispatch) => {\n  return IncomingSupplyApiService.updateIncomingSuppleis(id, incomingSupplyItems, supplier, removedIncomingSupplyItems)\n    .then(\n      (response) => {\n        dispatch({\n          type: UPDATE_INCOMING_SUPPLY,\n          payload: {\n            status: 200,\n            action: UPDATE_INCOMING_SUPPLY,\n            data: {}\n          }\n        })\n        dispatch({\n          type: SET_MESSAGE,\n          payload: {\n            status: 200,\n            data: {\n              message: \"Incoming Supply Items has been Updated.\",\n            },\n          },\n        })\n        return Promise.resolve()\n      },\n      (error) => {\n        const errorMessage =\n          (error.response &&\n            error.response.data &&\n            error.response.data.message) ||\n          error.message ||\n          error.toString()\n\n        const status =\n          (error.response && error.response.data && error.response.data.code) ||\n          error.toString()\n\n        dispatch({\n          type: SET_MESSAGE,\n          payload: {\n            status: status,\n            data: {\n              message: errorMessage,\n            },\n          },\n        })\n        return Promise.reject()\n      }\n    )\n}","import React, { Component } from \"react\"\nimport {\n  CModal,\n  CModalHeader,\n  CModalBody,\n  CModalFooter,\n  CButton,\n  CModalTitle,\n  CSpinner,\n  CForm,\n  CTable,\n  CTableHead,\n  CTableRow,\n  CTableHeaderCell,\n  CTableDataCell,\n  CTableBody,\n  CTableCaption,\n  CRow,\n  CCol,\n  CFormControl,\n  CContainer,\n  CCallout,\n} from \"@coreui/react\"\nimport { BsDash, BsPlus } from \"react-icons/bs\";\n\nimport Barcode from \"react-barcode\"\n//action\nimport { clearMessage } from \"src/service/apiActions/messageAction/messageAction\"\n\nimport { setSupplyModal } from \"src/service/apiActions/modalAction/modalAction\"\nimport { getSuppliers } from \"src/service/apiActions/supplierAction/supplierAction\"\nimport {\n  saveIncomingSupply,\n  updateIncomingSupplyItems,\n} from \"src/service/apiActions/incomingSupplyAction/incomingSupplyAction\"\nimport { searchProductByBarcodeOrName } from \"src/service/apiActions/productAction/productAction\"\nimport ReactSearchAutocomplete from \"react-search-autocomplete/dist/components/ReactSearchAutocomplete\"\nimport BarcodeScannerComponent from \"react-qr-barcode-scanner\"\n//icons\nimport * as MdIcons from \"react-icons/md\"\nimport * as FaIcons from \"react-icons/fa\"\nimport * as BiIcons from \"react-icons/bi\"\nimport * as GrIcons from \"react-icons/gr\"\nimport { connect } from \"react-redux\"\nexport class SupplyModal extends Component {\n  state = {\n    loading: false,\n    visible: false,\n    icon: \"\",\n    action: \"\",\n    supplier: [],\n    visible: false,\n    query: \"\",\n    page: 0,\n    limit: 10,\n    message: \"\",\n\n    product: [],\n    productItems: [],\n    supplierItems: [],\n    supplierSelected: false,\n    items: [],\n    showScanner: false,\n    supplierErrorMessage: \"\",\n    incomingSupplyMessage: \"\",\n    id: \"\",\n    removedProductItems: [],\n    supplierId: -1,\n  }\n\n  componentDidMount() {\n    const { query, page, limit } = this.state\n    this.getSuppliers(query, page, limit)\n    this.searchProduct(query, page, limit)\n  }\n  getSuppliers = () => {\n    const { query, page, limit } = this.state\n\n    this.props.getSuppliers(query, page, limit)\n  }\n\n  searchProduct(query, page, limit) {\n    this.props.searchProductByBarcodeOrName(query, page, 5)\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    this.manageSupplyModal(prevProps, prevState)\n    this.manageSupplierResponse(prevProps, prevState)\n    this.manageProductResponse(prevProps, prevState)\n  }\n\n  manageSupplyModal = (prevProps, prevState) => {\n    if (prevProps.modalVisible !== this.props.modalVisible) {\n      let { visible, action, icon, supply } = this.props.modalVisible\n      if (action === \"Add\") {\n        this.setState({\n          visible: visible,\n          action: action,\n          icon: icon,\n        })\n        this.getSuppliers()\n      } else if (action === \"Edit\") {\n        this.setState({\n          visible: visible,\n          action: action,\n          icon: icon,\n          productItems: supply.incomingSupplyItems,\n          supplier: supply.supplier,\n          supplierSelected: true,\n          id: supply.id,\n        })\n      } else if (action === \"close\") {\n        this.setState({\n          visible: visible,\n          action: \"\",\n          icon: \"\",\n          supplier: [],\n          productItems: [],\n          supplierItems: [],\n          supplierSelected: false,\n          removedProductItems: [],\n        })\n      }\n    }\n  }\n  manageSupplierResponse = (prevProps, prevState) => {\n    if (prevProps.supplierResponse !== this.props.supplierResponse) {\n      let { status, action, data } = this.props.supplierResponse\n      if (action === \"GET_SUPPLIERS\" && status === 200) {\n        this.setState({\n          supplierItems: data.suppliers.data,\n        })\n        if (this.state.supplierSelected) {\n          this.setState({\n            supplier: data.suppliers.data,\n            supplierId: data.suppliers.data.id,\n          })\n        }\n      }\n    }\n  }\n  manageProductResponse = (prevProps, prevState) => {\n    const { showScanner } = this.state\n    if (prevProps.productResponse !== this.props.productResponse) {\n      let { action, status, data } = this.props.productResponse\n      if (action === \"SEARCH_PRODUCT\" && status === 200) {\n        this.setState({\n          items: data.products.data,\n          product: data.products.data,\n        })\n        if (showScanner) {\n          data.products.data.map((product, index) => {\n            this.handleTempProductItem(index, product)\n          })\n        }\n      }\n    }\n  }\n\n  handleTempProductItem = (index, item) => {\n    let { product } = this.state\n    const productItems = this.state.productItems.slice(0)\n    let find = productItems.findIndex((product) => {\n      return product.product.id === item.id\n    })\n\n    if (find > -1) {\n      let getProduct = productItems[find]\n      getProduct.numberReceived++\n    } else {\n      let item = {\n        numberReceived: 1,\n        product: {\n          id: product[index].id,\n          productName: product[index].productName,\n          barcode: product[index].barcode,\n        },\n      }\n      productItems.push(item)\n    }\n    this.setState({\n      productItems: productItems,\n    })\n  }\n  handleRemoveTempProductItem = (index, item) => {\n    const { action, removedProductItems, productItems } = this.state\n    if (action === \"Edit\") {\n      const removed = removedProductItems.slice(0)\n      removed.push(item)\n      this.setState({\n        removedProductItems: removed,\n      })\n    }\n    productItems.splice(index, 1)\n    this.setState({\n      productItems: productItems,\n    })\n  }\n  handleOnChange = (index, event) => {\n    const { productItems } = this.state\n    let product = productItems[index]\n    product.numberReceived++\n    this.setState({\n      productItems: productItems,\n    })\n  }\n  handleSupplierOnSearch = (string, results) => {\n    const { page, limit } = this.state\n    this.setState({\n      supplierSelected: false,\n    })\n    this.props.getSuppliers(string, page, limit).catch(() => {\n      let { status, data } = this.props.messageResponse\n      if (status > 400 && status <= 403) {\n        this.props.logout()\n        this.props.clearMessage()\n      }\n      this.setState({\n        message: data.message,\n      })\n    })\n  }\n\n  handleSupplierOnSelect = (item) => {\n    const { page, limit } = this.state\n    this.setState({\n      supplierSelected: true,\n    })\n    this.props.getSuppliers(item.name, page, limit).catch(() => {\n      let { status, data } = this.props.messageResponse\n      if (status > 400 && status <= 403) {\n        this.props.logout()\n        this.props.clearMessage()\n      }\n      this.setState({\n        message: data.message,\n      })\n    })\n  }\n  handleProductOnSelect = (item) => {\n    const { page, limit } = this.state\n\n    this.searchProduct(item.productName, page, limit)\n  }\n  handleSupplierOnClear = () => {\n    this.setState({ supplier: [], supplierSelected: false })\n  }\n  handleProductOnClear = () => {\n    const { action, page, limit } = this.state\n\n    this.searchProduct(\"\", page, limit)\n  }\n  handleOnSeachProduct = (string, results) => {\n    const { page, limit } = this.state\n\n    this.searchProduct(string, page, limit)\n  }\n  handleDecodeBarcode = (decoded) => {\n    const { page, limit } = this.state\n    if (decoded) {\n      this.searchProduct(decoded, page, limit)\n    }\n  }\n  handleOnSubmit = (event) => {\n    event.preventDefault()\n    const { action } = this.state\n    this.setState({\n      loading: true,\n    })\n    if (action === \"Add\") {\n      this.handleOnSave()\n    } else if (action === \"Edit\") {\n      this.handleOnUpdate()\n    }\n  }\n  handleOnSave = () => {\n    const { supplierId, supplier, productItems } = this.state\n    // console.log(supplier[0])\n    // const supplierId = supplier && supplier[0]\n    if (productItems.length > 0) {\n      console.log(supplierId)\n\n      this.props\n        .saveIncomingSupply(productItems, supplierId)\n        .then(() => {\n          let { status, data } = this.props.messageResponse\n          if (status > 400 && status <= 403) {\n            this.props.logout()\n            this.props.clearMessage()\n          }\n          this.props.setSupplyModal(false, \"close\", \"\", \"\")\n          this.setState({\n            loading: false,\n          })\n        })\n        .catch(() => {\n          let { status, data } = this.props.messageResponse\n          if (status > 400 && status <= 403) {\n            setInterval(() => {\n              this.props.logout()\n              this.props.clearMessage()\n            }, 1000)\n          } else {\n            this.setState({\n              loading: false,\n              validation: false,\n            })\n          }\n        })\n    } else {\n      if (productItems.length === 0) {\n        this.setState({\n          incomingSupplyMessage: \"Please Add Products.\",\n        })\n      }\n    }\n  }\n  handleOnUpdate = () => {\n    const { productItems, supplier, id, removedProductItems } = this.state\n\n    this.props\n      .updateIncomingSupplyItems(\n        id,\n        productItems,\n        supplier,\n        removedProductItems,\n      )\n      .then(() => {\n        let { status, data } = this.props.messageResponse\n        if (status > 400 && status <= 403) {\n          this.props.logout()\n          this.props.clearMessage()\n        }\n        this.props.setSupplyModal(false, \"close\", \"\", \"\")\n        this.setState({\n          loading: false,\n        })\n      })\n      .catch(() => {\n        let { status, data } = this.props.messageResponse\n\n        if (status > 400 && status <= 403) {\n          setInterval(() => {\n            this.props.clearMessage()\n          }, 1000)\n        } else {\n          this.setState({\n            loading: false,\n            validation: false,\n          })\n        }\n      })\n  }\n  incrementValue = (index) => {\n    const { productItems } = this.state\n    productItems[index].numberReceived++\n    this.setState({\n      productItems: productItems\n    })\n  }\n\n  decrementValue = (index) => {\n    const { productItems } = this.state\n    productItems[index].numberReceived--\n    this.setState({\n      productItems: productItems\n    })\n  }\n  handleQuantityOnChange = (event) => {\n    event.preventDefault();\n\n    let { value, max, min } = event.target;\n    value = Math.max(Number(min), Math.min(Number(max), Number(value)));\n  }\n  render() {\n    let {\n      loading,\n      visible,\n      action,\n      icon,\n      message,\n      product,\n      productItems,\n      supplierItems,\n      supplier,\n      supplierSelected,\n      items,\n      showScanner,\n      incomingSupplyMessage,\n      supplierErrorMessage,\n      removedProductItems,\n    } = this.state\n    return (\n      <div>\n        <CModal visible={visible} size=\"xl\" scrollable>\n          <CModalHeader\n            onDismiss={() => {\n              this.props.setSupplyModal(false, \"close\", \"\", \"\")\n              this.props.clearMessage()\n            }}\n          >\n            <CModalTitle>\n              <div className=\"d-flex align-items-center\">\n                {icon}\n                {action + \" Supplies\"}\n              </div>\n            </CModalTitle>\n          </CModalHeader>\n          <CModalBody>\n            <CForm id=\"supply-form\" onSubmit={this.handleOnSubmit}>\n              <CRow>\n                <CCol sm=\"12\" md=\"12\" lg=\"6\">\n                  <CContainer className=\"\">\n                    <ReactSearchAutocomplete\n                      items={supplierItems}\n                      onSearch={this.handleSupplierOnSearch}\n                      onSelect={this.handleSupplierOnSelect}\n                      onClear={this.handleSupplierOnClear}\n                      fuseOptions={{ keys: [\"name\"] }}\n                      resultStringKeyName=\"name\"\n                      placeholder=\"Search Supplier\"\n                      className=\"search-bar\"\n                      autoFocus\n                      styling={{\n                        boxShadow: \"none\",\n                        fontSize: \"16px\",\n                        zIndex: 999,\n                        padding: \"16px 24px\",\n                        height: \"50px\",\n                        border: \" 1px solid #b1b7c1\",\n                        fontWiegth: \"500\",\n                        placeholderColor: \"Black\",\n                        width: \"100%\",\n                      }}\n                    />\n                  </CContainer>\n                  <CContainer className=\"mt-4\">\n                    <CCallout color=\"info\">\n                      <>\n                        {action === \"Edit\" ? (\n                          <>\n                            <h4>Supplier Name</h4>\n                            <h5>{supplier && supplier.name}</h5>\n                          </>\n                        ) : (\n                          <>\n                            <h4>Supplier Name</h4>\n                            {supplier &&\n                              supplier.map((item, index) => {\n                                return <h5 key={item.id}>{item.name}</h5>\n                              })}\n                          </>\n                        )}\n                      </>\n                    </CCallout>\n                  </CContainer>\n                </CCol>\n                <CCol sm=\"12\" md=\"12\" lg=\"6\">\n                  <CRow className=\"align-items-center\">\n                    <CCol\n                      sm=\"10\"\n                      md=\"10\"\n                      lg=\"10\"\n                      className={showScanner ? \"d-none\" : \"d-block\"}\n                    >\n                      <ReactSearchAutocomplete\n                        items={items}\n                        onSearch={this.handleOnSeachProduct}\n                        onSelect={this.handleProductOnSelect}\n                        onClear={this.handleProductOnClear}\n                        fuseOptions={{ keys: [\"productName\", \"barcode\"] }}\n                        resultStringKeyName=\"productName\"\n                        placeholder=\"Search Product\"\n                        className=\"search-bar\"\n                        autoFocus\n                        styling={{\n                          boxShadow: \"none\",\n                          fontSize: \"16px\",\n                          zIndex: 999,\n                          padding: \"16px 24px\",\n                          height: \"50px\",\n                          border: \" 1px solid #b1b7c1\",\n                          fontWiegth: \"500\",\n                          placeholderColor: \"Black\",\n                          width: \"100%\",\n                        }}\n                      />\n                    </CCol>\n                    <CCol sm=\"1\" md=\"1\" lg=\"1\" className=\"p-0\">\n                      <div className=\"text-center\">\n                        <CButton\n                          className=\"pt-2 pb-2 \"\n                          type=\"button\"\n                          color={showScanner ? \"danger\" : \"info\"}\n                          variant=\"outline\"\n                          id=\"btn-scan-barcode\"\n                          onClick={() =>\n                            this.setState({\n                              showScanner: !showScanner,\n                              // stopStreaming: !stopStreaming,\n                            })\n                          }\n                        >\n                          {showScanner ? (\n                            <GrIcons.GrClose size=\"24\" />\n                          ) : (\n                            <BiIcons.BiBarcodeReader size=\"24\" />\n                          )}\n                        </CButton>\n                      </div>\n                    </CCol>\n                  </CRow>\n                  <div className=\"mb-4 mt-4\">\n                    <CTable\n                      striped\n                      hover\n                      className={showScanner ? \"d-none\" : \"shadow-sm\"}\n                      responsive=\"md\"\n                      align=\"middle\"\n                    >\n                      <CTableBody>\n                        {product.map((item, index) => {\n                          return (\n                            <CTableRow key={item.id} className=\"text-center\">\n                              <CTableDataCell>\n                                {item.productName}\n                              </CTableDataCell>\n                              <CTableDataCell>{item.barcode}</CTableDataCell>\n                              <CTableDataCell>\n                                <CButton\n                                  variant=\"ghost\"\n                                  color=\"info\"\n                                  onClick={() =>\n                                    this.handleTempProductItem(index, item)\n                                  }\n                                >\n                                  <FaIcons.FaPlusCircle />\n                                </CButton>\n                              </CTableDataCell>\n                            </CTableRow>\n                          )\n                        })}\n                      </CTableBody>\n                    </CTable>\n                    <div className={showScanner ? \"  d-block mt-3\" : \" d-none\"}>\n                      {showScanner ? (\n                        <>\n                          <BarcodeScannerComponent\n                            delay={500}\n                            facingMode\n                            // stopStream={stopStreaming}\n                            torch=\"true\"\n                            onUpdate={(err, result) => {\n                              if (result) this.handleDecodeBarcode(result.text)\n                            }}\n                          />\n                        </>\n                      ) : (\n                        <></>\n                      )}\n                    </div>\n                  </div>\n                </CCol>\n              </CRow>\n              <CTable\n                striped\n                hover\n                className=\"shadow-sm \"\n                responsive=\"md\"\n                bordered\n                align=\"middle\"\n              >\n                <CTableCaption>\n                  List of Brand: <b>{productItems.length}</b>\n                </CTableCaption>\n                <CTableHead color=\"dark\">\n                  <CTableRow className=\"text-center\">\n                    <CTableHeaderCell scope=\"col\">\n                      Product Name\n                    </CTableHeaderCell>\n                    <CTableHeaderCell scope=\"col\">\n                      Product Barcode\n                    </CTableHeaderCell>\n                    <CTableHeaderCell scope=\"col\">\n                      Quantity Recieved\n                    </CTableHeaderCell>\n                    <CTableHeaderCell scope=\"col\">Actions</CTableHeaderCell>\n                  </CTableRow>\n                </CTableHead>\n                <CTableBody className=\"text-center\" color=\"light\">\n                  {productItems.length > 0 ? (\n                    productItems.map((productItem, index) => {\n                      return (\n                        <CTableRow className=\"text-center\" key={index}>\n                          <CTableDataCell>\n                            {productItem.product.name\n                              ? productItem.product.name\n                              : productItem.product.productName}\n                          </CTableDataCell>\n                          <CTableDataCell>\n                            <Barcode\n                              value={String(productItem.product.barcode)}\n                              height={50}\n                              width={1}\n                              fontSize={14}\n                              margin={7}\n                              background=\"#f5f5f548\"\n                            />\n                          </CTableDataCell>\n                          <CTableDataCell className=\"text-center\" >\n                            <div className=\"quantity-container\">\n                              <CButton\n                                className=\"decrement-btn\"\n                                type=\"button\"\n                                disabled={productItem.numberReceived === 1 ? true : false}\n                                onClick={() => this.decrementValue(index)}\n                              >\n                                <BsDash />\n\n                              </CButton>\n                              <input\n                                type=\"text\"\n                                className=\"input-quantity\"\n                                value={productItem.numberReceived}\n                                pattern=\"[0-9]*\"\n                                onChange={this.handleQuantityOnChange}\n                                // max={status === \"ONGOING\" ? promo.quantity : inventory.totalStock}\n                                min={1}\n                                readOnly={true}\n\n                              />\n                              <CButton className=\"increment-btn\"\n                                // disabled={quantity === maxQuantity ? true : maxQuantity <= 0 ? true : false}\n                                onClick={() => this.incrementValue(index)}\n                              >\n                                <BsPlus />\n                              </CButton>\n                            </div>\n                          </CTableDataCell>\n                          <CTableDataCell>\n                            <CButton\n                              variant=\"ghost\"\n                              color=\"danger\"\n                              onClick={() =>\n                                this.handleRemoveTempProductItem(\n                                  index,\n                                  productItem,\n                                )\n                              }\n                            >\n                              <MdIcons.MdDelete size={20} />\n                            </CButton>\n                          </CTableDataCell>\n                        </CTableRow>\n                      )\n                    })\n                  ) : (\n                    <>\n                      {incomingSupplyMessage && (\n                        <CTableRow className=\"text-center\">\n                          <CTableDataCell colSpan=\"4\">\n                            <div className=\"alert alert-danger\" role=\"alert\">\n                              {incomingSupplyMessage}\n                            </div>\n                          </CTableDataCell>\n                        </CTableRow>\n                      )}\n                    </>\n                  )}\n                  {message && (\n                    <CTableRow className=\"text-center\">\n                      <CTableDataCell colSpan=\"4\">\n                        <div className=\"alert alert-danger\" role=\"alert\">\n                          {message}\n                        </div>\n                      </CTableDataCell>\n                    </CTableRow>\n                  )}\n                </CTableBody>\n              </CTable>\n            </CForm>\n          </CModalBody>\n          <CModalFooter>\n            <CButton\n              color=\"dark\"\n              variant=\"ghost\"\n              onClick={() => {\n                this.props.setSupplyModal(false, \"close\", \"\", \"\")\n                this.props.clearMessage()\n              }}\n            >\n              Close\n            </CButton>\n            <CButton\n              type=\"submit\"\n              color=\"primary\"\n              disabled={loading}\n              form=\"supply-form\"\n            >\n              {loading && <CSpinner size=\"sm\" className=\"ms-1\" />}\n              {/* {action === \"Edit\" ? \"Update\" : \"Create\"} Supplier */}\n              Save Incoming Supply\n            </CButton>\n          </CModalFooter>\n        </CModal>\n      </div>\n    )\n  }\n}\nconst mapStateToProps = (state) => {\n  return {\n    modalVisible: state.modalVisibleResponse,\n    messageResponse: state.messageResponse,\n    supplierResponse: state.supplierResponse,\n    productResponse: state.productResponser,\n  }\n}\nexport default connect(mapStateToProps, {\n  clearMessage,\n  setSupplyModal,\n  getSuppliers,\n  searchProductByBarcodeOrName,\n  saveIncomingSupply,\n  updateIncomingSupplyItems,\n})(SupplyModal)\n","import React, { Component, Suspense } from \"react\"\nimport {\n  CNav,\n  CNavItem,\n  CNavLink,\n  CTabContent,\n  CTabPane,\n  CButton,\n  CForm,\n  CInputGroup,\n  CFormControl,\n  CBadge,\n} from \"@coreui/react\"\nimport { DotLoader } from \"react-spinners\"\nimport * as FaIcons from \"react-icons/fa\"\nimport { connect } from \"react-redux\"\n//action\nimport { clearMessage } from \"src/service/apiActions/messageAction/messageAction\"\nimport { getIncomingSupplies } from \"src/service/apiActions/incomingSupplyAction/incomingSupplyAction\"\nimport { setSupplyModal } from \"src/service/apiActions/modalAction/modalAction\"\n//mdoal\nimport SupplyModal from \"src/components/modals/supply/SupplyModal\"\nconst IncomingSupplies = React.lazy(() =>\n  import(\"src/components/incomingSupplyTabContent/IncomingSupplies\"),\n)\n\nexport class IncomingSuppliesController extends Component {\n  state = {\n    message: \"\",\n    activeKey: 1,\n    visible: false,\n    incomingSupplies: {\n      data: [],\n      totalPages: 0,\n    },\n    status: \"PENDING\",\n    totalCounts: {\n      PENDING: 0,\n      DELIVERED: 0,\n    },\n  }\n  componentDidUpdate(prevProps, prevState) {\n    this.manageIncomingSupplies(prevProps, prevState)\n  }\n  manageIncomingSupplies = (prevProps, prevState) => {\n    if (\n      prevProps.incomingSupplyResponse !== this.props.incomingSupplyResponse\n    ) {\n      let { action, status, data } = this.props.incomingSupplyResponse\n      if (action === \"GET_INCOMING_SUPPLIES\" && status === 200) {\n        this.setState({\n          totalCounts: data.incomingSupplies.totalCounts,\n        })\n      }\n    }\n  }\n\n  totalCountChange = (totalCounts) => {\n    this.setState({\n      totalCounts: totalCounts,\n    })\n  }\n  render() {\n    let { activeKey, visible, totalCounts, status } =\n      this.state\n    const tabStyle = {\n      margin: \"10px 0\",\n      padding: \"12px 16px\",\n      overflow: \"hidden\",\n    }\n    return (\n      <>\n        <SupplyModal />\n        <div className=\"d-flex justify-content-between mb-4\">\n          <CButton\n            shape=\"rounded-pill\"\n            color=\"primary\"\n            variant=\"ghost\"\n            className=\"d-flex justify-content-center align-items-center\"\n            onClick={() =>\n              this.props.setSupplyModal(\n                !visible,\n                \"Add\",\n                \"\",\n                <FaIcons.FaPlus size={20} />,\n              )\n            }\n          >\n            <FaIcons.FaPlus size={20} />\n            <span style={{ marginLeft: \"10px\" }}>Add Incoming Supply</span>\n          </CButton>\n        </div>\n        <CNav\n          variant=\"pills\"\n          role=\"tablist\"\n          layout=\"fill\"\n\n        // className=\"flex-column flex-sm-row\"\n        >\n          <CNavItem>\n            <CNavLink\n              href=\"#pending\"\n              active={activeKey === 1}\n              onClick={() => {\n                this.setState({ activeKey: 1, status: \"PENDING\" })\n              }}\n            >\n              Pending Supplies{\" \"}\n              <CBadge color=\"warning\" className=\"ms-2\">\n                {totalCounts.PENDING ? totalCounts.PENDING : 0}\n              </CBadge>\n            </CNavLink>\n          </CNavItem>\n          <CNavItem>\n            <CNavLink\n              href=\"#delivered\"\n              active={activeKey === 2}\n              onClick={() => {\n                this.setState({ activeKey: 2, status: \"DELIVERED\" })\n              }}\n            >\n              Delivered Supplies\n              <CBadge color=\"warning\" className=\"ms-2\">\n                {totalCounts.DELIVERED ? totalCounts.DELIVERED : 0}\n              </CBadge>\n            </CNavLink>\n          </CNavItem>\n        </CNav>\n        <CTabContent style={tabStyle}>\n          <CTabPane role=\"tabpanel\" aria-labelledby=\"ship-tab\" visible={true}>\n            <Suspense\n              fallback={\n                <div className=\"d-flex justify-content-center align-items-center  position-fixed spinner\">\n                  <DotLoader color=\"#36D7B7\" size={100} />\n                </div>\n              }\n            >\n              <IncomingSupplies\n                status={status}\n                key={status}\n                totalCounts={totalCounts}\n                totalCountChange={this.totalCountChange}\n              />\n            </Suspense>\n          </CTabPane>\n        </CTabContent>\n      </>\n    )\n  }\n}\nconst mapStateToProps = (state) => {\n  return {\n    incomingSupplyResponse: state.incomingSupplyResponse,\n    messageResponse: state.messageResponse,\n  }\n}\nexport default connect(mapStateToProps, {\n  getIncomingSupplies,\n  clearMessage,\n  setSupplyModal,\n})(IncomingSuppliesController)\n"],"sourceRoot":""}