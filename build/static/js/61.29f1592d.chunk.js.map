{"version":3,"sources":["service/restAPI/DashboardApiService.js","service/apiActions/dashboardAction/dashboardAction.js","views/private/reports/ProductReport.js"],"names":["getTotals","axios","get","headers","authHeader","getTotalRevenues","year","params","getProductsAndCountTatolSold","query","page","limit","async","DashboardApiService","then","response","dispatch","type","GET_TOTALS","payload","status","action","data","summaries","Promise","resolve","error","errorMessage","message","toString","code","SET_MESSAGE","reject","GET_TOTAL_REVENUES","revenue","GET_PRODUCTS_COUNT_TOTAL_SOLD","products","ProductReport","Component","state","productsTotalSold","totalPages","this","props","manageDashboardResponse","prevPros","prevState","dashboardResponse","setState","handlePageClick","selected","handleSearch","event","target","value","componentDidMount","componentDidUpdate","prevProps","render","console","log","className","onSubmit","handleOnSubmitSearch","id","placeholder","onChange","form","color","variant","trigger","size","content","componentRef","striped","hover","responsive","bordered","align","ref","el","totalItems","scope","length","map","product","index","String","barcode","height","width","fontSize","margin","background","productName","productPrice","toFixed","totalSold","shape","colSpan","previousLabel","nextLabel","breakLabel","breakClassName","pageCount","marginPagesDisplayed","pageRangeDisplayed","onPageChange","containerClassName","activeClassName","connect"],"mappings":"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","file":"static/js/61.29f1592d.chunk.js","sourcesContent":["import axios from \"./RestApi\"\nimport authHeader from \"../auth/authHeader\"\nexport class DashboardApiService {\n  getTotals() {\n    return axios.get(\"/summaries\", {\n      headers: authHeader(),\n    })\n  }\n  getTotalRevenues(year) {\n    return axios.get(\"/revenue\", {\n      headers: authHeader(),\n      params: {\n        year: year,\n      },\n    })\n  }\n  getProductsAndCountTatolSold(query, page, limit) {\n    return axios.get(\"/summaries/products/sold\", {\n      headers: authHeader(),\n      params: {\n        query: query,\n        page: page,\n        limit: limit,\n      },\n    })\n  }\n}\nexport default new DashboardApiService()\n","import { SET_MESSAGE } from \"src/constants/userConstants\"\nimport {\n  GET_PRODUCTS_COUNT_TOTAL_SOLD,\n  GET_TOTALS,\n  GET_TOTAL_REVENUES,\n} from \"src/service/redux/constants\"\nimport DashboardApiService from \"src/service/restAPI/DashboardApiService\"\n\nexport const getTotals = () => async (dispatch) => {\n  return DashboardApiService.getTotals().then(\n    (response) => {\n      dispatch({\n        type: GET_TOTALS,\n        payload: {\n          status: 200,\n          action: GET_TOTALS,\n          data: {\n            summaries: response.data,\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      const errorMessage =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: errorMessage,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\n\nexport const getTotalRevenues = (year) => async (dispatch) => {\n  return DashboardApiService.getTotalRevenues(year).then(\n    (response) => {\n      dispatch({\n        type: GET_TOTAL_REVENUES,\n        payload: {\n          status: 200,\n          action: GET_TOTAL_REVENUES,\n          data: {\n            revenue: response.data,\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      const errorMessage =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: errorMessage,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\nexport const getProductsAndCountTatolSold =\n  (query, page, limit) => async (dispatch) => {\n    return DashboardApiService.getProductsAndCountTatolSold(\n      query,\n      page,\n      limit,\n    ).then(\n      (response) => {\n        dispatch({\n          type: GET_PRODUCTS_COUNT_TOTAL_SOLD,\n          payload: {\n            status: 200,\n            action: GET_PRODUCTS_COUNT_TOTAL_SOLD,\n            data: {\n              products: response.data,\n            },\n          },\n        })\n      },\n      (error) => {\n        const errorMessage =\n          (error.response &&\n            error.response.data &&\n            error.response.data.message) ||\n          error.message ||\n          error.toString()\n\n        const status =\n          (error.response && error.response.data && error.response.data.code) ||\n          error.toString()\n\n        dispatch({\n          type: SET_MESSAGE,\n          payload: {\n            status: status,\n            data: {\n              message: errorMessage,\n            },\n          },\n        })\n        return Promise.reject()\n      },\n    )\n  }\n","import React, { Component } from \"react\"\nimport {\n  CTable,\n  CTableHead,\n  CTableRow,\n  CTableHeaderCell,\n  CTableDataCell,\n  CTableBody,\n  CTableCaption,\n  CBadge,\n  CForm,\n  CInputGroup,\n  CFormControl,\n  CButton,\n  CCardTitle,\n  // CCard,\n  // CCardBody,\n  // CCardHeader,\n  // CCol,\n  // CRow,\n  // CButtonGroup,\n} from \"@coreui/react\"\nimport * as FaIcons from \"react-icons/fa\"\nimport * as IoIcons from \"react-icons/io5\"\n\nimport { connect } from \"react-redux\"\nimport { getProductsAndCountTatolSold } from \"src/service/apiActions/dashboardAction/dashboardAction\"\nimport ReactToPrint from \"react-to-print\"\nimport Barcode from \"react-barcode\"\nimport ReactPaginate from \"react-paginate\"\n\nexport class ProductReport extends Component {\n  state = {\n    productsTotalSold: {\n      data: [],\n      totalPages: 0,\n    },\n    page: 0,\n    limit: 10,\n    query: \"\",\n  }\n  componentDidMount() {\n    const { page, limit, query } = this.state\n\n    this.getProductsAndCountTatolSold(query, page, limit)\n  }\n  getProductsAndCountTatolSold = (query, page, limit) => {\n    this.props.getProductsAndCountTatolSold(query, page, limit)\n  }\n  componentDidUpdate(prevProps, prevState) {\n    this.manageDashboardResponse(prevProps, prevState)\n  }\n  manageDashboardResponse = (prevPros, prevState) => {\n    if (prevPros.dashboardResponse !== this.props.dashboardResponse) {\n      const { status, action, data } = this.props.dashboardResponse\n      if (status === 200 && action === \"GET_PRODUCTS_COUNT_TOTAL_SOLD\") {\n        this.setState({\n          productsTotalSold: data.products,\n        })\n      }\n    }\n  }\n  handlePageClick = (data) => {\n    let page = data.selected\n    this.setState({ page: page })\n    const { limit, query, status } = this.state\n    this.getProductsAndCountTatolSold(query, page, limit)\n  }\n  handleSearch = (event) => {\n    const { page, limit, status } = this.state\n    this.getProductsAndCountTatolSold(event.target.value, page, limit)\n    this.setState({ query: event.target.value })\n  }\n  render() {\n    const { productsTotalSold } = this.state\n    console.log(productsTotalSold)\n    return (\n      <>\n        <>\n          <div className=\"w-100 d-flex justify-content-end align-items-center\">\n            <div className=\"w-100\">\n              <CCardTitle>Total Sold per Product</CCardTitle>\n            </div>\n            <CForm\n              onSubmit={this.handleOnSubmitSearch}\n              id=\"search-form\"\n              className=\"w-75\"\n            >\n              <CInputGroup>\n                <CFormControl\n                  type=\"text\"\n                  id=\"floatingInput\"\n                  placeholder=\"Search\"\n                  className=\"p-2\"\n                  value={this.state.query}\n                  onChange={this.handleSearch}\n                />\n                <CButton\n                  form=\"search-form\"\n                  type=\"submit\"\n                  color=\"info\"\n                  variant=\"outline\"\n                  id=\"btn-search\"\n                  className=\"\"\n                >\n                  <FaIcons.FaSearch />\n                </CButton>\n              </CInputGroup>\n            </CForm>\n            <div className=\"d-lg-flex align-items-end flex-row-reverse m-2 d-none\">\n              <ReactToPrint\n                trigger={() => (\n                  <CButton\n                    type=\"button\"\n                    variant=\"outline\"\n                    color=\"info\"\n                    className=\" pt-2 pb-2 \"\n                  >\n                    <IoIcons.IoPrintOutline size={20} />\n                  </CButton>\n                )}\n                content={() => this.componentRef}\n              />\n            </div>\n          </div>\n        </>\n        <CTable\n          striped\n          hover\n          className=\"shadow-sm \"\n          responsive\n          bordered\n          align=\"middle\"\n          ref={(el) => (this.componentRef = el)}\n        >\n          <CTableCaption>\n            List of Products: <b>{productsTotalSold.totalItems}</b>\n          </CTableCaption>\n\n          <CTableHead color=\"dark\">\n            <CTableRow className=\"text-center\">\n              <CTableHeaderCell scope=\"col\">Barcode</CTableHeaderCell>\n              <CTableHeaderCell scope=\"col\">Name</CTableHeaderCell>\n              <CTableHeaderCell scope=\"col\">Price</CTableHeaderCell>\n              <CTableHeaderCell scope=\"col\">Products Sold</CTableHeaderCell>\n              <CTableHeaderCell scope=\"col\">Order Status</CTableHeaderCell>\n            </CTableRow>\n          </CTableHead>\n          <CTableBody className=\"text-center\" color=\"light\">\n            {productsTotalSold.data.length > 0 ? (\n              productsTotalSold.data.map((product, index) => {\n                return (\n                  <CTableRow className=\"text-center\" key={index}>\n                    <CTableDataCell>\n                      <Barcode\n                        value={String(product.barcode)}\n                        height={50}\n                        width={1}\n                        fontSize={14}\n                        margin={7}\n                        background=\"#f5f5f548\"\n                      />\n                    </CTableDataCell>\n                    <CTableDataCell>{product.productName}</CTableDataCell>\n                    <CTableDataCell>\n                      &#8369;{product.productPrice.toFixed(2)}\n                    </CTableDataCell>\n                    <CTableDataCell>{product.totalSold}</CTableDataCell>\n                    <CTableDataCell>\n                      <CBadge color=\"success\" shape=\"rounded-pill\">\n                        {product.status}\n                      </CBadge>\n                    </CTableDataCell>\n                  </CTableRow>\n                )\n              })\n            ) : (\n              <CTableRow>\n                <CTableDataCell colSpan=\"7\">No data</CTableDataCell>\n              </CTableRow>\n            )}\n          </CTableBody>\n        </CTable>\n        <ReactPaginate\n          previousLabel={\"previous\"}\n          nextLabel={\"next\"}\n          breakLabel={\"...\"}\n          breakClassName={\"break-me\"}\n          pageCount={productsTotalSold.totalPages}\n          marginPagesDisplayed={2}\n          pageRangeDisplayed={5}\n          onPageChange={this.handlePageClick}\n          containerClassName={\"pagination\"}\n          activeClassName={\"active\"}\n        />\n      </>\n    )\n  }\n}\nconst mapStateToProps = (state) => {\n  return {\n    dashboardResponse: state.dashboardResponse,\n  }\n}\nexport default connect(mapStateToProps, {\n  getProductsAndCountTatolSold,\n})(ProductReport)\n"],"sourceRoot":""}