{"version":3,"sources":["components/orderTabContent/Orders.js","service/restAPI/OrderApiService.js","service/apiActions/indexAction.js","service/apiActions/orderAction/orderAction.js","components/orderTabContent/OrderCard.js","service/restAPI/CommentApiService.js","service/apiActions/commentAction/commentAction.js"],"names":["Orders","Component","constructor","props","super","state","message","status","action","orders","token","permission","path","updated","orderReviews","manageorderRepsonse","prevProps","prevState","orderResponse","this","data","setState","manageHrefLinkBasedInPermission","Roles","SUPER_ADMIN","ADMIN","renderCustomerAction","orderStatus","order","paymentStatus","console","log","orderButton","toLowerCase","onClick","handleOrder","handleOrderReview","bind","componentDidMount","type","accessToken","roles","userResponse","credentials","roleName","getPermission","href","getOrders","componentDidUpdate","orderData","orderId","updateOrderStatus","then","index","findIndex","o","splice","length","totalCounts","toUpperCase","totalCountChange","renderOrderAction","disabled","handleOrderView","event","preventDefault","formattedReviews","key","value","push","rating","comment","anonymous","published","product","id","parseInt","submitted","saveComments","update","item","orderIndex","ctt2","comments","ctt","ct","render","fontStyle","fontSize","fontWeight","className","map","hasPendingReview","orderItems","canReview","canViewReview","firstName","lastName","street","barangay","province","region","city","phoneNumber","customerAddress","style","onSubmit","Date","float","sm","lg","orderedAt","paymentMethod","totalAmount","toFixed","to","pathname","config","api","private","prefixFrontendUrl","connect","messageResponse","clearMessage","axios","get","headers","authHeader","getPaymentTransactions","query","page","limit","params","updateOrderPaymentStatus","put","placeOrderDetails","orderDetails","post","customerAddressId","addressId","paymentId","paymentMethodId","cartItems","items","getOrderByOrderId","handleError","error","dispatch","errorMessage","response","toString","code","SET_MESSAGE","payload","async","OrderApiService","GET_ORDERS","orderStatusCount","orderCounts","Promise","resolve","reject","getOrderItems","ORDER_ITEMS","placeOrder","orderDetials","PLACE_ORDER","GET_ORDER_BY_ID","UPDATE_ORDER_STATUS","UPDATE_PAYMENT_STATUS","GET_PAYMENT_TRANSACTIONS","payments","OrderCard","orderItem","isSubmitted","rounded","src","fileImages","baseUrl","fileName","NO_IMAGE_BASE64","width","height","productName","productPrice","quantity","amount","count","size","isHalf","edit","onChange","newRating","target","rows","placeholder","getComments","productId","saveComment","commentDetails","deleteComment","commentId","delete","CommentApiService","GET_COMMENTS","wishlistDetails","ADD_COMMENT"],"mappings":"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","file":"static/js/41.ae59f189.chunk.js","sourcesContent":["import React, { Component } from \"react\"\nimport {\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCardFooter,\n  CRow,\n  CContainer,\n  CButton,\n  CForm,\n  CCol,\n} from \"@coreui/react\"\nimport { Link } from \"react-router-dom\"\n//action\nimport { saveComments } from \"src/service/apiActions/commentAction/commentAction\"\nimport {\n  getOrders,\n  updateOrderStatus,\n} from \"src/service/apiActions/orderAction/orderAction\"\nimport { clearMessage } from \"src/service/apiActions/messageAction/messageAction\"\nimport { connect } from \"react-redux\"\nimport OrderCard from \"./OrderCard\"\nimport Roles from \"src/router/config\"\nimport ReactPaginate from \"react-paginate\"\n\nimport config from \"../../config\"\n\nexport class Orders extends Component {\n  state = {\n    message: \"\",\n    status: \"\",\n    action: \"\",\n    orders: [],\n    token: \"\",\n    permission: \"\",\n    path: \"\",\n    updated: false,\n  }\n\n  orderReviews = {}\n\n  constructor(props) {\n    super(props)\n    this.state.status = props.status\n    this.handleOrderReview = this.handleOrderReview.bind(this)\n  }\n  componentDidMount() {\n    let { type, accessToken, roles } = this.props.userResponse.credentials\n    let token = type + accessToken\n    let roleName = roles.roleName\n    let getPermission = roleName ? roleName : roles\n    let href = this.manageHrefLinkBasedInPermission(getPermission)\n\n    this.setState({\n      token: token,\n      permission: roles.roleName ? roles.roleName : roles,\n      path: href,\n    })\n\n    this.props.getOrders(this.state.status)\n  }\n  componentDidUpdate(prevProps, prevState) {\n    this.manageorderRepsonse(prevProps, prevState)\n  }\n\n  manageorderRepsonse = (prevProps, prevState) => {\n    if (prevProps.orderResponse !== this.props.orderResponse) {\n      let { status, action, data } = this.props.orderResponse\n      if (status === 200 && action === \"GET_ORDERS\") {\n        this.setState({\n          orders: data.orders,\n        })\n      }\n    }\n  }\n\n  manageHrefLinkBasedInPermission = (permission) => {\n    if (permission === Roles.SUPER_ADMIN || permission === Roles.ADMIN) {\n      return \"/app/order/\"\n    } else {\n      return \"/user/order/\"\n    }\n  }\n\n  handleOrder(orderData, orderStatus) {\n    let orderId = orderData.orderId\n    this.props.updateOrderStatus(orderId, orderStatus).then(() => {\n      let orders = this.state.orders\n      const order = this.props.orderResponse.data\n      const index = orders.findIndex((o) => o.orderId == orderId)\n      orders.splice(index, 1)\n      if (orders.length == 0) {\n        this.props.getOrders(this.state.status, 0, 10)\n      } else {\n        let totalCounts = this.props.totalCounts\n        if (typeof totalCounts[orderStatus.toUpperCase()] == \"undefined\") {\n          totalCounts[orderStatus.toUpperCase()] = 0\n        }\n        if (orderStatus == \"payment_received\") {\n          totalCounts[orderData.orderStatus.toUpperCase()]--\n          totalCounts[orderStatus.toUpperCase()]++\n          this.props.totalCountChange(totalCounts)\n          this.setState({\n            orders: orders,\n          })\n        }\n      }\n    })\n  }\n  renderCustomerAction = (orderStatus, order, paymentStatus) => {\n    console.log(paymentStatus)\n    let orderButton = <></>\n    switch (orderStatus.toLowerCase()) {\n      case \"pending\":\n        orderButton = (\n          <CButton\n            onClick={() => {\n              this.handleOrder(order, \"cancel\")\n            }}\n          >\n            Cancel Order\n          </CButton>\n        )\n        break\n      case \"delivered\":\n        orderButton =\n          paymentStatus === \"Paid\" ? (\n            <CButton\n              onClick={() => {\n                this.handleOrder(order, \"request_refund\")\n              }}\n            >\n              Request Refund\n            </CButton>\n          ) : (\n            <></>\n          )\n        break\n    }\n    return orderButton\n  }\n  renderOrderAction(orderStatus, order, paymentStatus) {\n    let orderButton = <></>\n    switch (orderStatus.toLowerCase()) {\n      case \"pending\":\n        orderButton = (\n          <CButton\n            onClick={() => {\n              this.handleOrder(order, \"confirmed\")\n            }}\n          >\n            Confirm Order\n          </CButton>\n        )\n        break\n      case \"confirmed\":\n        orderButton = (\n          <CButton\n            onClick={() => {\n              this.handleOrder(order, \"shipped\")\n            }}\n          >\n            Mark as Shipped\n          </CButton>\n        )\n        break\n      case \"shipped\":\n        orderButton = (\n          <CButton\n            onClick={() => {\n              this.handleOrder(order, \"delivered\")\n            }}\n          >\n            Mark as Delivered\n          </CButton>\n        )\n        break\n      case \"delivered\":\n        orderButton = (\n          <CButton\n            onClick={() => {\n              this.handleOrder(order, \"payment_received\")\n            }}\n            disabled={paymentStatus === \"Paid\" ? true : false}\n          >\n            {paymentStatus === \"Paid\"\n              ? \"Payment Recieved\"\n              : \"Mark as Payment Received\"}\n          </CButton>\n        )\n        break\n      case \"request_refund\":\n        orderButton = (\n          <CButton\n            onClick={() => {\n              this.handleOrder(order, \"accept_refund\")\n            }}\n          >\n            Accept Refund\n          </CButton>\n        )\n        break\n    }\n    return orderButton\n  }\n\n  handleOrderView(event, order) {\n    event.preventDefault()\n\n    let formattedReviews = []\n    let orderReviews = this.orderReviews[order.orderId]\n    for (var key in orderReviews) {\n      let value = orderReviews[key]\n      formattedReviews.push({\n        rating: value.rating,\n        message: value.comment,\n        anonymous: true,\n        published: 0,\n        product: {\n          id: parseInt(key),\n        },\n      })\n      this.orderReviews[order.orderId][key].submitted = true\n    }\n    this.props.saveComments(order.orderId, formattedReviews)\n    this.setState({ update: true })\n  }\n\n  handleOrderReview(orderId, item, rating, comment) {\n    const { orders } = this.state\n    let orderIndex = orders.findIndex((ctt2) => ctt2.orderId == orderId)\n    let { comments } = orders[orderIndex]\n\n    let submitted = false\n\n    if (typeof this.orderReviews[orderId] == \"undefined\") {\n      this.orderReviews[orderId] = {\n        [item.product.id]: {\n          rating: rating,\n          comment: comment,\n          submitted: false,\n        },\n      }\n    } else if (\n      typeof this.orderReviews[orderId][item.product.id] !== \"undefined\" &&\n      this.orderReviews[orderId][item.product.id].submitted\n    ) {\n      comment = this.orderReviews[orderId][item.product.id].comment\n      submitted = this.orderReviews[orderId][item.product.id].submitted\n    }\n\n    let index =\n      comments && comments.findIndex((ctt) => ctt.product.id == item.product.id)\n\n    if (index >= 0) {\n      const ct = comments[index]\n      rating = ct.rating\n      comment = ct.message\n      submitted = true\n    }\n\n    this.orderReviews[orderId][item.product.id] = {\n      rating: rating,\n      comment: comment,\n      submitted: submitted,\n    }\n  }\n\n  render() {\n    let { message, orders, permission, path } = this.state\n    const fontStyle = {\n      fontSize: \"14px\",\n      fontWeight: \"400\",\n    }\n    return (\n      <>\n        {orders.length === 0 ? (\n          <CCard>\n            <CCardBody>\n              <div className=\"text-center\">No Order Data</div>\n            </CCardBody>\n          </CCard>\n        ) : (\n          orders.map((order, index) => {\n            let hasPendingReview =\n              order.orderItems.length != order.comments.length\n\n            if (hasPendingReview && this.orderReviews[order.orderId]) {\n              hasPendingReview = false\n              for (var key in this.orderReviews[order.orderId]) {\n                if (this.orderReviews[order.orderId][key].submitted == false) {\n                  hasPendingReview = true\n                }\n              }\n            }\n\n            const canReview =\n              (order.orderStatus == \"DELIVERED\" ||\n                order.orderStatus == \"PAYMENT_RECEIVED\") &&\n              permission !== Roles.SUPER_ADMIN &&\n              permission !== Roles.ADMIN\n            const canViewReview =\n              (order.orderStatus == \"DELIVERED\" ||\n                order.orderStatus == \"PAYMENT_RECEIVED\") &&\n              (permission == Roles.SUPER_ADMIN || permission == Roles.ADMIN)\n\n            const {\n              firstName,\n              lastName,\n              street,\n              barangay,\n              province,\n              region,\n              city,\n              phoneNumber,\n            } = order.customerAddress\n            let paymentStatus = \"Payment Pending\"\n            switch (order.paymentStatus) {\n              case 1:\n                paymentStatus = \"Paid\"\n                break\n              case 2:\n                paymentStatus = \"Failed\"\n                break\n              case 3:\n                paymentStatus = \"Refunded\"\n                break\n            }\n            return (\n              <CCard className=\"mb-3\" key={index}>\n                <CCardHeader>\n                  <CRow className=\"p-2\">\n                    <span\n                      style={{ fontSize: \"14px\", fontWeight: \"400\" }}\n                      className=\"text-black-50\"\n                    >\n                      Order ID: {order.orderId}\n                    </span>\n                    <span\n                      style={{ fontSize: \"14px\", fontWeight: \"400\" }}\n                      className=\"text-black-50\"\n                    >\n                      Customer Name: {firstName + \" \" + lastName}\n                    </span>\n                    <span\n                      style={{ fontSize: \"14px\", fontWeight: \"400\" }}\n                      className=\"text-black-50\"\n                    >\n                      Mobile: {phoneNumber}\n                    </span>\n                    <span\n                      style={{ fontSize: \"14px\", fontWeight: \"400\" }}\n                      className=\"text-black-50\"\n                    >\n                      Address:{\" \"}\n                      {street +\n                        \" \" +\n                        \" \" +\n                        barangay +\n                        \", \" +\n                        city +\n                        \", \" +\n                        province}\n                    </span>\n                  </CRow>\n                </CCardHeader>\n                <CCardBody>\n                  <CForm\n                    onSubmit={(event) => {\n                      this.handleOrderView(event, order)\n                    }}\n                  >\n                    <CContainer key={new Date()}>\n                      {order.orderItems.map((item, index) => {\n                        this.handleOrderReview(order.orderId, item, 5, \"\")\n                        const { rating, comment, submitted } =\n                          this.orderReviews[order.orderId][item.product.id]\n                        return (\n                          <OrderCard\n                            item={item}\n                            canReview={canReview}\n                            canViewReview={canViewReview}\n                            orderId={order.orderId}\n                            comment={comment}\n                            rating={rating}\n                            key={index}\n                            submitted={submitted}\n                            handleOrderReview={this.handleOrderReview}\n                          />\n                        )\n                      })}\n                    </CContainer>\n                    {hasPendingReview && canReview && (\n                      <CButton type=\"submit\" style={{ float: \"right\" }}>\n                        Submit Product Review\n                      </CButton>\n                    )}\n                  </CForm>\n                </CCardBody>\n                <CCardFooter className=\"p-4\">\n                  <CRow className=\"\">\n                    <CCol sm=\"12\" lg=\"6\">\n                      <div className=\"d-flex flex-column\">\n                        <div style={fontStyle} className=\"mt-2\">\n                          <span className=\"text-black-50 me-2\">\n                            Date of Ordered:\n                          </span>\n                          <span style={{ fontWeight: \"500\" }}>\n                            {order.orderedAt}\n                          </span>\n                        </div>\n\n                        <div style={fontStyle} className=\"mt-2\">\n                          <span\n                            style={fontStyle}\n                            className=\"text-black-50 me-2\"\n                          >\n                            Payment Method:\n                          </span>\n                          <span style={{ fontWeight: \"500\" }}>\n                            {order.paymentMethod.paymentMethod}\n                          </span>\n                        </div>\n                        <div style={fontStyle} className=\"mt-2\">\n                          <span\n                            style={fontStyle}\n                            className=\"text-black-50 me-2\"\n                          >\n                            Payment Status:\n                          </span>\n                          <span style={{ fontWeight: \"500\" }}>\n                            {paymentStatus}\n                          </span>\n                        </div>\n                        <div style={fontStyle} className=\"mt-2\">\n                          <span\n                            style={fontStyle}\n                            className=\"text-black-50 me-2\"\n                          >\n                            Order Status:\n                          </span>\n                          <span\n                            className=\"text-danger\"\n                            style={{ fontWeight: \"500\" }}\n                          >\n                            {order.orderStatus}\n                          </span>\n                        </div>\n                        <div className=\"mt-2\">\n                          <span\n                            style={fontStyle}\n                            className=\"text-black-50 me-2\"\n                          >\n                            Total Amount\n                          </span>\n                          <span style={{ fontWeight: \"500\" }}>\n                            &#8369;{order.totalAmount.toFixed(2)}\n                          </span>\n                        </div>\n                      </div>\n                    </CCol>\n                    <CCol sm=\"12\" lg=\"6\">\n                      <div className=\"d-flex align-items-end  h-100 justify-content-end mt-3\">\n                        {permission === Roles.SUPER_ADMIN ||\n                        permission === Roles.ADMIN\n                          ? this.renderOrderAction(\n                              this.state.status,\n                              order,\n                              paymentStatus,\n                            )\n                          : this.renderCustomerAction(\n                              this.state.status,\n                              order,\n                              paymentStatus,\n                            )}\n                        <Link\n                          to={{\n                            pathname:\n                              config.api.private.prefixFrontendUrl +\n                              path +\n                              order.orderId,\n                            state: order.orderId,\n                          }}\n                          className=\"m-2\"\n                        >\n                          View More\n                        </Link>\n                      </div>\n                    </CCol>\n                  </CRow>\n                </CCardFooter>\n              </CCard>\n            )\n          })\n        )}\n      </>\n    )\n  }\n}\nconst mapStateToProps = (state) => {\n  return {\n    orderResponse: state.orderResponse,\n    messageResponse: state.messageResponse,\n    userResponse: state.userResponse,\n  }\n}\nexport default connect(mapStateToProps, {\n  getOrders,\n  clearMessage,\n  updateOrderStatus,\n  saveComments,\n})(Orders)\n","import authHeader from '../auth/authHeader';\nimport axios from './RestApi';\n\nexport class OrderApiService {\n    getOrders(status) {\n        return axios.get(\"/orders/status/\" + status, {\n            headers: authHeader()\n        })\n    }\n\n    getPaymentTransactions(query, page, limit) {\n        return axios.get(\"/orders/payments\", {\n            headers: authHeader(),\n            params: {\n                query: query,\n                page: page,\n                limit: limit\n            }\n        })\n    }\n\n    updateOrderPaymentStatus(orderId, paymentStatus) {\n        return axios.put(\"/orders/\" + orderId + \"/paid/\" + paymentStatus, {}, {\n            headers: authHeader()\n        })\n    }\n\n\n    placeOrderDetails(orderDetails) {\n        return axios.post(\"/orders/checkout\", {\n            customerAddressId: orderDetails.addressId,\n            paymentId: orderDetails.paymentMethodId,\n            cartItems: orderDetails.items\n        }, {\n            headers: authHeader()\n        })\n    }\n\n    getOrderByOrderId(orderId) {\n        return axios.get(\"/orders/\" + orderId, {\n            headers: authHeader()\n        })\n    }\n\n    updateOrderStatus(orderId, status) {\n        return axios.put(\"/orders/\" + orderId + \"/status/\" + status, {}, {\n            headers: authHeader()\n        })\n    }\n}\nexport default new OrderApiService();","import { SET_MESSAGE } from \"src/constants/userConstants\";\n\nexport const handleError = (error, dispatch) => {\n    const errorMessage =\n        (error.response &&\n            error.response.data &&\n            error.response.data.message) ||\n        error.message ||\n        error.toString();\n\n    const status = (error.response &&\n        error.response.data &&\n        error.response.data.code) ||\n        error.toString();\n\n    dispatch({\n        type: SET_MESSAGE,\n        payload: {\n            status: status,\n            data: {\n                message: errorMessage\n            }\n        }\n    })\n}","import { GET_ORDER_BY_ID, GET_ORDERS, ORDER_ITEMS, PLACE_ORDER, UPDATE_ORDER_STATUS, GET_PAYMENT_TRANSACTIONS, UPDATE_PAYMENT_STATUS } from \"src/service/redux/constants\";\nimport { SET_MESSAGE } from \"src/constants/userConstants\";\nimport OrderApiService from \"src/service/restAPI/OrderApiService\";\nimport { handleError } from \"../indexAction\";\n\nexport const getOrders = (status, page, limit) => async (dispatch) => {\n    return OrderApiService.getOrders(status, page, limit).then(\n        (response) => {\n            dispatch({\n                type: GET_ORDERS,\n                payload: {\n                    status: 200,\n                    action: \"GET_ORDERS\",\n                    data: {\n                        orders: response.data.orders,\n                        orderStatusCount: response.data.orderCounts\n                    }\n                }\n            })\n            return Promise.resolve();\n        },\n        (error) => {\n            handleError(error, dispatch);\n            return Promise.reject();\n        }\n    )\n\n}\n\nexport const getOrderItems = (items) => async (dispatch) => {\n    dispatch({\n        type: ORDER_ITEMS,\n        payload: {\n            status: 200,\n            action: \"ORDERITEMS\",\n            data: {\n                items: items\n            }\n        }\n    })\n}\n\nexport const placeOrder = (orderDetials) => async (dispatch) => {\n    return OrderApiService.placeOrderDetails(orderDetials).then(\n        (response) => {\n            dispatch({\n                type: PLACE_ORDER,\n                payload: {\n                    status: 200,\n                    action: \"PLACE_ORDER\",\n                    data: {\n\n                    }\n                }\n            })\n            dispatch({\n                type: SET_MESSAGE,\n                payload: {\n                    status: 200,\n                    data: {\n                        message: \"Successfully Place your Order\",\n                        order: response.data\n                    }\n                }\n            })\n            return Promise.resolve();\n        },\n        (error) => {\n            handleError(error, dispatch);\n            return Promise.reject();\n        }\n    )\n}\n\nexport const getOrderByOrderId = (orderId) => async (dispatch) => {\n    return OrderApiService.getOrderByOrderId(orderId).then(\n        (response) => {\n            dispatch({\n                type: GET_ORDER_BY_ID,\n                payload: {\n                    status: 200,\n                    action: \"GETORDERBYID\",\n                    data: {\n                        order: response.data\n                    }\n                }\n            })\n            return Promise.resolve();\n        },\n        (error) => {\n            handleError(error, dispatch);\n            return Promise.reject();\n        }\n    )\n}\n\nexport const updateOrderStatus = (orderId, status) => async (dispatch) => {\n    return OrderApiService.updateOrderStatus(orderId, status).then(\n        (response) => {\n            dispatch({\n                type: UPDATE_ORDER_STATUS,\n                payload: {\n                    status: 200,\n                    action: UPDATE_ORDER_STATUS,\n                    data: {\n                        order: response.data\n                    }\n                }\n            })\n            dispatch({\n                type: SET_MESSAGE,\n                payload: {\n                    status: 200,\n                    data: {\n                        message: \"Successfully updated order \" + orderId + \" status to \" + status.toUpperCase(),\n                        order: response.data\n                    }\n                }\n            })\n            return Promise.resolve();\n        },\n        (error) => {\n            handleError(error, dispatch);\n            return Promise.reject();\n        }\n    )\n}\n\nexport const updateOrderPaymentStatus = (orderId, paymentStatus) => async (dispatch) => {\n    return OrderApiService.updateOrderPaymentStatus(orderId, paymentStatus).then(\n        (response) => {\n            dispatch({\n                type: UPDATE_PAYMENT_STATUS,\n                payload: {\n                    status: 200,\n                    action: UPDATE_PAYMENT_STATUS,\n                    data: {\n                        order: response.data\n                    }\n                }\n            })\n            dispatch({\n                type: SET_MESSAGE,\n                payload: {\n                    status: 200,\n                    data: {\n                        //message: \"Successfully updated order \" + orderId + \" status to \" + status.toUpperCase(),\n                    }\n                }\n            })\n            return Promise.resolve();\n        },\n        (error) => {\n            handleError(error, dispatch);\n            return Promise.reject();\n        }\n    )\n}\n\nexport const getPaymentTransactions = (query, page, limit) => async (dispatch) => {\n    return OrderApiService.getPaymentTransactions(query, page, limit).then(\n        (response) => {\n            dispatch({\n                type: GET_PAYMENT_TRANSACTIONS,\n                payload: {\n                    status: 200,\n                    action: \"GET_PAYMENT_TRANSACTIONS\",\n                    data: {\n                        payments: response.data,\n                    }\n                }\n            })\n            return Promise.resolve();\n        },\n        (error) => {\n            handleError(error, dispatch);\n            return Promise.reject();\n        }\n    )\n}","import React, { Component } from \"react\"\nimport {\n  CCard,\n  CCardBody,\n  CRow,\n  CCol,\n  CImage,\n  CFormLabel,\n  CFormTextarea,\n} from \"@coreui/react\"\nimport { NO_IMAGE_BASE64 } from \"src/service/redux/constants\"\nimport ReactStars from \"react-rating-stars-component\"\n\nimport config from \"../../config\";\n\nexport class OrderCard extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      orderItem: this.props.item,\n      canReview: this.props.canReview,\n      orderId: this.props.orderId,\n      comment: this.props.comment,\n      rating: this.props.rating,\n      submitted: this.props.submitted,\n      canViewReview: this.props.canViewReview,\n    }\n  }\n  render() {\n    let {\n      orderItem,\n      canReview,\n      rating,\n      comment,\n      orderId,\n      submitted,\n      canViewReview,\n    } = this.state\n    let isSubmitted = submitted\n    if (canViewReview && !canReview) {\n      submitted = true\n    }\n    const fontStyle = {\n      fontSize: \"14px\",\n      fontWeight: \"400\",\n    }\n    return (\n      <CRow className=\"mb-3\">\n        <CCard>\n          <CCardBody>\n            <div className=\"d-flex align-items-start\">\n              <CImage\n                rounded\n                src={\n                  orderItem.product.fileImages.length > 0\n                    ? config.api.private.baseUrl + \"/api/v1/products/getImages/bytesArrays/\" +\n                    orderItem.product.fileImages[0].path +\n                    orderItem.product.fileImages[0].fileName\n                    : NO_IMAGE_BASE64\n                }\n                width={100}\n                height={100}\n              />\n              <div className=\"ms-2  w-100\">\n                <CRow className=\"d-flex justify-content-between\">\n                  <CCol className=\"ps-4 text-dark\">\n                    {orderItem.product.productName}\n                  </CCol>\n                  <CCol className=\"text-dark d-flex flex-column align-items-center\">\n                    <span style={fontStyle} className=\"text-black-50\">\n                      Price\n                    </span>\n                    <span className=\"pt-3\">\n                      &#8369;{orderItem.product.productPrice.toFixed(2)}\n                    </span>\n                  </CCol>\n                  <CCol className=\"text-dark d-flex flex-column align-items-center\">\n                    <span style={fontStyle} className=\"text-black-50\">\n                      Quantity\n                    </span>\n                    <span className=\"pt-3\">{orderItem.quantity}</span>\n                  </CCol>\n                  <CCol className=\"text-dark d-flex flex-column align-items-center\">\n                    <span style={fontStyle} className=\"text-black-50\">\n                      Amount\n                    </span>\n                    <span className=\"pt-3\">\n                      &#8369;{orderItem.amount.toFixed(2)}\n                    </span>\n                  </CCol>\n                </CRow>\n                {(canReview || (canViewReview && isSubmitted)) && (\n                  <div>\n                    <ReactStars\n                      count={5}\n                      value={rating}\n                      size={24}\n                      isHalf={false}\n                      edit={!submitted}\n                      onChange={(newRating) => {\n                        this.props.handleOrderReview(\n                          orderId,\n                          orderItem,\n                          newRating,\n                          comment,\n                        )\n                      }}\n                    />\n                    <div className=\"mb-!2\">\n                      <textarea\n                        disabled={submitted}\n                        onChange={(event) => {\n                          this.props.handleOrderReview(\n                            orderId,\n                            orderItem,\n                            rating,\n                            event.target.value,\n                          )\n                        }}\n                        id=\"exampleFormControlTextarea1\"\n                        rows=\"3\"\n                        style={{ width: \"100%\" }}\n                        placeholder=\"Please write a review.\"\n                      >\n                        {comment}\n                      </textarea>\n                    </div>\n                  </div>\n                )}\n              </div>\n            </div>\n          </CCardBody>\n        </CCard>\n      </CRow>\n    )\n  }\n}\n\nexport default OrderCard\n","import authHeader from \"../auth/authHeader\"\nimport axios from \"./RestApi\"\n\nexport class CommentApiService {\n  getComments(productId, page, limit) {\n    return axios.get(\"/comments\", {\n      params: {\n        productId: productId,\n        page: page,\n        limit: limit,\n      },\n    })\n  }\n  saveComment(commentDetails) {\n    return axios.post(\"/comments\", commentDetails, {\n      headers: authHeader(),\n    })\n  }\n  saveComments(orderId, commentDetails) {\n    return axios.post(\"/comments/bulk/\" + orderId, commentDetails, {\n      headers: authHeader(),\n    })\n  }\n  deleteComment(commentId) {\n    return axios.delete(\"/comments/\" + commentId, {\n      headers: authHeader(),\n    })\n  }\n}\nexport default new CommentApiService()\n","import {\n  GET_COMMENTS,\n  DELETE_COMMENT,\n  ADD_COMMENT,\n} from \"src/service/redux/constants\"\nimport { SET_MESSAGE } from \"src/constants/userConstants\"\nimport CommentApiService from \"src/service/restAPI/CommentApiService\"\n\nexport const getComments = (productId, page, limit) => async (dispatch) => {\n  return CommentApiService.getComments(productId, page, limit).then(\n    (response) => {\n      dispatch({\n        type: GET_COMMENTS,\n        payload: {\n          status: 200,\n          action: \"GET_COMMENT\",\n          data: response.data,\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      const errorMessage =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: errorMessage,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\n\nexport const saveComment = (wishlistDetails) => async (dispatch) => {\n  return CommentApiService.saveComment(wishlistDetails).then(\n    (response) => {\n      dispatch({\n        type: ADD_COMMENT,\n        payload: {\n          status: 200,\n          action: \"ADD_COMMENT\",\n          data: response.data,\n        },\n      })\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: 200,\n          data: {\n            message: \"Successfully submitted product comment\",\n            order: response.data,\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      const errorMessage =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: errorMessage,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\n\nexport const saveComments = (orderId, comments) => async (dispatch) => {\n  return CommentApiService.saveComments(orderId, comments).then(\n    (response) => {\n      dispatch({\n        type: ADD_COMMENT,\n        payload: {\n          status: 200,\n          action: \"ADD_COMMENT\",\n          data: response.data,\n        },\n      })\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: 200,\n          data: {\n            message: \"Successfully submitted order product review\",\n            order: response.data,\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      const errorMessage =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: errorMessage,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\n\nexport const deleteComment = (wishlistId) => async (dispatch) => {\n  return CommentApiService.deleteComment(wishlistId).then(\n    (response) => {\n      dispatch({\n        type: DELETE_COMMENT,\n        payload: {\n          status: 200,\n          action: \"DELETE_COMMENT\",\n          data: {\n            order: response.data,\n          },\n        },\n      })\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: 200,\n          data: {\n            message: \"Successfully deleted wishlist\",\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      const errorMessage =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: errorMessage,\n          },\n        },\n      })\n      console.log(\"JKOSLDFJ\")\n      return Promise.reject()\n    },\n  )\n}\n"],"sourceRoot":""}