{"version":3,"sources":["service/restAPI/OrderApiService.js","service/apiActions/indexAction.js","service/apiActions/orderAction/orderAction.js","components/orderTabContent/OrderCard.js","components/orderTabContent/OrderDetails.js"],"names":["getOrders","status","axios","get","headers","authHeader","getPaymentTransactions","query","page","limit","params","updateOrderPaymentStatus","orderId","paymentStatus","put","placeOrderDetails","orderDetails","post","customerAddressId","addressId","paymentId","paymentMethodId","cartItems","items","getOrderByOrderId","updateOrderStatus","handleError","error","dispatch","errorMessage","response","data","message","toString","code","type","SET_MESSAGE","payload","async","OrderApiService","then","GET_ORDERS","action","orders","orderStatusCount","orderCounts","Promise","resolve","reject","getOrderItems","ORDER_ITEMS","placeOrder","orderDetials","PLACE_ORDER","order","GET_ORDER_BY_ID","UPDATE_ORDER_STATUS","toUpperCase","UPDATE_PAYMENT_STATUS","GET_PAYMENT_TRANSACTIONS","payments","OrderCard","Component","constructor","props","super","this","state","orderItem","item","canReview","comment","rating","submitted","canViewReview","render","isSubmitted","fontStyle","fontSize","fontWeight","className","rounded","src","product","fileImages","length","config","api","private","baseUrl","path","fileName","NO_IMAGE_BASE64","width","height","productName","style","productPrice","toFixed","quantity","amount","count","value","size","isHalf","edit","onChange","newRating","handleOrderReview","disabled","event","target","id","rows","placeholder","OrderDetails","customerAddress","hasError","manageOrderResponse","prevProps","prevState","orderResponse","setState","downloadQRCode","console","log","qrCodeURL","document","getElementById","toDataURL","replace","aEl","createElement","href","download","body","appendChild","click","removeChild","componentDidMount","location","catch","componentDidUpdate","firstName","lastName","phoneNumber","street","barangay","province","region","city","postalCode","firstNameUpperCase","charAt","slice","lastNameUpperCase","qrValue","onClick","history","goBack","variant","color","role","trigger","content","componentRef","ref","el","orderItems","map","index","cursor","String","includeMargin","orderedAt","paymentMethod","orderStatus","totalAmount","connect","messageResponse","clearMessage"],"mappings":"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","file":"static/js/46.3051609b.chunk.js","sourcesContent":["import authHeader from '../auth/authHeader';\nimport axios from './RestApi';\n\nexport class OrderApiService {\n    getOrders(status) {\n        return axios.get(\"/orders/status/\" + status, {\n            headers: authHeader()\n        })\n    }\n\n    getPaymentTransactions(query, page, limit) {\n        return axios.get(\"/orders/payments\", {\n            headers: authHeader(),\n            params: {\n                query: query,\n                page: page,\n                limit: limit\n            }\n        })\n    }\n\n    updateOrderPaymentStatus(orderId, paymentStatus) {\n        return axios.put(\"/orders/\" + orderId + \"/paid/\" + paymentStatus, {}, {\n            headers: authHeader()\n        })\n    }\n\n\n    placeOrderDetails(orderDetails) {\n        return axios.post(\"/orders/checkout\", {\n            customerAddressId: orderDetails.addressId,\n            paymentId: orderDetails.paymentMethodId,\n            cartItems: orderDetails.items\n        }, {\n            headers: authHeader()\n        })\n    }\n\n    getOrderByOrderId(orderId) {\n        return axios.get(\"/orders/\" + orderId, {\n            headers: authHeader()\n        })\n    }\n\n    updateOrderStatus(orderId, status) {\n        return axios.put(\"/orders/\" + orderId + \"/status/\" + status, {}, {\n            headers: authHeader()\n        })\n    }\n}\nexport default new OrderApiService();","import { SET_MESSAGE } from \"src/constants/userConstants\";\n\nexport const handleError = (error, dispatch) => {\n    const errorMessage =\n        (error.response &&\n            error.response.data &&\n            error.response.data.message) ||\n        error.message ||\n        error.toString();\n\n    const status = (error.response &&\n        error.response.data &&\n        error.response.data.code) ||\n        error.toString();\n\n    dispatch({\n        type: SET_MESSAGE,\n        payload: {\n            status: status,\n            data: {\n                message: errorMessage\n            }\n        }\n    })\n}","import { GET_ORDER_BY_ID, GET_ORDERS, ORDER_ITEMS, PLACE_ORDER, UPDATE_ORDER_STATUS, GET_PAYMENT_TRANSACTIONS, UPDATE_PAYMENT_STATUS } from \"src/service/redux/constants\";\nimport { SET_MESSAGE } from \"src/constants/userConstants\";\nimport OrderApiService from \"src/service/restAPI/OrderApiService\";\nimport { handleError } from \"../indexAction\";\n\nexport const getOrders = (status, page, limit) => async (dispatch) => {\n    return OrderApiService.getOrders(status, page, limit).then(\n        (response) => {\n            dispatch({\n                type: GET_ORDERS,\n                payload: {\n                    status: 200,\n                    action: \"GET_ORDERS\",\n                    data: {\n                        orders: response.data.orders,\n                        orderStatusCount: response.data.orderCounts\n                    }\n                }\n            })\n            return Promise.resolve();\n        },\n        (error) => {\n            handleError(error, dispatch);\n            return Promise.reject();\n        }\n    )\n\n}\n\nexport const getOrderItems = (items) => async (dispatch) => {\n    dispatch({\n        type: ORDER_ITEMS,\n        payload: {\n            status: 200,\n            action: \"ORDERITEMS\",\n            data: {\n                items: items\n            }\n        }\n    })\n}\n\nexport const placeOrder = (orderDetials) => async (dispatch) => {\n    return OrderApiService.placeOrderDetails(orderDetials).then(\n        (response) => {\n            dispatch({\n                type: PLACE_ORDER,\n                payload: {\n                    status: 200,\n                    action: \"PLACE_ORDER\",\n                    data: {\n\n                    }\n                }\n            })\n            dispatch({\n                type: SET_MESSAGE,\n                payload: {\n                    status: 200,\n                    data: {\n                        message: \"Successfully Place your Order\",\n                        order: response.data\n                    }\n                }\n            })\n            return Promise.resolve();\n        },\n        (error) => {\n            handleError(error, dispatch);\n            return Promise.reject();\n        }\n    )\n}\n\nexport const getOrderByOrderId = (orderId) => async (dispatch) => {\n    return OrderApiService.getOrderByOrderId(orderId).then(\n        (response) => {\n            dispatch({\n                type: GET_ORDER_BY_ID,\n                payload: {\n                    status: 200,\n                    action: \"GETORDERBYID\",\n                    data: {\n                        order: response.data\n                    }\n                }\n            })\n            return Promise.resolve();\n        },\n        (error) => {\n            handleError(error, dispatch);\n            return Promise.reject();\n        }\n    )\n}\n\nexport const updateOrderStatus = (orderId, status) => async (dispatch) => {\n    return OrderApiService.updateOrderStatus(orderId, status).then(\n        (response) => {\n            dispatch({\n                type: UPDATE_ORDER_STATUS,\n                payload: {\n                    status: 200,\n                    action: UPDATE_ORDER_STATUS,\n                    data: {\n                        order: response.data\n                    }\n                }\n            })\n            dispatch({\n                type: SET_MESSAGE,\n                payload: {\n                    status: 200,\n                    data: {\n                        message: \"Successfully updated order \" + orderId + \" status to \" + status.toUpperCase(),\n                        order: response.data\n                    }\n                }\n            })\n            return Promise.resolve();\n        },\n        (error) => {\n            handleError(error, dispatch);\n            return Promise.reject();\n        }\n    )\n}\n\nexport const updateOrderPaymentStatus = (orderId, paymentStatus) => async (dispatch) => {\n    return OrderApiService.updateOrderPaymentStatus(orderId, paymentStatus).then(\n        (response) => {\n            dispatch({\n                type: UPDATE_PAYMENT_STATUS,\n                payload: {\n                    status: 200,\n                    action: UPDATE_PAYMENT_STATUS,\n                    data: {\n                        order: response.data\n                    }\n                }\n            })\n            dispatch({\n                type: SET_MESSAGE,\n                payload: {\n                    status: 200,\n                    data: {\n                        //message: \"Successfully updated order \" + orderId + \" status to \" + status.toUpperCase(),\n                    }\n                }\n            })\n            return Promise.resolve();\n        },\n        (error) => {\n            handleError(error, dispatch);\n            return Promise.reject();\n        }\n    )\n}\n\nexport const getPaymentTransactions = (query, page, limit) => async (dispatch) => {\n    return OrderApiService.getPaymentTransactions(query, page, limit).then(\n        (response) => {\n            dispatch({\n                type: GET_PAYMENT_TRANSACTIONS,\n                payload: {\n                    status: 200,\n                    action: \"GET_PAYMENT_TRANSACTIONS\",\n                    data: {\n                        payments: response.data,\n                    }\n                }\n            })\n            return Promise.resolve();\n        },\n        (error) => {\n            handleError(error, dispatch);\n            return Promise.reject();\n        }\n    )\n}","import React, { Component } from \"react\"\nimport {\n  CCard,\n  CCardBody,\n  CRow,\n  CCol,\n  CImage,\n  CFormLabel,\n  CFormTextarea,\n} from \"@coreui/react\"\nimport { NO_IMAGE_BASE64 } from \"src/service/redux/constants\"\nimport ReactStars from \"react-rating-stars-component\"\n\nimport config from \"../../config\";\n\nexport class OrderCard extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      orderItem: this.props.item,\n      canReview: this.props.canReview,\n      orderId: this.props.orderId,\n      comment: this.props.comment,\n      rating: this.props.rating,\n      submitted: this.props.submitted,\n      canViewReview: this.props.canViewReview,\n    }\n  }\n  render() {\n    let {\n      orderItem,\n      canReview,\n      rating,\n      comment,\n      orderId,\n      submitted,\n      canViewReview,\n    } = this.state\n    let isSubmitted = submitted\n    if (canViewReview && !canReview) {\n      submitted = true\n    }\n    const fontStyle = {\n      fontSize: \"14px\",\n      fontWeight: \"400\",\n    }\n    return (\n      <CRow className=\"mb-3\">\n        <CCard>\n          <CCardBody>\n            <div className=\"d-flex align-items-start\">\n              <CImage\n                rounded\n                src={\n                  orderItem.product.fileImages.length > 0\n                    ? config.api.private.baseUrl + \"/api/v1/products/getImages/bytesArrays/\" +\n                    orderItem.product.fileImages[0].path +\n                    orderItem.product.fileImages[0].fileName\n                    : NO_IMAGE_BASE64\n                }\n                width={100}\n                height={100}\n              />\n              <div className=\"ms-2  w-100\">\n                <CRow className=\"d-flex justify-content-between\">\n                  <CCol className=\"ps-4 text-dark\">\n                    {orderItem.product.productName}\n                  </CCol>\n                  <CCol className=\"text-dark d-flex flex-column align-items-center\">\n                    <span style={fontStyle} className=\"text-black-50\">\n                      Price\n                    </span>\n                    <span className=\"pt-3\">\n                      &#8369;{orderItem.product.productPrice.toFixed(2)}\n                    </span>\n                  </CCol>\n                  <CCol className=\"text-dark d-flex flex-column align-items-center\">\n                    <span style={fontStyle} className=\"text-black-50\">\n                      Quantity\n                    </span>\n                    <span className=\"pt-3\">{orderItem.quantity}</span>\n                  </CCol>\n                  <CCol className=\"text-dark d-flex flex-column align-items-center\">\n                    <span style={fontStyle} className=\"text-black-50\">\n                      Amount\n                    </span>\n                    <span className=\"pt-3\">\n                      &#8369;{orderItem.amount.toFixed(2)}\n                    </span>\n                  </CCol>\n                </CRow>\n                {(canReview || (canViewReview && isSubmitted)) && (\n                  <div>\n                    <ReactStars\n                      count={5}\n                      value={rating}\n                      size={24}\n                      isHalf={false}\n                      edit={!submitted}\n                      onChange={(newRating) => {\n                        this.props.handleOrderReview(\n                          orderId,\n                          orderItem,\n                          newRating,\n                          comment,\n                        )\n                      }}\n                    />\n                    <div className=\"mb-!2\">\n                      <textarea\n                        disabled={submitted}\n                        onChange={(event) => {\n                          this.props.handleOrderReview(\n                            orderId,\n                            orderItem,\n                            rating,\n                            event.target.value,\n                          )\n                        }}\n                        id=\"exampleFormControlTextarea1\"\n                        rows=\"3\"\n                        style={{ width: \"100%\" }}\n                        placeholder=\"Please write a review.\"\n                      >\n                        {comment}\n                      </textarea>\n                    </div>\n                  </div>\n                )}\n              </div>\n            </div>\n          </CCardBody>\n        </CCard>\n      </CRow>\n    )\n  }\n}\n\nexport default OrderCard\n","import React, { Component } from 'react'\nimport {\n    CButton,\n    CCard,\n    CCardBody,\n    CContainer,\n    CCardHeader,\n    CRow\n} from '@coreui/react';\nimport { connect } from 'react-redux';\n//action\nimport { clearMessage } from 'src/service/apiActions/messageAction/messageAction';\nimport { getOrderByOrderId } from 'src/service/apiActions/orderAction/orderAction';\n\n//helper\nimport { history } from 'src/_helper/history';\n//icon\nimport * as IoIcons from \"react-icons/io5\"\nimport OrderCard from './OrderCard';\n//npm\nimport ReactToPrint from 'react-to-print';\nimport QRCode from 'qrcode.react';\n\nexport class OrderDetails extends Component {\n    state = {\n        message: '',\n        order: [],\n        orderId: '',\n        customerAddress: [],\n        hasError: false\n    }\n    componentDidMount() {\n        let orderId = this.props.location.state;\n        this.props.getOrderByOrderId(orderId).catch(() => {\n            this.setState({\n                hasError: true\n            })\n        })\n    }\n    componentDidUpdate(prevProps, prevState) {\n        this.manageOrderResponse(prevProps, prevState);\n    }\n\n    manageOrderResponse = (prevProps, prevState) => {\n\n        if (prevProps.orderResponse !== this.props.orderResponse) {\n            let { status, action, data } = this.props.orderResponse;\n            if (status === 200 && action === \"GETORDERBYID\") {\n                this.setState({\n                    order: data.order,\n                    customerAddress: data.order.customerAddress,\n                    orderId: data.order.orderId\n                })\n            }\n        }\n    }\n    downloadQRCode = () => {\n        let { orderId } = this.state.order;\n        console.log(orderId);\n        const qrCodeURL = document\n            .getElementById('qrCodeEl').toDataURL('image/png')\n            .replace('image/png', 'image/octet-stream');\n\n        let aEl = document.createElement('a');\n        aEl.href = qrCodeURL;\n        aEl.download = 'QR_Code' + orderId + '.png';\n        document.body.appendChild(aEl);\n        aEl.click();\n        document.body.removeChild(aEl);\n    }\n    render() {\n        let { order, message, hasError, customerAddress } = this.state;\n        const {\n            firstName,\n            lastName,\n            phoneNumber,\n            street,\n            barangay,\n            province,\n            region,\n            city,\n            postalCode } = customerAddress;\n        let firstNameUpperCase = firstName && firstName.charAt(0).toUpperCase() + firstName.slice(1);\n        let lastNameUpperCase = lastName && lastName.charAt(0).toUpperCase() + lastName.slice(1);\n        let qrValue = order && order.orderId;\n        return (\n            <>\n                <CButton\n                    onClick={() => history.goBack()}\n                    variant=\"ghost\"\n                    color=\"secondary\"\n                    className=\"d-flex align-items-center\"\n                >\n                    <IoIcons.IoChevronBack size={20} />\n                    <span className=\"ms-2\">back</span>\n                </CButton>\n\n                {message && (\n                    <div className=\"form-group d-flex justify-content-center align-items-center\">\n                        <div className=\"alert alert-danger\" role=\"alert\">\n                            {message}\n                        </div>\n                    </div>\n                )}\n\n                {hasError ? <></> :\n                    <div className=\"mb-4\">\n                        <div className=\"d-flex align-items-end flex-row-reverse m-2\">\n\n                            <ReactToPrint\n                                trigger={() =>\n                                    <CButton\n                                        color=\"info\"\n                                        className=\"d-flex align-items-center\"\n                                    >\n                                        <IoIcons.IoPrintOutline size={20} />\n                                    </CButton>\n                                }\n                                content={() => this.componentRef}\n                            />\n                        </div>\n                        <div ref={(el) => (this.componentRef = el)} className=\"ps-4 pe-4 pt-3\">\n                            <CCard className=\"border-envelope\">\n                                <CCardBody>\n                                    <h5 className=\"text-black-50\">Customer Address</h5>\n\n                                    <h6>\n                                        <span className=\"mb-2 text-black-50 me-2 font-style \">Name:</span>\n\n                                        {firstNameUpperCase + \" \" + lastNameUpperCase}\n                                    </h6>\n                                    <h6 >\n                                        <span className=\"mb-2 text-black-50 me-2  font-style \">Contact:</span>\n                                        {phoneNumber}\n                                    </h6>\n                                    <h6>\n                                        <span className=\"mb-2 text-black-50 me-2  font-style \">Address:</span>\n\n                                        {\"# \" + street + \", \" + barangay + \", \" + city + \", \" + province + \", \" + region}\n                                    </h6>\n\n                                </CCardBody>\n                            </CCard>\n                            <CCard className=\"mt-3\">\n                                <CCardHeader>\n                                    <span style={{ fontSize: \"14px\", fontWeight: \"400\" }} className=\"text-black-50\">\n                                        Order ID: {order && order.orderId}\n                                    </span>\n                                </CCardHeader>\n                                <CCardBody>\n                                    <CContainer>\n                                        {order.orderItems && order.orderItems.map((item, index) => {\n\n                                            return (\n                                                <OrderCard item={item} key={index} />\n                                            )\n                                        })}\n                                    </CContainer>\n\n\n                                </CCardBody>\n                            </CCard>\n                            <CCard className=\"mt-3\">\n                                <CCardHeader>\n                                    <h5 className=\"text-black-50\">Summary Payment Details</h5>\n\n                                </CCardHeader>\n                                <CCardBody className=\"d-flex justify-content-between\">\n                                    <div className=\"d-flex justify-content-center flex-column\">\n                                        <a onClick={this.downloadQRCode} style={{ cursor: \"pointer\" }}>\n                                            <QRCode\n                                                id=\"qrCodeEl\"\n                                                value={String(qrValue)}\n                                                // renderAs=\"svg\"\n                                                includeMargin={true}\n                                            />\n                                        </a>\n\n                                        <CButton onClick={this.downloadQRCode} color=\"link\">Download QR</CButton>\n                                    </div>\n                                    <div className=\"d-flex flex-column\">\n                                        <div className=\"font-style mt-2\">\n                                            <span className=\"text-black-50 me-2\">\n                                                Date of Ordered:\n                                            </span>\n                                            <span className=\"font-style\">{order.orderedAt}</span>\n                                        </div>\n\n                                        <div className=\"font-style mt-2\">\n                                            <span className=\"text-black-50 me-2 font-style\">\n                                                Payment Method:\n                                            </span>\n                                            <span className=\"font-style\">{order.paymentMethod && order.paymentMethod.paymentMethod}</span>\n\n                                        </div>\n                                        <div className=\"font-style mt-2\">\n                                            <span className=\"text-black-50 me-2 font-style\">\n                                                Order Status:\n                                            </span>\n                                            <span className=\"text-danger\" >{order.orderStatus}</span>\n\n                                        </div>\n                                        <div className=\"mt-2\">\n                                            <span className=\" font-style text-black-50 me-2\">\n                                                Total Amount\n                                            </span>\n                                            <span className=\"font-style\">\n                                                &#8369;{order.totalAmount && order.totalAmount.toFixed(2)}\n                                            </span>\n                                        </div>\n                                    </div>\n                                </CCardBody>\n                            </CCard>\n                        </div>\n\n                    </div>\n                }\n            </>\n        )\n    }\n}\nconst mapStateToProps = (state) => {\n    return {\n        orderResponse: state.orderResponse,\n        messageResponse: state.messageResponse\n    }\n}\nexport default connect(mapStateToProps, {\n    getOrderByOrderId,\n    clearMessage\n})(OrderDetails)\n"],"sourceRoot":""}