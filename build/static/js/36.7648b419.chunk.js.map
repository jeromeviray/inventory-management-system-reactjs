{"version":3,"sources":["components/modals/order/TrackingInfoModal.js","components/orderTabContent/Orders.js","service/apiActions/modalAction/modalAction.js","service/restAPI/OrderApiService.js","service/apiActions/indexAction.js","service/apiActions/orderAction/orderAction.js","components/orderTabContent/OrderCard.js","components/modals/scanBarcode/ScanBarcodeModal.js","service/apiActions/scannerAction/scannerAction.js","service/restAPI/CommentApiService.js","service/apiActions/commentAction/commentAction.js"],"names":["TrackingInfoModal","Component","state","visible","icon","action","loading","trackingNumber","trackingUrl","validated","manageTrackingInfoModal","prevProps","prevState","modalVisible","this","props","order","console","log","setState","brandName","brandId","handleOnChange","event","name","target","value","handleOnSubmit","preventDefault","updateOrderStatus","orderId","then","setTrackingInfoModal","componentDidUpdate","render","onDismiss","className","id","onSubmit","onChange","type","placeholder","required","htmlFor","invalid","pattern","color","variant","onClick","disabled","form","size","connect","modalVisibleResponse","userResponse","messageResponse","Orders","constructor","super","message","status","orders","data","totalCounts","token","permission","path","updated","query","orderReviews","getOrders","manageorderRepsonse","orderResponse","manageScannerResponse","scannerResponse","decoded","manageHrefLinkBasedInPermission","Roles","SUPER_ADMIN","ADMIN","renderCustomerAction","orderStatus","paymentStatus","orderButton","cancelButtonIfNotPaid","handleOrder","toLowerCase","handleOnSearch","handlePageClick","page","selected","handleOrderReview","bind","componentDidMount","accessToken","roles","credentials","roleName","getPermission","href","orderData","index","findIndex","o","splice","length","toUpperCase","totalCountChange","renderOrderAction","style","fontWeight","fontStyle","handleOrderView","formattedReviews","key","push","rating","comment","anonymous","published","product","parseInt","submitted","saveComments","update","item","orderIndex","ctt2","comments","ctt","ct","fontSize","ScanBarcodeModal","content","setScanModal","map","hasPendingReview","orderItems","canReview","canViewReview","firstName","lastName","street","barangay","province","region","city","phoneNumber","customerAddress","OrderCard","Date","float","sm","lg","orderedAt","paymentMethod","shippingFee","shippingAmount","toFixed","totalAmount","to","pathname","config","api","private","prefixFrontendUrl","previousLabel","nextLabel","breakLabel","breakClassName","pageCount","totalPages","marginPagesDisplayed","pageRangeDisplayed","onPageChange","containerClassName","activeClassName","clearMessage","setProductModal","async","dispatch","SET_PRODUCTEDITMODAL_VISIBILIT","payload","setProductDetailsModal","SET_PRODUCT_DETAILS_MODAL","editProductModal","updateProduct","EDIT_PRODUCT_MODAL","setAlertModal","alert","module","ALERT_MODAL","setAlertBanModal","ALERT_BAN_MODAL","setStoreModal","storeInfo","UDPATE_STORE_INFORMATION","addBrandModal","branch","ADD_BRAND_MODAL","brand","addCategoryModal","category","ADD_CATEGORY_MODAL","addAccountModal","employee","ADD_EMPLOYEE_MODAL","changePasswordModal","CHANGE_PASSWORD_MODAL","setLoginModal","LOGIN_MODAL","setAddressModal","address","SET_ADDRESS_MODAL","setSupplierModal","supplier","SET_SUPPLIER_MODAL","setSupplyModal","supply","SET_SUPPLY_MODAL","SET_SCAN_MODAL","setPromoModal","promo","SET_PROMO_MODAL","setTermAndConditionModal","termsAndCondition","SET_TERMS_AND_CONDITION_MODAL","setCarouselModal","carousel","SET_CAROULSE_MDOAL","SET_TRACKING_INFO_MODAL","limit","axios","get","headers","authHeader","params","getPaymentTransactions","updateOrderPaymentStatus","put","placeOrderDetails","orderDetails","post","customerAddressId","addressId","paymentId","paymentMethodId","cartItems","items","shippingFeeId","getOrderByOrderId","validateCart","handleError","error","errorMessage","response","toString","code","SET_MESSAGE","OrderApiService","GET_ORDERS","orderStatusCount","orderCounts","Promise","resolve","reject","getOrderItems","ORDER_ITEMS","placeOrder","orderDetials","PLACE_ORDER","GET_ORDER_BY_ID","UPDATE_ORDER_STATUS","UPDATE_PAYMENT_STATUS","GET_PAYMENT_TRANSACTIONS","payments","VALIDATE_CART","error_messages","join","orderItem","isSubmitted","rounded","src","fileImages","baseUrl","fileName","NO_IMAGE_BASE64","width","height","md","productName","productPrice","quantity","amount","count","isHalf","edit","newRating","rows","BarcodeScannerComponent","React","lazy","manageModalVisible","stopStreaming","decodeBarcode","handleDecodeBarcode","handleOnClose","facingMode","alignment","fallback","dismissible","delay","stopStream","torch","onUpdate","err","result","text","getDecodedBarcode","GET_DECODED_BARCODE","getComments","productId","saveComment","commentDetails","deleteComment","commentId","delete","CommentApiService","GET_COMMENTS","wishlistDetails","ADD_COMMENT"],"mappings":"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","file":"static/js/36.7648b419.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport {\n    CModal,\n    CModalHeader,\n    CModalBody,\n    CModalFooter,\n    CButton,\n    CModalTitle,\n    CSpinner,\n    CForm,\n    CFormFloating,\n    CFormControl,\n    CFormLabel,\n    CFormFeedback,\n} from \"@coreui/react\"\nimport { connect } from 'react-redux'\nimport { setTrackingInfoModal } from 'src/service/apiActions/modalAction/modalAction'\nimport { updateOrderStatus } from 'src/service/apiActions/orderAction/orderAction'\nexport class TrackingInfoModal extends Component {\n    state = {\n        visible: false,\n        icon: \"\",\n        action: \"\",\n        loading: false,\n        trackingNumber: '',\n        trackingUrl: '',\n        validated: false\n    }\n    componentDidUpdate(prevProps, prevState) {\n        this.manageTrackingInfoModal(prevProps, prevState)\n    }\n\n    manageTrackingInfoModal = (prevProps, prevState) => {\n        if (prevProps.modalVisible !== this.props.modalVisible) {\n            let { visible, action, order, icon } = this.props.modalVisible\n            console.log(order)\n            if (action === \"MarkAsShipped\") {\n                this.setState({\n                    visible: visible,\n                    action: action,\n                    icon: icon,\n                    order: order\n                })\n            } else if (action === \"close\") {\n                this.setState({\n                    visible: visible,\n                    action: \"\",\n                    icon: \"\",\n                    brandName: \"\",\n                    brandId: \"\",\n                })\n            }\n        }\n    }\n    handleOnChange = (event) => {\n        let name = event.target.name\n        this.setState({\n            [name]: event.target.value\n        })\n    }\n    handleOnSubmit = (event) => {\n        const { order, trackingNumber, trackingUrl } = this.state\n        event.preventDefault()\n\n        this.setState({\n            validated: true\n        })\n        if (trackingNumber && trackingUrl) {\n            this.props.updateOrderStatus(order.orderId, 'shipped', trackingNumber, trackingUrl).then(() => {\n                this.props.setTrackingInfoModal(false, \"close\", \"\", \"\")\n\n            })\n        }\n\n\n        // console.log(form.checkValidity !== false)\n    }\n    render() {\n        let { visible, trackingNumber, trackingUrl, loading, validated } = this.state\n        return (\n            <div>\n                <CModal visible={visible}>\n                    <CModalHeader\n                        onDismiss={() => {\n                            this.props.setTrackingInfoModal(false, \"close\", \"\", \"\")\n                        }}\n                    >\n                        <CModalTitle>\n                            <div className=\"d-flex align-items-center\">\n                                Tracking Information\n                            </div>\n                        </CModalTitle>\n                    </CModalHeader>\n                    <CModalBody>\n                        <CForm\n                            id=\"brand-form\"\n                            onSubmit={this.handleOnSubmit}\n                            validated={validated}>\n                            <div className=\"mb-3\">\n                                <CFormFloating className=\"mb-3\">\n                                    <CFormControl\n                                        name=\"trackingNumber\"\n                                        value={trackingNumber}\n                                        onChange={this.handleOnChange}\n                                        type=\"number\"\n                                        id=\"floatingTrackingNumberInput\"\n                                        placeholder=\"Enter Tracking Number\"\n                                        required\n                                    />\n                                    <CFormLabel htmlFor=\"floatingTrackingNumberInput\">\n                                        Tracking Number\n                                    </CFormLabel>\n                                    <CFormFeedback invalid>Please enter the tracking number</CFormFeedback>\n                                </CFormFloating>\n\n                            </div>\n                            <div className=\"mb-3\">\n                                <CFormFloating className=\"mb-3\">\n                                    <CFormControl\n                                        name=\"trackingUrl\"\n                                        value={trackingUrl}\n                                        onChange={this.handleOnChange}\n                                        type=\"url\"\n                                        pattern=\"https://.*\"\n                                        id=\"floatingTrackingUrlInput\"\n                                        placeholder=\"Enter Tracking Url\"\n                                        required\n                                    />\n                                    <CFormLabel htmlFor=\"floatingTrackingUrlInput\">\n                                        Tracking Url\n                                    </CFormLabel>\n                                    <CFormFeedback invalid>Invalid Pattern of your Tracking Url</CFormFeedback>\n\n                                </CFormFloating>\n\n\n                            </div>\n                        </CForm>\n                    </CModalBody>\n                    <CModalFooter>\n                        <CButton\n                            color=\"dark\"\n                            variant=\"ghost\"\n                            onClick={() => {\n                                this.props.setTrackingInfoModal(false, \"close\", \"\", \"\")\n                            }}\n                        >\n                            Close\n                        </CButton>\n                        <CButton\n                            type=\"submit\"\n                            color=\"primary\"\n                            disabled={loading}\n                            form=\"brand-form\"\n                        >\n                            {loading && <CSpinner size=\"sm\" className=\"ms-1\" />}\n                            Save Tracking Information\n                        </CButton>\n                    </CModalFooter>\n                </CModal>\n            </div>\n        )\n    }\n}\nconst mapStateToProps = (state) => {\n    return {\n        modalVisible: state.modalVisibleResponse,\n        userResponse: state.userResponse,\n        messageResponse: state.messageResponse,\n    }\n}\nexport default connect(mapStateToProps, {\n    setTrackingInfoModal,\n    updateOrderStatus\n})(TrackingInfoModal)\n","import React, { Component } from \"react\"\nimport {\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCardFooter,\n  CRow,\n  CContainer,\n  CButton,\n  CForm,\n  CCol,\n  CFormControl,\n  CInputGroup,\n  CTooltip\n} from \"@coreui/react\"\nimport { Link } from \"react-router-dom\"\n//action\nimport { saveComments } from \"src/service/apiActions/commentAction/commentAction\"\nimport {\n  getOrders,\n  updateOrderStatus,\n} from \"src/service/apiActions/orderAction/orderAction\"\nimport { clearMessage } from \"src/service/apiActions/messageAction/messageAction\"\nimport { connect } from \"react-redux\"\nimport OrderCard from \"./OrderCard\"\nimport Roles from \"src/router/config\"\nimport ReactPaginate from \"react-paginate\"\nimport TrackingInfoModal from \"../modals/order/TrackingInfoModal\"\nimport { setTrackingInfoModal } from \"src/service/apiActions/modalAction/modalAction\"\nimport config from \"../../config\"\nimport * as BiIcons from \"react-icons/bi\"\n\nimport * as FaIcons from 'react-icons/fa'\nimport { setScanModal } from \"src/service/apiActions/modalAction/modalAction\"\nimport ScanBarcodeModal from \"src/components/modals/scanBarcode/ScanBarcodeModal\"\n\nexport class Orders extends Component {\n  state = {\n    message: \"\",\n    status: \"\",\n    action: \"\",\n    orders: {\n      data: [],\n      totalCounts: 0\n    },\n    token: \"\",\n    permission: \"\",\n    path: \"\",\n    updated: false,\n    visible: false,\n    query: ''\n  }\n\n  orderReviews = {}\n\n  constructor(props) {\n    super(props)\n    this.state.status = props.status\n    this.handleOrderReview = this.handleOrderReview.bind(this)\n  }\n  componentDidMount() {\n    let { type, accessToken, roles } = this.props.userResponse.credentials\n    let token = type + accessToken\n    let roleName = roles.roleName\n    let getPermission = roleName ? roleName : roles\n    let href = this.manageHrefLinkBasedInPermission(getPermission)\n\n    this.setState({\n      token: token,\n      permission: roles.roleName ? roles.roleName : roles,\n      path: href,\n    })\n    const { query } = this.state\n    this.props.getOrders(this.state.status, query, 0, 10)\n  }\n  componentDidUpdate(prevProps, prevState) {\n    this.manageorderRepsonse(prevProps, prevState)\n    this.manageTrackingInfoModal(prevProps, prevState)\n    this.manageScannerResponse(prevProps, prevState)\n  }\n\n  manageTrackingInfoModal = (prevProps, prevState) => {\n    if (prevProps.modalVisible !== this.props.modalVisible) {\n      let { action } = this.props.modalVisible\n\n      if (action === \"close\") {\n        this.props.getOrders(this.state.status, this.state.query, 0, 10)\n      }\n    }\n  }\n  manageorderRepsonse = (prevProps, prevState) => {\n    if (prevProps.orderResponse !== this.props.orderResponse) {\n      let { status, action, data } = this.props.orderResponse\n      if (status === 200 && action === \"GET_ORDERS\") {\n        this.setState({\n          orders: data.orders,\n        })\n      }\n    }\n  }\n  manageScannerResponse = (prevProps, prevState) => {\n    if (prevProps.scannerResponse !== this.props.scannerResponse) {\n      let { action, decoded } = this.props.scannerResponse\n      if (action === \"DECODEDBARCODE\") {\n        // const { page, limit, status } = this.state\n        // this.getProducts(decoded, status, page, limit)\n        this.props.getOrders(this.state.status, decoded, 0, 10)\n        this.setState({ query: decoded })\n      }\n    }\n  }\n  manageHrefLinkBasedInPermission = (permission) => {\n    if (permission === Roles.SUPER_ADMIN || permission === Roles.ADMIN) {\n      return \"/app/order/\"\n    } else {\n      return \"/user/order/\"\n    }\n  }\n\n  handleOrder(orderData, orderStatus) {\n    let orderId = orderData.orderId\n    this.props.updateOrderStatus(orderId, orderStatus, '', '').then(() => {\n      let orders = this.state.orders.data\n      const order = this.props.orderResponse.data\n      const index = orders.findIndex((o) => o.orderId == orderId)\n      const { status, query } = this.state\n\n      orders.splice(index, 1)\n      if (orders.length == 0) {\n        this.props.getOrders(status, query, 0, 10)\n      } else {\n        let totalCounts = this.props.totalCounts\n        if (typeof totalCounts[orderStatus.toUpperCase()] == \"undefined\") {\n          totalCounts[orderStatus.toUpperCase()] = 0\n        }\n        if (orderStatus == \"payment_received\") {\n          totalCounts[orderData.orderStatus.toUpperCase()]--\n          totalCounts[orderStatus.toUpperCase()]++\n          this.props.totalCountChange(totalCounts)\n          this.setState({\n            orders: orders,\n          })\n        }\n      }\n    })\n  }\n  renderCustomerAction = (orderStatus, order, paymentStatus) => {\n    let orderButton = <></>\n    let cancelButtonIfNotPaid = paymentStatus === \"Paid\" ? <></> :\n      <CButton\n        onClick={() => {\n          this.handleOrder(order, \"cancel\")\n        }}\n      >\n        Cancel Order\n      </CButton>\n\n    switch (orderStatus.toLowerCase()) {\n      case \"pending\":\n        orderButton = (cancelButtonIfNotPaid)\n        break\n      case \"delivered\":\n        orderButton =\n          paymentStatus === \"Paid\" ? (\n            <CButton\n              onClick={() => {\n                this.handleOrder(order, \"request_refund\")\n              }}\n            >\n              Request Refund\n            </CButton>\n          ) : (\n            <></>\n          )\n        break\n    }\n    return orderButton\n  }\n  renderOrderAction(orderStatus, order, paymentStatus) {\n    const { visible } = this.state\n    let orderButton = <></>\n    switch (orderStatus.toLowerCase()) {\n      case \"pending\":\n        orderButton = (\n          <CButton\n            onClick={() => {\n              this.handleOrder(order, \"confirmed\")\n            }}\n          >\n            Confirm Order\n          </CButton>\n        )\n        break\n      case \"confirmed\":\n        orderButton = (\n          <CButton\n            onClick={() => {\n              this.props.setTrackingInfoModal(!visible, \"MarkAsShipped\", order, \"\")\n            }}\n          >\n            Mark as Shipped\n          </CButton>\n        )\n        break\n      case \"shipped\":\n        orderButton = (\n          <CButton\n            onClick={() => {\n              this.handleOrder(order, \"delivered\")\n            }}\n          >\n            Mark as Delivered\n          </CButton>\n        )\n        break\n      case \"delivered\":\n        orderButton = (\n          paymentStatus === \"Paid\" ? <span\n            className=\"text-success p-2\"\n            style={{ fontWeight: \"500\", fontStyle: \"italic\" }}\n          >\n            Payment Received\n          </span> :\n            <CButton\n              onClick={() => {\n                this.handleOrder(order, \"payment_received\")\n              }}\n              disabled={paymentStatus === \"Paid\" ? true : false}\n            >\n\n              Mark as Payment Received\n            </CButton>\n        )\n        break\n      case \"request_refund\":\n        orderButton = (\n          <CButton\n            onClick={() => {\n              this.handleOrder(order, \"accept_refund\")\n            }}\n          >\n            Accept Refund\n          </CButton>\n        )\n        break\n    }\n    return orderButton\n  }\n\n  handleOrderView(event, order) {\n    event.preventDefault()\n\n    let formattedReviews = []\n    let orderReviews = this.orderReviews[order.orderId]\n    for (var key in orderReviews) {\n      let value = orderReviews[key]\n      formattedReviews.push({\n        rating: value.rating,\n        message: value.comment,\n        anonymous: true,\n        published: 0,\n        product: {\n          id: parseInt(key),\n        },\n      })\n      this.orderReviews[order.orderId][key].submitted = true\n    }\n    this.props.saveComments(order.orderId, formattedReviews)\n    this.setState({ update: true })\n  }\n\n  handleOrderReview(orderId, item, rating, comment) {\n    const { orders } = this.state\n    let orderIndex = orders.data.findIndex((ctt2) => ctt2.orderId == orderId)\n    let { comments } = orders.data[orderIndex]\n\n    let submitted = false\n\n    if (typeof this.orderReviews[orderId] == \"undefined\") {\n      this.orderReviews[orderId] = {\n        [item.product.id]: {\n          rating: rating,\n          comment: comment,\n          submitted: false,\n        },\n      }\n    } else if (\n      typeof this.orderReviews[orderId][item.product.id] !== \"undefined\" &&\n      this.orderReviews[orderId][item.product.id].submitted\n    ) {\n      comment = this.orderReviews[orderId][item.product.id].comment\n      submitted = this.orderReviews[orderId][item.product.id].submitted\n    }\n\n    let index =\n      comments && comments.findIndex((ctt) => ctt.product.id == item.product.id)\n\n    if (index >= 0) {\n      const ct = comments[index]\n      rating = ct.rating\n      comment = ct.message\n      submitted = true\n    }\n\n    this.orderReviews[orderId][item.product.id] = {\n      rating: rating,\n      comment: comment,\n      submitted: submitted,\n    }\n  }\n  handleOnSearch = (event) => {\n    const { status, query } = this.state\n    this.props.getOrders(status, query, 0, 10)\n    this.setState({\n      query: event.target.value\n    })\n  }\n  handlePageClick = (data) => {\n    let page = data.selected\n    this.setState({ page: page })\n    const { status, query } = this.state\n    this.props.getOrders(status, query, page, 10)\n  }\n  render() {\n    let { message, orders, permission, path, query, visible } = this.state\n    const fontStyle = {\n      fontSize: \"14px\",\n      fontWeight: \"400\",\n    }\n    return (\n      <>\n        <ScanBarcodeModal />\n        <TrackingInfoModal />\n        <div className=\"d-flex justify-content-end mb-2\">\n          <CForm className=\"w-50\">\n            <CInputGroup>\n              <CFormControl\n                type=\"text\"\n                id=\"floatingInput\"\n                placeholder=\"Search\"\n                className=\"p-2\"\n                value={query}\n                onChange={this.handleOnSearch}\n              />\n              <CButton\n                type=\"button\"\n                color=\"info\"\n                variant=\"outline\"\n                id=\"button-addon2\"\n                className=\"\"\n              >\n                <FaIcons.FaSearch />\n              </CButton>\n            </CInputGroup>\n          </CForm>\n          <div className=\"text-center\">\n            <CTooltip content=\"Scanner barcode\">\n              <CButton\n                className=\"pt-2 pb-2 ms-2\"\n                type=\"button\"\n                color=\"info\"\n                variant=\"outline\"\n                id=\"btn-scan-barcode\"\n                onClick={() => this.props.setScanModal(!visible, \"barcode\")}\n              >\n                <BiIcons.BiBarcodeReader size=\"24\" />\n              </CButton>\n            </CTooltip>\n          </div>\n        </div>\n        {orders.data && orders.data.length < 0 ? (\n          <CCard>\n            <CCardBody>\n              <div className=\"text-center\">No Order Data</div>\n            </CCardBody>\n          </CCard>\n        ) : (\n          orders.data && orders.data.map((order, index) => {\n            let hasPendingReview =\n              order.orderItems.length != order.comments.length\n\n            if (hasPendingReview && this.orderReviews[order.orderId]) {\n              hasPendingReview = false\n              for (var key in this.orderReviews[order.orderId]) {\n                if (this.orderReviews[order.orderId][key].submitted == false) {\n                  hasPendingReview = true\n                }\n              }\n            }\n\n            const canReview =\n              (order.orderStatus == \"DELIVERED\" ||\n                order.orderStatus == \"PAYMENT_RECEIVED\") &&\n              permission !== Roles.SUPER_ADMIN &&\n              permission !== Roles.ADMIN\n            const canViewReview =\n              (order.orderStatus == \"DELIVERED\" ||\n                order.orderStatus == \"PAYMENT_RECEIVED\") &&\n              (permission == Roles.SUPER_ADMIN || permission == Roles.ADMIN)\n\n            const {\n              firstName,\n              lastName,\n              street,\n              barangay,\n              province,\n              region,\n              city,\n              phoneNumber,\n            } = order.customerAddress\n            let paymentStatus = \"Payment Pending\"\n            switch (order.paymentStatus) {\n              case 1:\n                paymentStatus = \"Paid\"\n                break\n              case 2:\n                paymentStatus = \"Failed\"\n                break\n              case 3:\n                paymentStatus = \"Refunded\"\n                break\n            }\n            return (\n              <CCard className=\"mb-3\" key={index}>\n                <CCardHeader>\n                  <CRow className=\"p-2\">\n                    <span\n                      style={{ fontSize: \"14px\", fontWeight: \"400\" }}\n                      className=\"text-black-50\"\n                    >\n                      Order ID: {order.orderId}\n                    </span>\n                    <span\n                      style={{ fontSize: \"14px\", fontWeight: \"400\" }}\n                      className=\"text-black-50\"\n                    >\n                      Customer Name: {firstName + \" \" + lastName}\n                    </span>\n                    <span\n                      style={{ fontSize: \"14px\", fontWeight: \"400\" }}\n                      className=\"text-black-50\"\n                    >\n                      Mobile: {phoneNumber}\n                    </span>\n                    <span\n                      style={{ fontSize: \"14px\", fontWeight: \"400\" }}\n                      className=\"text-black-50\"\n                    >\n                      Address:{\" \"}\n                      {street +\n                        \" \" +\n                        \" \" +\n                        barangay +\n                        \", \" +\n                        city +\n                        \", \" +\n                        province}\n                    </span>\n                    {order.orderStatus === \"SHIPPED\" ?\n                      <>\n\n                        <span\n                          style={{ fontSize: \"14px\", fontWeight: \"400\" }}\n                          className=\"text-black-50\"\n                        >\n                          Tracking Number: {order.trackingNumber}\n                        </span>\n                        <span\n                          style={{ fontSize: \"14px\", fontWeight: \"400\" }}\n                          className=\"text-black-50\"\n                        >\n                          Tracking Url: {order.trackingUrl}\n                        </span>\n                      </> :\n                      <></>}\n                  </CRow>\n                </CCardHeader>\n                <CCardBody>\n                  <CForm\n                    onSubmit={(event) => {\n                      this.handleOrderView(event, order)\n                    }}\n                  >\n                    <CContainer key={new Date()}>\n                      {order.orderItems.map((item, index) => {\n                        this.handleOrderReview(order.orderId, item, 5, \"\")\n                        const { rating, comment, submitted } =\n                          this.orderReviews[order.orderId][item.product.id]\n                        return (\n                          <OrderCard\n                            item={item}\n                            canReview={canReview}\n                            canViewReview={canViewReview}\n                            orderId={order.orderId}\n                            comment={comment}\n                            rating={rating}\n                            key={item.id}\n                            submitted={submitted}\n                            handleOrderReview={this.handleOrderReview}\n                            permission={permission}\n                          />\n                        )\n                      })}\n                    </CContainer>\n                    {hasPendingReview && canReview && (\n                      <CButton type=\"submit\" style={{ float: \"right\" }}>\n                        Submit Product Review\n                      </CButton>\n                    )}\n                  </CForm>\n                </CCardBody>\n                <CCardFooter className=\"p-4\">\n                  <CRow className=\"\">\n                    <CCol sm=\"12\" lg=\"6\">\n                      <div className=\"d-flex flex-column\">\n                        <div style={fontStyle} className=\"mt-2\">\n                          <span className=\"text-black-50 me-2\">\n                            Date of Ordered:\n                          </span>\n                          <span style={{ fontWeight: \"500\" }}>\n                            {order.orderedAt}\n                          </span>\n                        </div>\n\n                        <div style={fontStyle} className=\"mt-2\">\n                          <span\n                            style={fontStyle}\n                            className=\"text-black-50 me-2\"\n                          >\n                            Payment Method:\n                          </span>\n                          <span style={{ fontWeight: \"500\" }}>\n                            {order.paymentMethod.paymentMethod}\n                          </span>\n                        </div>\n                        <div style={fontStyle} className=\"mt-2\">\n                          <span\n                            style={fontStyle}\n                            className=\"text-black-50 me-2\"\n                          >\n                            Payment Status:\n                          </span>\n                          <span style={{ fontWeight: \"500\" }}>\n                            {paymentStatus}\n                          </span>\n                        </div>\n                        <div style={fontStyle} className=\"mt-2\">\n                          <span\n                            style={fontStyle}\n                            className=\"text-black-50 me-2\"\n                          >\n                            Order Status:\n                          </span>\n                          <span\n                            className=\"text-danger\"\n                            style={{ fontWeight: \"500\" }}\n                          >\n                            {order.orderStatus}\n                          </span>\n                        </div>\n                        <div className=\"mt-2\">\n                          <span\n                            style={fontStyle}\n                            className=\"text-black-50 me-2\"\n                          >\n                            Shipping Fee\n                          </span>\n                          <span style={{ fontWeight: \"500\" }}>\n                            &#8369;{order.shippingFee ? order.shippingFee.shippingAmount.toFixed(2) : 0}\n                          </span>\n                        </div>\n                        <div className=\"mt-2\">\n                          <span\n                            style={fontStyle}\n                            className=\"text-black-50 me-2\"\n                          >\n                            Total Amount\n                          </span>\n                          <span style={{ fontWeight: \"500\" }}>\n                            &#8369;{order.totalAmount.toFixed(2)}\n                          </span>\n                        </div>\n                      </div>\n                    </CCol>\n                    <CCol sm=\"12\" lg=\"6\">\n                      <div className=\"d-flex align-items-end  h-100 justify-content-end mt-3\">\n                        {permission === Roles.SUPER_ADMIN ||\n                          permission === Roles.ADMIN\n                          ? this.renderOrderAction(\n                            this.state.status,\n                            order,\n                            paymentStatus,\n                          )\n                          : this.renderCustomerAction(\n                            this.state.status,\n                            order,\n                            paymentStatus,\n                          )}\n                        <Link\n                          to={{\n                            pathname:\n                              config.api.private.prefixFrontendUrl +\n                              path +\n                              order.orderId,\n                            state: order.orderId,\n                          }}\n                          className=\"m-2\"\n                        >\n                          View More\n                        </Link>\n                      </div>\n                    </CCol>\n                  </CRow>\n                </CCardFooter>\n              </CCard>\n            )\n          })\n        )}\n        <ReactPaginate\n          previousLabel={\"previous\"}\n          nextLabel={\"next\"}\n          breakLabel={\"...\"}\n          breakClassName={\"break-me\"}\n          pageCount={orders.totalPages}\n          marginPagesDisplayed={2}\n          pageRangeDisplayed={5}\n          onPageChange={this.handlePageClick}\n          containerClassName={\"pagination\"}\n          activeClassName={\"active\"}\n        />\n      </>\n    )\n  }\n}\nconst mapStateToProps = (state) => {\n  return {\n    orderResponse: state.orderResponse,\n    messageResponse: state.messageResponse,\n    userResponse: state.userResponse,\n    modalVisible: state.modalVisibleResponse,\n    scannerResponse: state.scannerResponse,\n\n  }\n}\nexport default connect(mapStateToProps, {\n  getOrders,\n  clearMessage,\n  updateOrderStatus,\n  saveComments,\n  setTrackingInfoModal,\n  setScanModal\n})(Orders)\n","import {\n  ADD_BRANCH_MODAL,\n  ALERT_MODAL,\n  EDIT_PRODUCT_MODAL,\n  SET_PRODUCTEDITMODAL_VISIBILIT,\n  ADD_BRAND_MODAL,\n  ADD_CATEGORY_MODAL,\n  ADD_EMPLOYEE_MODAL,\n  SET_PRODUCT_DETAILS_MODAL,\n  LOGIN_MODAL,\n  SET_ADDRESS_MODAL,\n  SET_SUPPLIER_MODAL,\n  SET_SUPPLY_MODAL,\n  SET_SCAN_MODAL,\n  SET_PROMO_MODAL,\n  ALERT_BAN_MODAL,\n  CHANGE_PASSWORD_MODAL,\n  UDPATE_STORE_INFORMATION,\n  SET_TERMS_AND_CONDITION_MODAL,\n  SET_CAROULSE_MDOAL,\n  SET_TRACKING_INFO_MODAL,\n} from \"src/service/redux/constants\"\n\nexport const setProductModal = (visible, action, icon) => async (dispatch) => {\n  dispatch({\n    type: SET_PRODUCTEDITMODAL_VISIBILIT,\n    payload: {\n      status: 200,\n      data: {\n        visible: visible,\n        action: action,\n        icon: icon,\n      },\n    },\n  })\n}\nexport const setProductDetailsModal =\n  (visible, action, product) => async (dispatch) => {\n    dispatch({\n      type: SET_PRODUCT_DETAILS_MODAL,\n      payload: {\n        status: 200,\n        data: {\n          visible: visible,\n          action: action,\n          product: product,\n        },\n      },\n    })\n  }\nexport const editProductModal =\n  (visible, action, updateProduct, icon) => async (dispatch) => {\n    dispatch({\n      type: EDIT_PRODUCT_MODAL,\n      payload: {\n        status: 200,\n        data: {\n          visible: visible,\n          action: action,\n          product: updateProduct,\n          icon: icon,\n        },\n      },\n    })\n  }\nexport const setAlertModal =\n  (alert, action, module, id) => async (dispatch) => {\n    dispatch({\n      type: ALERT_MODAL,\n      payload: {\n        action: action,\n        module: module,\n        alert: alert,\n        data: {\n          id: id,\n        },\n      },\n    })\n  }\nexport const setAlertBanModal =\n  (alert, action, module, id) => async (dispatch) => {\n    dispatch({\n      type: ALERT_BAN_MODAL,\n      payload: {\n        action: action,\n        module: module,\n        alert: alert,\n        data: {\n          id: id,\n        },\n      },\n    })\n  }\nexport const setStoreModal =\n  (visible, action, storeInfo, icon) => async (dispatch) => {\n    dispatch({\n      type: UDPATE_STORE_INFORMATION,\n      payload: {\n        status: 200,\n        data: {\n          visible: visible,\n          action: action,\n          storeInfo: storeInfo,\n          icon: icon,\n        },\n      },\n    })\n  }\n\nexport const addBrandModal =\n  (visible, action, branch, icon) => async (dispatch) => {\n    dispatch({\n      type: ADD_BRAND_MODAL,\n      payload: {\n        status: 200,\n        data: {\n          visible: visible,\n          action: action,\n          brand: branch,\n          icon: icon,\n        },\n      },\n    })\n  }\n\nexport const addCategoryModal =\n  (visible, action, category, icon) => async (dispatch) => {\n    dispatch({\n      type: ADD_CATEGORY_MODAL,\n      payload: {\n        status: 200,\n        data: {\n          visible: visible,\n          action: action,\n          category: category,\n          icon: icon,\n        },\n      },\n    })\n  }\n\nexport const addAccountModal =\n  (visible, action, employee, icon) => async (dispatch) => {\n    dispatch({\n      type: ADD_EMPLOYEE_MODAL,\n      payload: {\n        status: 200,\n        data: {\n          visible: visible,\n          action: action,\n          employee: employee,\n          icon: icon,\n        },\n      },\n    })\n  }\nexport const changePasswordModal =\n  (visible, action, employee, icon) => async (dispatch) => {\n    dispatch({\n      type: CHANGE_PASSWORD_MODAL,\n      payload: {\n        status: 200,\n        data: {\n          visible: visible,\n          action: action,\n          employee: employee,\n          icon: icon,\n        },\n      },\n    })\n  }\nexport const setLoginModal = (visible, action) => async (dispatch) => {\n  dispatch({\n    type: LOGIN_MODAL,\n    payload: {\n      data: {\n        visible: visible,\n        action: action,\n      },\n    },\n  })\n}\n\nexport const setAddressModal =\n  (visible, action, address, icon) => async (dispatch) => {\n    dispatch({\n      type: SET_ADDRESS_MODAL,\n      payload: {\n        data: {\n          visible: visible,\n          action: action,\n          address: address,\n          icon: icon,\n        },\n      },\n    })\n  }\n\nexport const setSupplierModal =\n  (visible, action, supplier, icon) => async (dispatch) => {\n    dispatch({\n      type: SET_SUPPLIER_MODAL,\n      payload: {\n        action: action,\n        data: {\n          visible: visible,\n          icon: icon,\n          supplier: supplier,\n        },\n      },\n    })\n  }\nexport const setSupplyModal =\n  (visible, action, supply, icon) => async (dispatch) => {\n    dispatch({\n      type: SET_SUPPLY_MODAL,\n      payload: {\n        action: action,\n        data: {\n          visible: visible,\n          icon: icon,\n          supply: supply,\n        },\n      },\n    })\n  }\n\nexport const setScanModal = (visible, action) => async (dispatch) => {\n  dispatch({\n    type: SET_SCAN_MODAL,\n    payload: {\n      action: action,\n      data: {\n        visible: visible,\n      },\n    },\n  })\n}\nexport const setPromoModal =\n  (visible, action, promo, icon) => async (dispatch) => {\n    dispatch({\n      type: SET_PROMO_MODAL,\n      payload: {\n        action: action,\n        data: {\n          visible: visible,\n          icon: icon,\n          promo: promo,\n        },\n      },\n    })\n  }\nexport const setTermAndConditionModal =\n  (visible, action, termsAndCondition, icon) => async (dispatch) => {\n    dispatch({\n      type: SET_TERMS_AND_CONDITION_MODAL,\n      payload: {\n        status: 200,\n        data: {\n          visible: visible,\n          action: action,\n          termsAndCondition: termsAndCondition,\n          icon: icon,\n        },\n      },\n    })\n  }\nexport const setCarouselModal =\n  (visible, action, carousel, icon) => async (dispatch) => {\n    dispatch({\n      type: SET_CAROULSE_MDOAL,\n      payload: {\n        status: 200,\n        data: {\n          visible: visible,\n          action: action,\n          carousel: carousel,\n          icon: icon,\n        },\n      },\n    })\n  }\n\nexport const setTrackingInfoModal = (visible, action, order, icon) => async (dispatch) => {\n  dispatch({\n    type: SET_TRACKING_INFO_MODAL,\n    payload: {\n      status: 200,\n      data: {\n        visible: visible,\n        action: action,\n        order: order,\n        icon: icon\n      }\n    }\n  })\n}\n","import authHeader from '../auth/authHeader';\nimport axios from './RestApi';\n\nexport class OrderApiService {\n    getOrders(status, query, page, limit) {\n        return axios.get(\"/orders/status/\" + status, {\n            headers: authHeader(),\n            params: {\n                query: query,\n                page: page,\n                limit: limit\n            }\n        })\n    }\n\n    getPaymentTransactions(query, page, limit) {\n        return axios.get(\"/orders/payments\", {\n            headers: authHeader(),\n            params: {\n                query: query,\n                page: page,\n                limit: limit\n            }\n        })\n    }\n\n    updateOrderPaymentStatus(orderId, paymentStatus) {\n        return axios.put(\"/orders/\" + orderId + \"/paid/\" + paymentStatus, {}, {\n            headers: authHeader()\n        })\n    }\n\n\n    placeOrderDetails(orderDetails) {\n        return axios.post(\"/orders/checkout\", {\n            customerAddressId: orderDetails.addressId,\n            paymentId: orderDetails.paymentMethodId,\n            cartItems: orderDetails.items,\n            shippingFeeId: orderDetails.shippingFee\n        }, {\n            headers: authHeader()\n        })\n    }\n\n    getOrderByOrderId(orderId) {\n        return axios.get(\"/orders/\" + orderId, {\n            headers: authHeader()\n        })\n    }\n\n    updateOrderStatus(orderId, status, trackingNumber, trackingUrl) {\n        return axios.put(\"/orders/\" + orderId + \"/status/\" + status, {}, {\n            headers: authHeader(),\n            params: {\n                trackingNumber: trackingNumber,\n                trackingUrl: trackingUrl\n            }\n        })\n    }\n\n    validateCart(data) {\n        return axios.post(\"/orders/validate\", data, {\n            headers: authHeader()\n        })\n    }\n}\nexport default new OrderApiService();","import { SET_MESSAGE } from \"src/constants/userConstants\";\n\nexport const handleError = (error, dispatch) => {\n    const errorMessage =\n        (error.response &&\n            error.response.data &&\n            error.response.data.message) ||\n        error.message ||\n        error.toString();\n\n    const status = (error.response &&\n        error.response.data &&\n        error.response.data.code) ||\n        error.toString();\n\n    dispatch({\n        type: SET_MESSAGE,\n        payload: {\n            status: status,\n            data: {\n                message: errorMessage\n            }\n        }\n    })\n}","import { VALIDATE_CART, GET_ORDER_BY_ID, GET_ORDERS, ORDER_ITEMS, PLACE_ORDER, UPDATE_ORDER_STATUS, GET_PAYMENT_TRANSACTIONS, UPDATE_PAYMENT_STATUS } from \"src/service/redux/constants\";\nimport { SET_MESSAGE } from \"src/constants/userConstants\";\nimport OrderApiService from \"src/service/restAPI/OrderApiService\";\nimport { handleError } from \"../indexAction\";\n\nexport const getOrders = (status, query, page, limit) => async (dispatch) => {\n    return OrderApiService.getOrders(status, query, page, limit).then(\n        (response) => {\n            dispatch({\n                type: GET_ORDERS,\n                payload: {\n                    status: 200,\n                    action: \"GET_ORDERS\",\n                    data: {\n                        orders: response.data,\n                        orderStatusCount: response.data.orderCounts\n                    }\n                }\n            })\n            return Promise.resolve();\n        },\n        (error) => {\n            handleError(error, dispatch);\n            return Promise.reject();\n        }\n    )\n\n}\n\nexport const getOrderItems = (items) => async (dispatch) => {\n    dispatch({\n        type: ORDER_ITEMS,\n        payload: {\n            status: 200,\n            action: \"ORDERITEMS\",\n            data: {\n                items: items\n            }\n        }\n    })\n}\n\nexport const placeOrder = (orderDetials) => async (dispatch) => {\n    return OrderApiService.placeOrderDetails(orderDetials).then(\n        (response) => {\n            dispatch({\n                type: PLACE_ORDER,\n                payload: {\n                    status: 200,\n                    action: \"PLACE_ORDER\",\n                    data: {\n\n                    }\n                }\n            })\n            dispatch({\n                type: SET_MESSAGE,\n                payload: {\n                    status: 200,\n                    data: {\n                        message: \"Successfully Place your Order\",\n                        order: response.data\n                    }\n                }\n            })\n            return Promise.resolve();\n        },\n        (error) => {\n            handleError(error, dispatch);\n            return Promise.reject();\n        }\n    )\n}\n\nexport const getOrderByOrderId = (orderId) => async (dispatch) => {\n    return OrderApiService.getOrderByOrderId(orderId).then(\n        (response) => {\n            dispatch({\n                type: GET_ORDER_BY_ID,\n                payload: {\n                    status: 200,\n                    action: \"GETORDERBYID\",\n                    data: {\n                        order: response.data\n                    }\n                }\n            })\n            return Promise.resolve();\n        },\n        (error) => {\n            handleError(error, dispatch);\n            return Promise.reject();\n        }\n    )\n}\n\nexport const updateOrderStatus = (orderId, status, trackingNumber, trackingUrl) => async (dispatch) => {\n    return OrderApiService.updateOrderStatus(orderId, status, trackingNumber, trackingUrl).then(\n        (response) => {\n            dispatch({\n                type: UPDATE_ORDER_STATUS,\n                payload: {\n                    status: 200,\n                    action: UPDATE_ORDER_STATUS,\n                    data: {\n                        order: response.data\n                    }\n                }\n            })\n            dispatch({\n                type: SET_MESSAGE,\n                payload: {\n                    status: 200,\n                    data: {\n                        message: \"Successfully updated order \" + orderId + \" status to \" + status.toUpperCase(),\n                        order: response.data\n                    }\n                }\n            })\n            return Promise.resolve();\n        },\n        (error) => {\n            handleError(error, dispatch);\n            return Promise.reject();\n        }\n    )\n}\n\nexport const updateOrderPaymentStatus = (orderId, paymentStatus) => async (dispatch) => {\n    return OrderApiService.updateOrderPaymentStatus(orderId, paymentStatus).then(\n        (response) => {\n            dispatch({\n                type: UPDATE_PAYMENT_STATUS,\n                payload: {\n                    status: 200,\n                    action: UPDATE_PAYMENT_STATUS,\n                    data: {\n                        order: response.data\n                    }\n                }\n            })\n            dispatch({\n                type: SET_MESSAGE,\n                payload: {\n                    status: 200,\n                    data: {\n                        //message: \"Successfully updated order \" + orderId + \" status to \" + status.toUpperCase(),\n                    }\n                }\n            })\n            return Promise.resolve();\n        },\n        (error) => {\n            handleError(error, dispatch);\n            return Promise.reject();\n        }\n    )\n}\n\nexport const getPaymentTransactions = (query, page, limit) => async (dispatch) => {\n    return OrderApiService.getPaymentTransactions(query, page, limit).then(\n        (response) => {\n            dispatch({\n                type: GET_PAYMENT_TRANSACTIONS,\n                payload: {\n                    status: 200,\n                    action: \"GET_PAYMENT_TRANSACTIONS\",\n                    data: {\n                        payments: response.data,\n                    }\n                }\n            })\n            return Promise.resolve();\n        },\n        (error) => {\n            handleError(error, dispatch);\n            return Promise.reject();\n        }\n    )\n}\n\nexport const validateCart = (data) => async (dispatch) => {\n    return OrderApiService.validateCart(data).then(\n        (response) => {\n            dispatch({\n                type: VALIDATE_CART,\n                payload: {\n                    status: 200,\n                    action: VALIDATE_CART,\n                    data: response.data\n                }\n            })\n\n            if (response.data.error_messages.length > 0) {\n                dispatch({\n                    type: SET_MESSAGE,\n                    payload: {\n                        status: 400,\n                        data: {\n                            message: response.data.error_messages.join(\"\\n\")\n                        }\n                    }\n                })\n            }\n            return Promise.resolve();\n        },\n        (error) => {\n            handleError(error, dispatch);\n            return Promise.reject();\n        }\n    )\n}\n","import React, { Component } from \"react\"\nimport {\n  CCard,\n  CCardBody,\n  CRow,\n  CCol,\n  CImage,\n  CFormLabel,\n  CFormTextarea,\n} from \"@coreui/react\"\nimport { NO_IMAGE_BASE64 } from \"src/service/redux/constants\"\nimport ReactStars from \"react-rating-stars-component\"\n\nimport config from \"../../config\";\nimport Roles from \"src/router/config\";\n\nexport class OrderCard extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      orderItem: this.props.item,\n      canReview: this.props.canReview,\n      orderId: this.props.orderId,\n      comment: this.props.comment,\n      rating: this.props.rating,\n      submitted: this.props.submitted,\n      canViewReview: this.props.canViewReview,\n      permission: this.props.permission\n    }\n  }\n  render() {\n    let {\n      orderItem,\n      canReview,\n      rating,\n      comment,\n      orderId,\n      submitted,\n      canViewReview,\n      permission\n    } = this.state\n    let isSubmitted = submitted\n    if (canViewReview && !canReview) {\n      submitted = true\n    }\n    const fontStyle = {\n      fontSize: \"14px\",\n      fontWeight: \"400\",\n    }\n    console.log(orderItem)\n    return (\n\n      <CRow className=\"mb-3\">\n        <CCard>\n          <CCardBody>\n            <div className=\"d-flex align-items-start\">\n              <CImage\n                rounded\n                src={\n                  orderItem.product.fileImages.length > 0\n                    ? config.api.private.baseUrl + \"/api/v1/products/getImages/bytesArrays/\" +\n                    orderItem.product.fileImages[0].path +\n                    orderItem.product.fileImages[0].fileName\n                    : NO_IMAGE_BASE64\n                }\n                width={100}\n                height={100}\n              />\n              <div className=\"ms-2  w-100\">\n                <CRow className=\"d-flex justify-content-between\">\n                  <CCol sm=\"12\" lg=\"3\" md=\"12\" className=\"ps-4 text-dark\">\n                    {orderItem.product.productName}\n                  </CCol>\n                  <CCol sm=\"12\" lg=\"3\" md=\"2\" className=\"text-dark d-flex flex-column align-items-center\">\n                    <span style={fontStyle} className=\"text-black-50\">\n                      Price\n                    </span>\n                    <span className=\"pt-3\">\n                      &#8369;{orderItem.product.productPrice.toFixed(2)}\n                    </span>\n                  </CCol>\n                  <CCol sm=\"12\" lg=\"3\" md=\"2\" className=\"text-dark d-flex flex-column align-items-center\">\n                    <span style={fontStyle} className=\"text-black-50\">\n                      Quantity\n                    </span>\n                    <span className=\"pt-3\">{orderItem.quantity}</span>\n                  </CCol>\n                  <CCol sm=\"12\" lg=\"3\" md=\"2\" className=\"text-dark d-flex flex-column align-items-center\">\n                    <span style={fontStyle} className=\"text-black-50\">\n                      Amount\n                    </span>\n                    <span className=\"pt-3\">\n                      &#8369;{orderItem.amount.toFixed(2)}\n                    </span>\n                  </CCol>\n                </CRow>\n                {(canReview || (canViewReview && isSubmitted)) && (\n                  <div>\n                    <ReactStars\n                      count={5}\n                      value={rating}\n                      size={24}\n                      isHalf={false}\n                      edit={!submitted}\n                      onChange={(newRating) => {\n                        this.props.handleOrderReview(\n                          orderId,\n                          orderItem,\n                          newRating,\n                          comment,\n                        )\n                      }}\n                    />\n                    {permission === Roles.SUPER_ADMIN || permission === Roles.ADMIN ?\n                      <></> :\n                      <div className=\"mb-!2\">\n                        <textarea\n                          disabled={submitted}\n                          onChange={(event) => {\n                            this.props.handleOrderReview(\n                              orderId,\n                              orderItem,\n                              rating,\n                              event.target.value,\n                            )\n                          }}\n                          id=\"exampleFormControlTextarea1\"\n                          rows=\"3\"\n                          style={{ width: \"100%\" }}\n                          placeholder=\"Please write a review.\"\n                        >\n                          {comment}\n                        </textarea>\n                      </div>\n                    }\n                  </div>\n                )}\n              </div>\n            </div>\n          </CCardBody>\n        </CCard>\n      </CRow>\n    )\n  }\n}\n\nexport default OrderCard\n","import React, { Component, Suspense } from \"react\"\nimport {\n  CContainer,\n  CModal,\n  CModalHeader,\n  CModalBody,\n  CModalFooter,\n  CButton,\n  CModalTitle,\n  CAlert,\n} from \"@coreui/react\"\nimport { connect } from \"react-redux\"\n//action\nimport { setScanModal } from \"src/service/apiActions/modalAction/modalAction\"\nimport { getDecodedBarcode } from \"src/service/apiActions/scannerAction/scannerAction\"\nimport { DotLoader } from \"react-spinners\"\nimport * as FaIcons from \"react-icons/fa\"\n\nconst BarcodeScannerComponent = React.lazy(() =>\n  import(\"react-qr-barcode-scanner\"),\n)\n\nexport class ScanBarcodeModal extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      visible: false,\n\n      decodeBarcode: \"\",\n      stopStreaming: false,\n      action: \"\",\n      facingMode: \"environment\"\n    }\n  }\n  componentDidUpdate(prevProps, prevState) {\n    this.manageModalVisible(prevProps, prevState)\n  }\n  manageModalVisible = (prevProps, prevState) => {\n    if (prevProps.modalVisible !== this.props.modalVisible) {\n      const { action, visible } = this.props.modalVisible\n      if (action === \"barcode\") {\n        this.setState({\n          visible: visible,\n          stopStreaming: false,\n          decodeBarcode: \"\",\n          action: action,\n        })\n      } else if (action === \"close\") {\n        this.setState({\n          visible: visible,\n          stopStreaming: false,\n          decodeBarcode: \"\",\n        })\n      } else if (action === \"closeScan\") {\n        this.setState({\n          visible: visible,\n          stopStreaming: false,\n          decodeBarcode: \"\",\n        })\n      } else if (action === \"inputBarcode\") {\n        this.setState({ action: action, visible: visible, decodeBarcode: \"\" })\n      }\n    }\n  }\n  handleDecodeBarcode = (decoded) => {\n    if (decoded) {\n      this.setState({\n        decodeBarcode: decoded,\n        stopStreaming: true,\n      })\n      // this.props.getDecodedBarcode(decoded, \"DECODEDBARCODE\");\n      // this.props.setScanModal(false, \"close\")\n    }\n  }\n  handleOnClose = () => {\n    const { action } = this.state\n    console.log(action)\n\n    if (action === \"inputBarcode\") {\n      this.props.setScanModal(false, \"closeScan\")\n    } else {\n      this.props.setScanModal(false, \"close\")\n    }\n  }\n  render() {\n    let { visible, decodeBarcode, stopStreaming, action, facingMode } = this.state\n    return (\n      <div>\n        <CModal\n          visible={visible}\n          alignment=\"center\"\n          onDismiss={this.handleOnClose}\n        >\n          <CModalHeader onDismiss={this.handleOnClose}>\n            <CModalTitle>\n              <div className=\"d-flex align-items-center\">Scanner</div>\n            </CModalTitle>\n          </CModalHeader>\n          <CModalBody>\n            <CContainer className=\"text-center\">\n              <Suspense\n                fallback={\n                  <div className=\"d-flex justify-content-center align-items-center  position-fixed spinner\">\n                    <DotLoader color=\"#36D7B7\" size={100} />\n                  </div>\n                }\n              >\n                <CAlert color=\"info\" dismissible>\n                  <strong>Scan Product Barcode to Search</strong>\n                </CAlert>\n                <CButton variant=\"ghost\"\n                  color=\"secondary\"\n                  className=\"mb-3 d-flex justify-content-start\"\n                  onClick={() => this.setState({\n                    facingMode: facingMode === \"environment\" ? \"user\" : \"environment\"\n                  })}>\n                  {facingMode === \"environment\" ? \"Rear\" : \"Front\"}\n                </CButton>\n                <BarcodeScannerComponent\n                  className=\"w-25\"\n                  delay={500}\n                  facingMode={facingMode}\n                  stopStream={stopStreaming}\n                  torch=\"true\"\n                  onUpdate={(err, result) => {\n                    if (result) this.handleDecodeBarcode(result.text)\n                  }}\n                />\n              </Suspense>\n\n              <div>\n                <h4>{decodeBarcode}</h4>\n                {decodeBarcode &&\n                  (action === \"inputBarcode\" ? (\n                    <>\n                      <CButton\n                        onClick={() => {\n                          this.props.getDecodedBarcode(\n                            decodeBarcode,\n                            \"inputBarcode\",\n                          )\n                          this.setState({\n                            visible: false,\n                          })\n                        }}\n                        color=\"info\"\n                        variant=\"outline\"\n                        className=\"\"\n                      >\n                        <span className=\"ms-2\">Insert</span>\n                      </CButton>\n                    </>\n                  ) : (\n                    <CButton\n                      onClick={() => {\n                        this.props.getDecodedBarcode(\n                          decodeBarcode,\n                          \"DECODEDBARCODE\",\n                        )\n                        this.setState({\n                          visible: false,\n                        })\n                      }}\n                      color=\"info\"\n                      variant=\"outline\"\n                      className=\"\"\n                    >\n                      <FaIcons.FaSearch />\n                      <span className=\"ms-2\">Search</span>\n                    </CButton>\n                  ))}\n              </div>\n            </CContainer>\n          </CModalBody>\n          <CModalFooter>\n            <CButton color=\"dark\" variant=\"ghost\" onClick={this.handleOnClose}>\n              Close\n            </CButton>\n          </CModalFooter>\n        </CModal>\n      </div>\n    )\n  }\n}\nconst mapStateToProps = (state) => {\n  return {\n    modalVisible: state.modalVisibleResponse,\n  }\n}\nexport default connect(mapStateToProps, {\n  setScanModal,\n  getDecodedBarcode,\n})(ScanBarcodeModal)\n","import { GET_DECODED_BARCODE } from \"src/service/redux/constants\"\n\nexport const getDecodedBarcode = (decoded, action) => async (dispatch) => {\n    dispatch({\n        type: GET_DECODED_BARCODE,\n        payload: {\n            action: action,\n            decoded: decoded\n        }\n    })\n}","import authHeader from \"../auth/authHeader\"\nimport axios from \"./RestApi\"\n\nexport class CommentApiService {\n  getComments(productId, page, limit) {\n    return axios.get(\"/comments\", {\n      params: {\n        productId: productId,\n        page: page,\n        limit: limit,\n      },\n    })\n  }\n  saveComment(commentDetails) {\n    return axios.post(\"/comments\", commentDetails, {\n      headers: authHeader(),\n    })\n  }\n  saveComments(orderId, commentDetails) {\n    return axios.post(\"/comments/bulk/\" + orderId, commentDetails, {\n      headers: authHeader(),\n    })\n  }\n  deleteComment(commentId) {\n    return axios.delete(\"/comments/\" + commentId, {\n      headers: authHeader(),\n    })\n  }\n}\nexport default new CommentApiService()\n","import {\n  GET_COMMENTS,\n  DELETE_COMMENT,\n  ADD_COMMENT,\n} from \"src/service/redux/constants\"\nimport { SET_MESSAGE } from \"src/constants/userConstants\"\nimport CommentApiService from \"src/service/restAPI/CommentApiService\"\n\nexport const getComments = (productId, page, limit) => async (dispatch) => {\n  return CommentApiService.getComments(productId, page, limit).then(\n    (response) => {\n      dispatch({\n        type: GET_COMMENTS,\n        payload: {\n          status: 200,\n          action: \"GET_COMMENT\",\n          data: response.data,\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      const errorMessage =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: errorMessage,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\n\nexport const saveComment = (wishlistDetails) => async (dispatch) => {\n  return CommentApiService.saveComment(wishlistDetails).then(\n    (response) => {\n      dispatch({\n        type: ADD_COMMENT,\n        payload: {\n          status: 200,\n          action: \"ADD_COMMENT\",\n          data: response.data,\n        },\n      })\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: 200,\n          data: {\n            message: \"Successfully submitted product comment\",\n            order: response.data,\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      const errorMessage =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: errorMessage,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\n\nexport const saveComments = (orderId, comments) => async (dispatch) => {\n  return CommentApiService.saveComments(orderId, comments).then(\n    (response) => {\n      dispatch({\n        type: ADD_COMMENT,\n        payload: {\n          status: 200,\n          action: \"ADD_COMMENT\",\n          data: response.data,\n        },\n      })\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: 200,\n          data: {\n            message: \"Successfully submitted order product review\",\n            order: response.data,\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      const errorMessage =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: errorMessage,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\n\nexport const deleteComment = (wishlistId) => async (dispatch) => {\n  return CommentApiService.deleteComment(wishlistId).then(\n    (response) => {\n      dispatch({\n        type: DELETE_COMMENT,\n        payload: {\n          status: 200,\n          action: \"DELETE_COMMENT\",\n          data: {\n            order: response.data,\n          },\n        },\n      })\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: 200,\n          data: {\n            message: \"Successfully deleted wishlist\",\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      const errorMessage =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: errorMessage,\n          },\n        },\n      })\n      console.log(\"JKOSLDFJ\")\n      return Promise.reject()\n    },\n  )\n}\n"],"sourceRoot":""}