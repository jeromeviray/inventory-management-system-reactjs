{"version":3,"sources":["service/restAPI/CartApiService.js","service/apiActions/cartAction/cartAction.js","service/restAPI/OrderApiService.js","service/apiActions/indexAction.js","service/apiActions/orderAction/orderAction.js","service/restAPI/ShippingFeeApiService.js","views/common/cart/Cart.js","service/apiActions/shippingFeeAction/shippingFeeAction.js"],"names":["addToCart","id","axios","post","headers","authHeader","getCart","get","removeItem","delete","quantityAction","action","productId","put","async","CartApiService","then","response","dispatch","type","ADD_TO_CART","payload","status","data","SET_MESSAGE","message","Promise","resolve","error","errorMessage","toString","code","reject","GET_CART_ITEMS","cart","removeCartItem","REMOVE_ITEM","console","log","QUANTITY_ACTION","setCart","getOrders","query","page","limit","params","getPaymentTransactions","updateOrderPaymentStatus","orderId","paymentStatus","placeOrderDetails","orderDetails","customerAddressId","addressId","paymentId","paymentMethodId","cartItems","items","shippingFeeId","shippingFee","getOrderByOrderId","updateOrderStatus","trackingNumber","trackingUrl","validateCart","handleError","OrderApiService","GET_ORDERS","orders","orderStatusCount","orderCounts","getOrderItems","ORDER_ITEMS","placeOrder","orderDetials","PLACE_ORDER","order","GET_ORDER_BY_ID","UPDATE_ORDER_STATUS","toUpperCase","UPDATE_PAYMENT_STATUS","GET_PAYMENT_TRANSACTIONS","payments","VALIDATE_CART","error_messages","length","join","getShippingFees","Checkout","React","lazy","CustomerAddress","PaymentMethod","SuccessOrderPlace","Cart","Component","state","step","Tquantity","Tamount","isLoggedIn","permission","undefined","successfull","loading","redirectUrl","clientRef","checkout","manageCartItemsResponse","prevProps","prevState","cartResponse","this","props","setState","redirectUser","userResponse","roleName","credentials","roles","handleCartOnChange","handleAddressOnChange","handlePaymentMethodOnChange","handleOnNext","checkoutLock","cartId","accountId","orderResponse","is_invalidate","sendMessage","eventType","JSON","stringify","releaseCheckoutLock","handleOnPre","renderSteps","stepComponent","paymentDetailsOnChange","checkValueOnChange","getValue","paymentMethodOnChange","renderHeader","stepHeader","handleOnPlaceOrder","event","messageResponse","catch","componentDidMount","window","addEventListener","history","push","config","api","private","prefixFrontendUrl","websocketResponse","match","componentWillUnmount","componentDidUpdate","manageShippingFeeResponse","receiveCheckoutEvent","forEach","item","ind","index","findIndex","item2","product","inventory","shippingFeeResponse","shippingFees","render","totalAmount","shippingAmount","headerStyle","fontWeight","Roles","SUPER_ADMIN","ADMIN","to","location","replace","fallback","className","color","size","sm","lg","style","fontSize","map","promo","percentage","discount","productPrice","price","maxWidth","productName","quantity","toFixed","fontStyle","textAlign","variant","onClick","disabled","connect","clearMessage","ShippingFeeApiService","GET_SHIPPING_FEES","error_message"],"mappings":"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","file":"static/js/53.d487c130.chunk.js","sourcesContent":["import authHeader from '../auth/authHeader';\nimport axios from './RestApi'\n\nexport class CartApiService {\n    addToCart(id) {\n        return axios.post(\"/cart/item/add/\" + id, {\n\n        }, {\n            headers: authHeader()\n        })\n    }\n    getCart() {\n        return axios.get(\"/cart\", {\n            headers: authHeader()\n        })\n    }\n    removeItem(id) {\n        return axios.delete(\"/cart/item/remove/\" + id, {\n            headers: authHeader()\n        });\n    }\n    quantityAction(action, productId) {\n        return axios.put(\"/cart/item/\" + action + \"/quantity/\" + productId, {}, {\n            headers: authHeader()\n        })\n    }\n}\n\nexport default new CartApiService();","import { SET_MESSAGE } from \"src/constants/userConstants\"\nimport {\n  ADD_TO_CART,\n  GET_CART_ITEMS,\n  QUANTITY_ACTION,\n  REMOVE_ITEM,\n} from \"src/service/redux/constants\"\nimport CartApiService from \"src/service/restAPI/CartApiService\"\n\nexport const addToCart = (id) => async (dispatch) => {\n  return CartApiService.addToCart(id).then(\n    (response) => {\n      dispatch({\n        type: ADD_TO_CART,\n        payload: {\n          status: 200,\n          action: \"ADDTOCART\",\n          data: {},\n        },\n      })\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: 200,\n          data: {\n            message: \"Added Successfully\",\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      const errorMessage =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: errorMessage,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\nexport const getCart = () => async (dispatch) => {\n  return CartApiService.getCart().then(\n    (response) => {\n      dispatch({\n        type: GET_CART_ITEMS,\n        payload: {\n          status: 200,\n          action: \"CARTITEMS\",\n          data: {\n            cart: response.data,\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      const errorMessage =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: errorMessage,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\n\nexport const removeCartItem = (id) => async (dispatch) => {\n  return CartApiService.removeItem(id).then(\n    (response) => {\n      dispatch({\n        type: REMOVE_ITEM,\n        payload: {\n          status: 200,\n          action: \"REMOVE\",\n          data: {},\n        },\n      })\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: 200,\n          data: {\n            message: \"Remove Item Successfully\",\n          },\n        },\n      })\n\n      return Promise.resolve()\n    },\n    (error) => {\n      console.log(error)\n      const errorMessage =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: errorMessage,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\n\nexport const quantityAction = (action, productId) => async (dispatch) => {\n  return CartApiService.quantityAction(action, productId).then(\n    (response) => {\n      dispatch({\n        type: QUANTITY_ACTION,\n        payload: {\n          status: 200,\n          action: QUANTITY_ACTION,\n          data: {},\n        },\n      })\n      // dispatch({\n      //     type: SET_MESSAGE,\n      //     payload: {\n      //         status: 200,\n      //         data: {\n      //             message: action + \" Quantity Product Id: \" + productId\n      //         }\n      //     }\n      // })\n    },\n    (error) => {\n      const errorMessage =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: errorMessage,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\n\nexport const setCart = (cart) => async (dispatch) => {\n  dispatch({\n    type: GET_CART_ITEMS,\n    payload: {\n      status: 200,\n      action: \"CARTITEMS\",\n      data: {\n        cart: cart,\n      },\n    },\n  })\n}","import authHeader from '../auth/authHeader';\nimport axios from './RestApi';\n\nexport class OrderApiService {\n    getOrders(status, query, page, limit) {\n        return axios.get(\"/orders/status/\" + status, {\n            headers: authHeader(),\n            params: {\n                query: query,\n                page: page,\n                limit: limit\n            }\n        })\n    }\n\n    getPaymentTransactions(query, page, limit) {\n        return axios.get(\"/orders/payments\", {\n            headers: authHeader(),\n            params: {\n                query: query,\n                page: page,\n                limit: limit\n            }\n        })\n    }\n\n    updateOrderPaymentStatus(orderId, paymentStatus) {\n        return axios.put(\"/orders/\" + orderId + \"/paid/\" + paymentStatus, {}, {\n            headers: authHeader()\n        })\n    }\n\n\n    placeOrderDetails(orderDetails) {\n        return axios.post(\"/orders/checkout\", {\n            customerAddressId: orderDetails.addressId,\n            paymentId: orderDetails.paymentMethodId,\n            cartItems: orderDetails.items,\n            shippingFeeId: orderDetails.shippingFee\n        }, {\n            headers: authHeader()\n        })\n    }\n\n    getOrderByOrderId(orderId) {\n        return axios.get(\"/orders/\" + orderId, {\n            headers: authHeader()\n        })\n    }\n\n    updateOrderStatus(orderId, status, trackingNumber, trackingUrl) {\n        return axios.put(\"/orders/\" + orderId + \"/status/\" + status, {}, {\n            headers: authHeader(),\n            params: {\n                trackingNumber: trackingNumber,\n                trackingUrl: trackingUrl\n            }\n        })\n    }\n\n    validateCart(data) {\n        return axios.post(\"/orders/validate\", data, {\n            headers: authHeader()\n        })\n    }\n}\nexport default new OrderApiService();","import { SET_MESSAGE } from \"src/constants/userConstants\";\n\nexport const handleError = (error, dispatch) => {\n    const errorMessage =\n        (error.response &&\n            error.response.data &&\n            error.response.data.message) ||\n        error.message ||\n        error.toString();\n\n    const status = (error.response &&\n        error.response.data &&\n        error.response.data.code) ||\n        error.toString();\n\n    dispatch({\n        type: SET_MESSAGE,\n        payload: {\n            status: status,\n            data: {\n                message: errorMessage\n            }\n        }\n    })\n}","import { VALIDATE_CART, GET_ORDER_BY_ID, GET_ORDERS, ORDER_ITEMS, PLACE_ORDER, UPDATE_ORDER_STATUS, GET_PAYMENT_TRANSACTIONS, UPDATE_PAYMENT_STATUS } from \"src/service/redux/constants\";\nimport { SET_MESSAGE } from \"src/constants/userConstants\";\nimport OrderApiService from \"src/service/restAPI/OrderApiService\";\nimport { handleError } from \"../indexAction\";\n\nexport const getOrders = (status, query, page, limit) => async (dispatch) => {\n    return OrderApiService.getOrders(status, query, page, limit).then(\n        (response) => {\n            dispatch({\n                type: GET_ORDERS,\n                payload: {\n                    status: 200,\n                    action: \"GET_ORDERS\",\n                    data: {\n                        orders: response.data,\n                        orderStatusCount: response.data.orderCounts\n                    }\n                }\n            })\n            return Promise.resolve();\n        },\n        (error) => {\n            handleError(error, dispatch);\n            return Promise.reject();\n        }\n    )\n\n}\n\nexport const getOrderItems = (items) => async (dispatch) => {\n    dispatch({\n        type: ORDER_ITEMS,\n        payload: {\n            status: 200,\n            action: \"ORDERITEMS\",\n            data: {\n                items: items\n            }\n        }\n    })\n}\n\nexport const placeOrder = (orderDetials) => async (dispatch) => {\n    return OrderApiService.placeOrderDetails(orderDetials).then(\n        (response) => {\n            dispatch({\n                type: PLACE_ORDER,\n                payload: {\n                    status: 200,\n                    action: \"PLACE_ORDER\",\n                    data: {\n\n                    }\n                }\n            })\n            dispatch({\n                type: SET_MESSAGE,\n                payload: {\n                    status: 200,\n                    data: {\n                        message: \"Successfully Place your Order\",\n                        order: response.data\n                    }\n                }\n            })\n            return Promise.resolve();\n        },\n        (error) => {\n            handleError(error, dispatch);\n            return Promise.reject();\n        }\n    )\n}\n\nexport const getOrderByOrderId = (orderId) => async (dispatch) => {\n    return OrderApiService.getOrderByOrderId(orderId).then(\n        (response) => {\n            dispatch({\n                type: GET_ORDER_BY_ID,\n                payload: {\n                    status: 200,\n                    action: \"GETORDERBYID\",\n                    data: {\n                        order: response.data\n                    }\n                }\n            })\n            return Promise.resolve();\n        },\n        (error) => {\n            handleError(error, dispatch);\n            return Promise.reject();\n        }\n    )\n}\n\nexport const updateOrderStatus = (orderId, status, trackingNumber, trackingUrl) => async (dispatch) => {\n    return OrderApiService.updateOrderStatus(orderId, status, trackingNumber, trackingUrl).then(\n        (response) => {\n            dispatch({\n                type: UPDATE_ORDER_STATUS,\n                payload: {\n                    status: 200,\n                    action: UPDATE_ORDER_STATUS,\n                    data: {\n                        order: response.data\n                    }\n                }\n            })\n            dispatch({\n                type: SET_MESSAGE,\n                payload: {\n                    status: 200,\n                    data: {\n                        message: \"Successfully updated order \" + orderId + \" status to \" + status.toUpperCase(),\n                        order: response.data\n                    }\n                }\n            })\n            return Promise.resolve();\n        },\n        (error) => {\n            handleError(error, dispatch);\n            return Promise.reject();\n        }\n    )\n}\n\nexport const updateOrderPaymentStatus = (orderId, paymentStatus) => async (dispatch) => {\n    return OrderApiService.updateOrderPaymentStatus(orderId, paymentStatus).then(\n        (response) => {\n            dispatch({\n                type: UPDATE_PAYMENT_STATUS,\n                payload: {\n                    status: 200,\n                    action: UPDATE_PAYMENT_STATUS,\n                    data: {\n                        order: response.data\n                    }\n                }\n            })\n            dispatch({\n                type: SET_MESSAGE,\n                payload: {\n                    status: 200,\n                    data: {\n                        //message: \"Successfully updated order \" + orderId + \" status to \" + status.toUpperCase(),\n                    }\n                }\n            })\n            return Promise.resolve();\n        },\n        (error) => {\n            handleError(error, dispatch);\n            return Promise.reject();\n        }\n    )\n}\n\nexport const getPaymentTransactions = (query, page, limit) => async (dispatch) => {\n    return OrderApiService.getPaymentTransactions(query, page, limit).then(\n        (response) => {\n            dispatch({\n                type: GET_PAYMENT_TRANSACTIONS,\n                payload: {\n                    status: 200,\n                    action: \"GET_PAYMENT_TRANSACTIONS\",\n                    data: {\n                        payments: response.data,\n                    }\n                }\n            })\n            return Promise.resolve();\n        },\n        (error) => {\n            handleError(error, dispatch);\n            return Promise.reject();\n        }\n    )\n}\n\nexport const validateCart = (data) => async (dispatch) => {\n    return OrderApiService.validateCart(data).then(\n        (response) => {\n            dispatch({\n                type: VALIDATE_CART,\n                payload: {\n                    status: 200,\n                    action: VALIDATE_CART,\n                    data: response.data\n                }\n            })\n\n            if (response.data.error_messages.length > 0) {\n                dispatch({\n                    type: SET_MESSAGE,\n                    payload: {\n                        status: 400,\n                        data: {\n                            message: response.data.error_messages.join(\"\\n\")\n                        }\n                    }\n                })\n            }\n            return Promise.resolve();\n        },\n        (error) => {\n            handleError(error, dispatch);\n            return Promise.reject();\n        }\n    )\n}\n","import authHeader from \"../auth/authHeader\"\nimport axios from \"./RestApi\"\nexport class ShippingFeeApiService {\n    getShippingFees() {\n        return axios.get(\"/shipping/fees\",\n            { headers: authHeader() })\n    }\n\n}\nexport default new ShippingFeeApiService()\n","import React, { Component, Suspense } from \"react\"\nimport {\n  CRow,\n  CCol,\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCardFooter,\n  CSpinner,\n} from \"@coreui/react\"\nimport { DotLoader } from \"react-spinners\"\n\nimport { connect } from \"react-redux\"\n//action\nimport { clearMessage } from \"src/service/apiActions/messageAction/messageAction\"\nimport {\n  placeOrder,\n  updateOrderPaymentStatus,\n  validateCart\n} from \"src/service/apiActions/orderAction/orderAction\"\n\nimport {\n  setCart\n} from \"src/service/apiActions/cartAction/cartAction\"\n\nimport config from \"../../../config\"\n\nimport { history } from \"src/_helper/history\"\nimport { Redirect } from \"react-router-dom\"\nimport Roles from \"src/router/config\"\nimport { getShippingFees } from \"src/service/apiActions/shippingFeeAction/shippingFeeAction\"\n// import SuccessOrderPlace from './SuccessOrderPlace';\nconst Checkout = React.lazy(() =>\n  import(\"src/views/common/cart/checkout/Checkout\"),\n)\nconst CustomerAddress = React.lazy(() =>\n  import(\"src/views/common/cart/customerAddress/CustomerAddress\"),\n)\nconst PaymentMethod = React.lazy(() =>\n  import(\"src/views/common/cart/payment/PaymentMethod\"),\n)\nconst SuccessOrderPlace = React.lazy(() =>\n  import(\"src/views/common/cart/SuccessOrderPlace\"),\n)\n\n\nexport class Cart extends Component {\n  state = {\n    step: 1,\n    items: [],\n    Tquantity: 0,\n    Tamount: 0,\n    isLoggedIn: false,\n    permission: \"\",\n    addressId: undefined,\n    paymentMethodId: undefined,\n    successfull: false,\n    loading: false,\n    redirectUrl: \"\",\n    clientRef: null,\n    checkout: false,\n    shippingFee: []\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"beforeunload\", this.releaseCheckoutLock);\n\n    if (!this.props.userResponse.isLoggedIn) {\n      history.push(config.api.private.prefixFrontendUrl + \"/login\")\n    } else {\n      this.redirectUser()\n    }\n\n    if (this.props.websocketResponse) {\n      this.setState({\n        clientRef: this.props.websocketResponse.data.clientRef\n      })\n    }\n\n    if (this.props.userResponse.isLoggedIn) {\n      const { orderId, paymentStatus } = this.props.match.params\n      if (paymentStatus == \"success\" || paymentStatus == \"failed\") {\n        this.props.updateOrderPaymentStatus(orderId, paymentStatus)\n      }\n      this.setState({ successfull: paymentStatus == \"success\" })\n    }\n    this.props.getShippingFees()\n  }\n\n  componentWillUnmount() {\n    this.releaseCheckoutLock();\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    this.manageShippingFeeResponse(prevProps, prevState)\n    if (this.props.websocketResponse !== prevProps.websocketResponse) {\n      if (this.props.websocketResponse.action == \"WEBSOCKET_REF\") {\n        let clientRef = this.props.websocketResponse.data.clientRef;\n        this.setState({\n          clientRef: clientRef\n        })\n      } else if (this.props.websocketResponse.action == \"WEBSOCKET_EVENT\") {\n        let { cart } = this.state;\n        const receiveCheckoutEvent = this.props.websocketResponse.data.message;\n        console.log(receiveCheckoutEvent)\n        if (cart.accountId != receiveCheckoutEvent.accountId) {\n          let cartItems = cart.cartItems;\n          cartItems.forEach((item, ind) => {\n            let index = receiveCheckoutEvent.items.findIndex((item2) => item2.product.id == item.product.product.id)\n            cartItems[ind].product.inventory = receiveCheckoutEvent.items[index].inventory;\n          })\n\n          cart.cartItems = cartItems;\n          this.props.setCart(cart)\n        }\n      }\n    }\n    this.manageCartItemsResponse(prevProps, prevState)\n  }\n\n  manageCartItemsResponse = (prevProps, prevState) => {\n    if (prevProps.cartResponse !== this.props.cartResponse) {\n      let { action, status, data } = this.props.cartResponse\n      if (action === \"CARTITEMS\" && status === 200) {\n        this.setState({\n          cart: data.cart,\n          items: [],\n          Tamount: 0,\n          Tquantity: 0\n        })\n      }\n    }\n  }\n  manageShippingFeeResponse(prevProps, prevState) {\n    if (prevProps.cartResponse !== this.props.cartResponse) {\n      let { action, status, data } = this.props.shippingFeeResponse\n      if (action === \"GET_SHIPPING_FEES\" && status === 200) {\n        this.setState({\n          shippingFee: data.shippingFees[0]\n        })\n      }\n    }\n  }\n  redirectUser = () => {\n    const isLoggedIn = this.props.userResponse.isLoggedIn\n    if (isLoggedIn) {\n      let roleName = this.props.userResponse.credentials.roles.roleName\n      let permission = roleName\n        ? roleName\n        : this.props.userResponse.credentials.roles\n\n      this.setState({\n        isLoggedIn: isLoggedIn,\n        permission: permission,\n      })\n    }\n  }\n  handleCartOnChange = (items, Tquantity, Tamount) => {\n    console.log(Tamount)\n    this.setState({\n      items: items,\n      Tquantity: Tquantity,\n      Tamount: Tamount,\n    })\n  }\n\n  handleAddressOnChange = (id) => {\n    this.setState({\n      addressId: id,\n    })\n  }\n\n  handlePaymentMethodOnChange = (id) => {\n    this.setState({\n      paymentMethodId: id,\n    })\n  }\n\n  handleOnNext = () => {\n    let { step } = this.state;\n    if (step === 1) {\n      this.checkoutLock()\n      const { cart, items } = this.state;\n      const data = { cartId: cart.cartId, accountId: cart.accountId, items: items };\n      this.props.validateCart(data).then((data) => {\n        const response = this.props.orderResponse;\n        if (response.data.is_invalidate) {\n          return;\n        }\n        this.setState({\n          step: ++step,\n        })\n      })\n      return;\n    } else {\n      if (step === 3) return\n      this.setState({\n        step: ++step,\n      })\n    }\n  }\n\n  sendMessage = (eventType = \"checkout\", data = {}) => {\n    this.state.clientRef.sendMessage(\n      '/app/websocket/inventory',\n      JSON.stringify({\n        'from': \"test\", 'message': data, eventType: eventType\n      })\n    );\n  }\n\n  checkoutLock = () => {\n    const { cart, items } = this.state;\n    this.sendMessage(\"checkout\", { cartId: cart.cartId, accountId: cart.accountId, items: items })\n  }\n\n  releaseCheckoutLock = () => {\n    const { cart } = this.state;\n    this.sendMessage(\"release_checkout\", { cartId: cart.cartId, accountId: cart.accountId, items: cart.cartItems })\n  }\n\n  handleOnPre = () => {\n    let { step } = this.state\n    if (step === 1) {\n      return\n    } else if (step === 2) {\n      this.releaseCheckoutLock();\n      this.setState({\n        items: []\n      });\n    }\n    this.setState({\n      step: --step,\n    })\n  }\n  renderSteps = () => {\n    let { step, addressId, paymentMethodId } = this.state\n    let stepComponent = (\n      <Checkout paymentDetailsOnChange={this.handleCartOnChange} />\n    )\n    switch (step) {\n      case 1:\n        stepComponent = (\n          <Checkout paymentDetailsOnChange={this.handleCartOnChange} />\n        )\n        return stepComponent\n      case 2:\n        stepComponent = (\n          <CustomerAddress\n            checkValueOnChange={this.handleAddressOnChange}\n            getValue={addressId}\n          />\n        )\n        return stepComponent\n\n      case 3:\n        stepComponent = (\n          <PaymentMethod\n            paymentMethodOnChange={this.handlePaymentMethodOnChange}\n            getValue={paymentMethodId}\n          />\n        )\n        return stepComponent\n\n      default:\n        return stepComponent\n    }\n  }\n  renderHeader = () => {\n    let { step } = this.state\n    let stepHeader = \"Shopping Cart\"\n    switch (step) {\n      case 1:\n        return (stepHeader = \"Shopping Cart\")\n      case 2:\n        return (stepHeader = \"Customer Address\")\n\n      case 3:\n        return (stepHeader = \"Payment Method\")\n      case 4:\n        return (stepHeader = \"\")\n\n      default:\n        return stepHeader\n    }\n  }\n  handleOnPlaceOrder = (event) => {\n    let { addressId, paymentMethodId, items, shippingFee, cartId } = this.state\n    let orderDetails = {\n      addressId: addressId,\n      paymentMethodId: paymentMethodId,\n      items: items,\n      shippingFee: shippingFee.id,\n      cartId: cartId\n    }\n    this.setState({\n      loading: true,\n    })\n    this.props\n      .placeOrder(orderDetails)\n      .then(() => {\n        let { data } = this.props.messageResponse\n        this.setState({\n          successfull: true,\n          loading: false,\n          step: 4,\n          redirectUrl: data.order.redirectUrl,\n        })\n      })\n      .catch(() => {\n        this.setState({\n          successfull: false,\n          loading: false,\n        })\n      })\n  }\n\n  render() {\n    let {\n      step,\n      items,\n      Tamount,\n      Tquantity,\n      isLoggedIn,\n      permission,\n      addressId,\n      paymentMethodId,\n      successfull,\n      loading,\n      redirectUrl,\n      shippingFee\n    } = this.state\n    var totalAmount = shippingFee.shippingAmount;\n    const headerStyle = {\n      fontWeight: \"800\",\n    }\n    if (isLoggedIn) {\n      if (permission === Roles.SUPER_ADMIN || permission === Roles.ADMIN) {\n        return <Redirect to={config.api.private.prefixFrontendUrl + \"/app\"} />\n      }\n    } else if (!this.props.userResponse.isLoggedIn) {\n      return <Redirect to={config.api.private.prefixFrontendUrl + \"/login\"} />\n    }\n\n    if (successfull && redirectUrl != \"\" && redirectUrl) {\n      window.location.replace(redirectUrl)\n      return <></>\n    }\n\n    return (\n      <div>\n        <Suspense\n          fallback={\n            <div className=\"d-flex justify-content-center align-items-center  position-fixed spinner\">\n              <DotLoader color=\"#36D7B7\" size={100} />\n            </div>\n          }\n        >\n          <CRow>\n            <h3 className=\"mt-2 mb-4\">{this.renderHeader()}</h3>\n          </CRow>\n          {successfull ? (\n            <SuccessOrderPlace />\n          ) : (\n            <CRow>\n              <CCol sm=\"12\" lg=\"8\">\n                {this.renderSteps()}\n              </CCol>\n              <CCol sm=\"12\" lg=\"4\" className=\"mb-5\">\n                <CCard>\n                  <CCardHeader>\n                    <span\n                      className=\"\"\n                      style={{ fontSize: \"18px\", ...headerStyle }}\n                    >\n                      Summary Payment\n                    </span>\n                  </CCardHeader>\n                  <CCardBody className=\"border-bottom\">\n                    <div className=\"d-flex justify-content-between bg-light p-2\">\n                      <div>\n                        <span style={{ ...headerStyle }}>Item</span>\n                      </div>\n                      <div>\n                        <span style={{ ...headerStyle }}>Quantity</span>\n                      </div>\n                      <div>\n                        <span style={{ ...headerStyle }}>Amount</span>\n                      </div>\n                      <div>\n                        <span style={{ ...headerStyle }}>Sub Amount</span>\n                      </div>\n                    </div>\n\n                    {items.length > 0 ? (\n                      items.map((item, index) => {\n                        const { promo, product } = item.product\n                        const status = promo && promo.status\n\n                        const percentage = promo && promo.percentage\n                        let discount = (product.productPrice * percentage) / 100\n                        let price = product.productPrice - discount\n                        if (status === \"ONGOING\") {\n                          totalAmount += price\n                        } else {\n                          totalAmount += product.productPrice\n                        }\n\n                        return (\n                          <>\n                            <div\n                              key={item.id}\n                              className=\"p-2 d-flex justify-content-between align-items-center\"\n                            >\n                              <span\n                                className=\"text-truncate d-inline-block\"\n                                style={{ maxWidth: \"150px\" }}\n                              >\n                                {product.productName}\n                              </span>\n                              <span>\n                                {item.quantity}\n                              </span>\n\n                              <span>\n                                &#8369;\n                                {status === \"ONGOING\" ? (\n                                  <>\n                                    <span\n                                      className=\"text-muted text-decoration-line-through me-2\"\n                                      style={{ fontSize: \"16px\" }}\n                                    >\n                                      {product.productPrice.toFixed(2)}\n                                    </span>\n                                    <span>{price.toFixed(2)}</span>\n                                  </>\n                                ) : (\n                                  product.productPrice.toFixed(2)\n                                )}\n                              </span>\n                              <span>\n                                &#8369;{(product.productPrice * item.quantity).toFixed(2)}\n                              </span>\n                            </div>\n                          </>\n                        )\n                      })\n                    ) : (\n                      <CCol\n                        style={{ fontStyle: \"italic\", textAlign: \"center\" }}\n                        className=\"p-2\"\n                      >\n                        No Item\n                      </CCol>\n                    )}\n                  </CCardBody>\n                  <div className=\"p-3 \">\n                    <div className=\"d-flex justify-content-between align-items-center pb-2\">\n                      <span className=\"text-muted font-style me-2\">\n                        Total Quantity\n                      </span>\n                      <span style={{ fontWeight: \"500\" }}>{Tquantity}</span>\n                    </div>\n                    <div className=\"d-flex justify-content-between align-items-center pb-2\">\n                      <span className=\"text-muted font-style me-2\">\n                        Shipping Fee (Metro Manila 3 to 5 Days, Provincial 7 to 10 Days)\n                      </span>\n                      <span style={{ fontWeight: \"500\" }}>  &#8369;{shippingFee.shippingAmount && shippingFee.shippingAmount.toFixed(2)}</span>\n                    </div>\n                    <div className=\"d-flex justify-content-between align-items-center pb-2\">\n                      <span className=\"text-muted font-style me-2\">\n                        Total Amount\n                      </span>\n                      <span style={{ fontWeight: \"500\" }}>\n                        &#8369;{Tamount > 0 ? totalAmount.toFixed(2) : Tamount.toFixed(2)}\n                      </span>\n                    </div>\n                  </div>\n                  <CCardFooter>\n                    <div className=\"d-grid gap-2 mx-auto\">\n                      {step > 1 ? (\n                        <div className=\"d-grid gap-2 d-md-flex justify-content-md-end\">\n                          <CButton\n                            variant=\"ghost\"\n                            color=\"dark\"\n                            onClick={this.handleOnPre}\n                            className=\"w-100\"\n                          >\n                            Back\n                          </CButton>\n                          {step === 3 ? (\n                            <CButton\n                              className=\"w-100\"\n                              color=\"info\"\n                              disabled={\n                                paymentMethodId === undefined ? true : false\n                              }\n                              onClick={this.handleOnPlaceOrder}\n                            >\n                              {loading && (\n                                <CSpinner size=\"sm\" className=\"ms-1\" />\n                              )}\n                              Place Order\n                            </CButton>\n                          ) : (\n                            <CButton\n                              className=\"w-100\"\n                              color=\"info\"\n                              onClick={this.handleOnNext}\n                              disabled={addressId === undefined ? true : false}\n                            >\n                              Next\n                            </CButton>\n                          )}\n                        </div>\n                      ) : (\n                        <CButton\n                          type=\"submit\"\n                          color=\"info\"\n                          disabled={items.length <= 0 ? true : false}\n                          className=\"d-flex justify-content-center align-items-center\"\n                          onClick={this.handleOnNext}\n                        >\n                          {/* <IoIcons.IoBagCheckOutline size=\"23\" /> */}\n                          <span className=\"ms-2\">Checkout</span>\n                        </CButton>\n                      )}\n                    </div>\n                  </CCardFooter>\n                </CCard>\n              </CCol>\n            </CRow>\n          )}\n        </Suspense>\n      </div>\n    )\n  }\n}\nconst mapStateToProps = (state) => {\n  return {\n    userResponse: state.userResponse,\n    messageResponse: state.messageResponse,\n    websocketResponse: state.websocketResponse,\n    cartResponse: state.cartResponse,\n    orderResponse: state.orderResponse,\n    shippingFeeResponse: state.shippingFeeResponse\n  }\n}\nexport default connect(mapStateToProps, {\n  clearMessage,\n  placeOrder,\n  updateOrderPaymentStatus,\n  validateCart,\n  setCart,\n  getShippingFees\n})(Cart)\n","import { SET_MESSAGE } from \"src/constants/userConstants\";\nimport { GET_SHIPPING_FEES } from \"src/service/redux/constants\";\nimport ShippingFeeApiService from \"src/service/restAPI/ShippingFeeApiService\"\n\nexport const getShippingFees = () => async (dispatch) => {\n    return ShippingFeeApiService.getShippingFees().then(\n        (response) => {\n            dispatch({\n                type: GET_SHIPPING_FEES,\n                payload: {\n                    status: 200,\n                    action: GET_SHIPPING_FEES,\n                    data: {\n                        shippingFees: response.data\n                    }\n                }\n            })\n            return Promise.resolve()\n        },\n        (error) => {\n            const message =\n                (error.response &&\n                    error.response.data &&\n                    error.response.data.message) ||\n                error.message ||\n                error.error_message ||\n                error.toString()\n\n            const status =\n                (error.response && error.response.data && error.response.data.code) ||\n                error.status ||\n                error.toString()\n\n            dispatch({\n                type: SET_MESSAGE,\n                payload: {\n                    status: status,\n                    data: {\n                        message: message,\n                    },\n                },\n            })\n            return Promise.reject();\n        }\n    )\n}"],"sourceRoot":""}