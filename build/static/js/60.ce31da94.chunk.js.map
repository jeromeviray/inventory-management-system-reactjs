{"version":3,"sources":["views/common/forgotPassword/ForgotPassword.js","service/restAPI/AccountApiService.js","service/apiActions/accountAction/accountAction.js"],"names":["style","marginRight","spinner","className","color","size","ForgotPassword","Component","state","type","loading","validation","message","permission","isLoggedIn","email","token","sentEmail","validToken","alertColor","responseToken","password","confirmPassword","successfull","handleOnChange","event","name","target","this","setState","value","handleShowPassword","preventDefault","manageAccountResponse","prevProps","prevState","accountResponse","props","action","status","data","tokenResponse","handleForgotPassword","forgotPassword","then","messageResponse","handleAlertColor","validated","catch","handleValidateToken","validateToken","setInterval","handleResetPassword","console","log","resetPassword","accountId","componentDidMount","redirectSuccessAuthentication","userResponse","roleName","credentials","roles","componentDidUpdate","render","Roles","SUPER_ADMIN","ADMIN","to","config","api","private","prefixFrontendUrl","position","cursor","href","md","lg","noValidate","onSubmit","id","sm","xs","autoCorrect","placeholder","onChange","required","htmlFor","onClick","invalid","form","margin","disabled","role","connect","getAccountEmployees","query","page","limit","axios","get","headers","authHeader","params","getUsersAccount","saveEmployeeAccount","firstName","lastName","phoneNumber","username","birthday","post","deleteAccount","delete","updateUser","put","banAccount","changePassword","currentPassword","newPassword","verifyAccount","code","getMe","async","AccountApiService","response","dispatch","GET_USERS_ACCOUNT","payload","accounts","Promise","resolve","error","errorMessage","toString","SET_MESSAGE","reject","saveEmployee","SAVE_EMPLOYEE","DELETE_ACCOUNT","BAN_ACCOUNT","CHANGE_PASSWORD","FORGOT_PASSWORD","VALIDATE_TOKEN","accoutnId","RESET_PASSWORD","GET_ME","account","UPDATE_USER","verifyCode","VERIFY_ACCOUNT"],"mappings":"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","file":"static/js/60.ce31da94.chunk.js","sourcesContent":["import React, { Component } from \"react\"\nimport {\n  CContainer,\n  CFormFloating,\n  CFormControl,\n  CFormLabel,\n  CRow,\n  CCol,\n  CHeader,\n  CHeaderNav,\n  CNavItem,\n  CNavLink,\n  CButton,\n  CForm,\n  CCard,\n  CCardGroup,\n  CCardBody,\n  CInputGroup,\n  CFormFeedback,\n  CSpinner,\n} from \"@coreui/react\"\nimport { connect } from \"react-redux\"\nimport { Redirect } from \"react-router-dom\"\nimport Roles from \"src/router/config\"\n//icons\nimport * as FaIcons from \"react-icons/fa\"\nimport * as FiIcons from \"react-icons/fi\"\nimport * as BsIcons from \"react-icons/bs\"\nimport { Link } from \"react-router-dom\"\nimport { DotLoader } from \"react-spinners\"\n//action\nimport {\n  forgotPassword,\n  validateToken,\n  resetPassword,\n} from \"src/service/apiActions/accountAction/accountAction\"\nimport config from \"../../../config\"\n\nconst style = {\n  marginRight: \"10px\",\n}\nconst spinner = (\n  <div className=\"d-flex justify-content-center align-items-center\">\n    <DotLoader color=\"#36D7B7\" size={100} />\n  </div>\n)\n\nexport class ForgotPassword extends Component {\n  state = {\n    type: \"password\",\n    loading: false,\n    validation: false,\n    message: \"\",\n    permission: \"\",\n    isLoggedIn: false,\n    email: \"\",\n    token: \"\",\n    sentEmail: false,\n    validToken: false,\n    alertColor: \"\",\n    responseToken: [],\n    password: \"\",\n    confirmPassword: \"\",\n    successfull: false,\n  }\n  componentDidMount() {\n    this.redirectSuccessAuthentication()\n  }\n  handleOnChange = (event) => {\n    let name = event.target.name\n    this.setState({\n      [name]: event.target.value,\n    })\n  }\n  handleShowPassword = (event) => {\n    const { type } = this.state\n    event.preventDefault()\n    this.setState({\n      type: type === \"password\" ? \"text\" : \"password\",\n    })\n  }\n  redirectSuccessAuthentication() {\n    const isLoggedIn = this.props.userResponse.isLoggedIn\n    if (isLoggedIn) {\n      let roleName = this.props.userResponse.credentials.roles.roleName\n      let permission = roleName\n        ? roleName\n        : this.props.userResponse.credentials.roles\n\n      this.setState({\n        isLoggedIn: isLoggedIn,\n        permission: permission,\n      })\n    }\n  }\n  componentDidUpdate(prevProps, prevState) {\n    this.manageAccountResponse(prevProps, prevState)\n  }\n  manageAccountResponse = (prevProps, prevState) => {\n    if (prevProps.accountResponse !== this.props.accountResponse) {\n      const { action, status, data } = this.props.accountResponse\n      if (action === \"VALIDATE_TOKEN\" && status === 200) {\n        this.setState({\n          responseToken: data.tokenResponse,\n        })\n      }\n    }\n  }\n  handleForgotPassword = (event) => {\n    event.preventDefault()\n    this.setState({\n      validation: true,\n      loading: true,\n    })\n    const { email } = this.state\n    this.props\n      .forgotPassword(email)\n      .then(() => {\n        const { status, data } = this.props.messageResponse\n        this.handleAlertColor(status)\n\n        this.setState({\n          loading: false,\n          validated: false,\n          sentEmail: true,\n          message: data.message,\n        })\n      })\n      .catch(() => {\n        const { status, data } = this.props.messageResponse\n        this.handleAlertColor(status)\n        this.setState({\n          loading: false,\n          validated: false,\n          message: data.message,\n        })\n      })\n  }\n  handleValidateToken = (event) => {\n    event.preventDefault()\n    this.setState({\n      validation: true,\n      loading: true,\n    })\n    const { token } = this.state\n    this.props\n      .validateToken(token)\n      .then(() => {\n        const { status, data } = this.props.messageResponse\n        this.handleAlertColor(status)\n\n        this.setState({\n          validated: false,\n          validToken: true,\n          message: data.message,\n        })\n\n        setInterval(() => {\n          this.setState({ loading: false })\n        }, 1000)\n      })\n      .catch(() => {\n        const { status, data } = this.props.messageResponse\n        this.handleAlertColor(status)\n        this.setState({\n          loading: false,\n          validated: false,\n          message: data.message,\n        })\n      })\n  }\n  handleResetPassword = (event) => {\n    event.preventDefault()\n    this.setState({\n      validation: true,\n      loading: true,\n    })\n    const { responseToken, password, confirmPassword } = this.state\n    console.log(responseToken)\n    this.props\n      .resetPassword(\n        responseToken.accountId,\n        responseToken.token,\n        password,\n        confirmPassword,\n      )\n      .then(() => {\n        const { status, data } = this.props.messageResponse\n        this.handleAlertColor(status)\n\n        this.setState({\n          validated: false,\n          message: data.message,\n          password: \"\",\n          confirmPassword: \"\",\n          successfull: true,\n        })\n\n        setInterval(() => {\n          this.setState({ loading: false })\n        }, 1000)\n      })\n      .catch(() => {\n        const { status, data } = this.props.messageResponse\n        this.handleAlertColor(status)\n        this.setState({\n          validated: false,\n          message: data.message,\n        })\n        setInterval(() => {\n          this.setState({ loading: false })\n        }, 1000)\n      })\n  }\n  handleAlertColor = (status) => {\n    if (status === 200) {\n      console.log(status)\n      this.setState({\n        alertColor: \"alert alert-success\",\n      })\n    } else if (status >= 400 && status <= 404) {\n      this.setState({\n        alertColor: \"alert alert-danger\",\n      })\n    } else if (status > 405 && status <= 500) {\n      this.setState({\n        alertColor: \"alert alert-warning\",\n      })\n    } else {\n      this.setState({\n        alertColor: \"alert alert-success\",\n      })\n    }\n  }\n  render() {\n    let {\n      type,\n      validation,\n      loading,\n      message,\n      permission,\n      isLoggedIn,\n      sentEmail,\n      validToken,\n      email,\n      token,\n      alertColor,\n      password,\n      confirmPassword,\n      successfull,\n    } = this.state\n\n    if (isLoggedIn) {\n      if (permission === Roles.SUPER_ADMIN || permission === Roles.ADMIN) {\n        return <Redirect to={config.api.private.prefixFrontendUrl + \"/app\"} />\n      } else {\n        return <Redirect to={config.api.private.prefixFrontendUrl + \"/home\"} />\n      }\n    }\n    return (\n      <>\n        <CHeader position=\"sticky\">\n          <CContainer>\n            <Link\n              className=\"nav-link\"\n              to={config.api.private.prefixFrontendUrl + \"/home\"}\n              style={{ cursor: \"pointer\" }}\n            >\n              <h2 className=\"nav-item\">Logo</h2>\n            </Link>\n\n            <CHeaderNav className=\"ms-3 \">\n              <CNavItem>\n                <CNavLink\n                  href={config.api.private.prefixFrontendUrl + \"/login\"}\n                >\n                  <FiIcons.FiLogIn size={20} style={style} />\n                  Login\n                </CNavLink>\n              </CNavItem>\n              <CNavItem>\n                <CNavLink\n                  href={config.api.private.prefixFrontendUrl + \"/register\"}\n                >\n                  <FaIcons.FaUserPlus size={20} style={style} />\n                  Register\n                </CNavLink>\n              </CNavItem>\n            </CHeaderNav>\n          </CContainer>\n        </CHeader>\n        <div className=\"min-vh-100 d-flex flex-row align-items-center text-dark \">\n          <CContainer className=\"w-50 \">\n            <CRow className=\"justify-content-center \">\n              <CCol md=\"12\" lg=\"8\">\n                <CCardGroup className=\"shadow-lg \">\n                  <CCard className=\"p-4 m-0 left-to-right form-container border-0\">\n                    <CCardBody>\n                      {successfull ? (\n                        <></>\n                      ) : validToken ? (\n                        loading ? (\n                          spinner\n                        ) : (\n                          <CForm\n                            noValidate\n                            validated={validation}\n                            onSubmit={this.handleResetPassword}\n                            id=\"reset-password-form\"\n                          >\n                            <CCol\n                              sm=\"12\"\n                              md=\"12\"\n                              lg=\"12\"\n                              className=\"d-flex justify-content-center p-3\"\n                            >\n                              <h2 className=\"text-dark\">Forgot Password</h2>\n                            </CCol>\n                            <CInputGroup className=\"mb-3\">\n                              <CCol xs=\"12\" sm=\"12\" md=\"12\" lg=\"12\">\n                                <CFormFloating className=\"text-dark position-relative\">\n                                  <CFormControl\n                                    name=\"password\"\n                                    type={type}\n                                    id=\"floatingPassword\"\n                                    autoCorrect=\"false\"\n                                    placeholder=\"Password\"\n                                    onChange={this.handleOnChange}\n                                    value={password}\n                                    required\n                                    className=\"rounded-pill ps-4 pe-4\"\n                                  />\n                                  <CFormLabel\n                                    htmlFor=\"exampleFormControlTextarea1 \"\n                                    className=\"ps-4 pe-4\"\n                                  >\n                                    <FaIcons.FaLock size={18} />\n                                    <span className=\"ps-2\">New Password</span>\n                                  </CFormLabel>\n                                  <span\n                                    onClick={this.handleShowPassword}\n                                    className=\"position-absolute top-50 end-0 translate-middle-y ps-4 pe-4\"\n                                  >\n                                    {type === \"password\" ? (\n                                      <FaIcons.FaEyeSlash size={20} />\n                                    ) : (\n                                      <FaIcons.FaEye size={20} />\n                                    )}\n                                  </span>\n                                  <CFormFeedback invalid>\n                                    Please provide a valid password\n                                  </CFormFeedback>\n                                </CFormFloating>\n                              </CCol>\n                            </CInputGroup>\n                            <CInputGroup>\n                              <CCol xs=\"12\" sm=\"12\" md=\"12\" lg=\"12\">\n                                <CFormFloating className=\"text-dark position-relative\">\n                                  <CFormControl\n                                    name=\"confirmPassword\"\n                                    type={type}\n                                    id=\"floatingConfirmPassword\"\n                                    autoCorrect=\"false\"\n                                    placeholder=\"Confirm Password\"\n                                    onChange={this.handleOnChange}\n                                    value={confirmPassword}\n                                    required\n                                    className=\"rounded-pill ps-4 pe-4\"\n                                  />\n                                  <CFormLabel\n                                    htmlFor=\"floatingConfirmPassword \"\n                                    className=\"ps-4 pe-4\"\n                                  >\n                                    <FaIcons.FaLock size={18} />\n                                    <span className=\"ps-2\">\n                                      Confirm Password\n                                    </span>\n                                  </CFormLabel>\n                                  <span\n                                    onClick={this.handleShowPassword}\n                                    className=\"position-absolute top-50 end-0 translate-middle-y ps-4 pe-4\"\n                                  >\n                                    {type === \"password\" ? (\n                                      <FaIcons.FaEyeSlash size={20} />\n                                    ) : (\n                                      <FaIcons.FaEye size={20} />\n                                    )}\n                                  </span>\n                                  <CFormFeedback invalid>\n                                    Please provide a valid password\n                                  </CFormFeedback>\n                                </CFormFloating>\n                              </CCol>\n                              <CCol xs=\"12\" sm=\"12\" md=\"12\" lg=\"12\"></CCol>\n                            </CInputGroup>\n\n                            <CCol\n                              sm=\"12\"\n                              md=\"12\"\n                              lg=\"12\"\n                              className=\"d-flex flex-column justify-content-center\"\n                            >\n                              <CButton\n                                form=\"reset-password-form\"\n                                type=\"submit\"\n                                color=\"info\"\n                                size=\"lg\"\n                                style={{ margin: \"20px auto\" }}\n                                className=\"d-flex justify-content-center align-items-center position-relative overflow-hidden login-btn\"\n                                disabled={loading}\n                              >\n                                {loading ? (\n                                  <CSpinner size=\"sm\" />\n                                ) : (\n                                  <span className=\"d-flex align-items-center login-icon me-2\">\n                                    <FiIcons.FiLogIn size={20} />\n                                  </span>\n                                )}\n\n                                <span className=\"label-btn \">\n                                  Change Password\n                                </span>\n                              </CButton>\n                            </CCol>\n                          </CForm>\n                        )\n                      ) : sentEmail ? (\n                        loading ? (\n                          spinner\n                        ) : (\n                          <CForm\n                            noValidate\n                            validated={validation}\n                            onSubmit={this.handleValidateToken}\n                            id=\"validate-token-form\"\n                          >\n                            <CCol\n                              sm=\"12\"\n                              md=\"12\"\n                              lg=\"12\"\n                              className=\"d-flex justify-content-center p-3\"\n                            >\n                              <h2 className=\"text-dark\">Forgot Password</h2>\n                            </CCol>\n                            <CInputGroup>\n                              <CCol xs=\"12\" sm=\"12\" md=\"12\" lg=\"12\">\n                                <CFormFloating className=\"mb-3 text-dark \">\n                                  <CFormControl\n                                    name=\"token\"\n                                    type=\"text\"\n                                    autoCorrect=\"false\"\n                                    id=\"floatingInputToken\"\n                                    placeholder=\"email\"\n                                    onChange={this.handleOnChange}\n                                    value={token}\n                                    required\n                                    className=\"rounded-pill  ps-4 pe-4\"\n                                  />\n                                  <CFormLabel\n                                    htmlFor=\"floatingInputToken \"\n                                    className=\"ps-4 pe-4\"\n                                  >\n                                    <FaIcons.FaKey size={18} />\n                                    <span className=\"ps-2\">\n                                      Enter the Token\n                                    </span>\n                                  </CFormLabel>\n                                  <CFormFeedback invalid>\n                                    Please provide a valid Token\n                                  </CFormFeedback>\n                                </CFormFloating>\n                              </CCol>\n                            </CInputGroup>\n                            <CCol\n                              sm=\"12\"\n                              md=\"12\"\n                              lg=\"12\"\n                              className=\"d-flex flex-column justify-content-center\"\n                            >\n                              <CButton\n                                form=\"validate-token-form\"\n                                type=\"submit\"\n                                color=\"info\"\n                                size=\"lg\"\n                                style={{ margin: \"20px auto\" }}\n                                className=\"d-flex justify-content-center align-items-center position-relative overflow-hidden login-btn\"\n                                disabled={loading}\n                              >\n                                {loading ? <CSpinner size=\"sm\" /> : <></>}\n\n                                <span className=\"label-btn \">Continue</span>\n                              </CButton>\n                            </CCol>\n                          </CForm>\n                        )\n                      ) : loading ? (\n                        spinner\n                      ) : (\n                        <CForm\n                          noValidate\n                          validated={validation}\n                          onSubmit={this.handleForgotPassword}\n                          id=\"forgot-password-form\"\n                        >\n                          <CCol\n                            sm=\"12\"\n                            md=\"12\"\n                            lg=\"12\"\n                            className=\"d-flex justify-content-center p-3\"\n                          >\n                            <h2 className=\"text-dark\">Forgot Password</h2>\n                          </CCol>\n                          <CInputGroup>\n                            <CCol xs=\"12\" sm=\"12\" md=\"12\" lg=\"12\">\n                              <CFormFloating className=\"mb-3 text-dark \">\n                                <CFormControl\n                                  name=\"email\"\n                                  type=\"text\"\n                                  autoCorrect=\"false\"\n                                  id=\"floatingInputEmail\"\n                                  placeholder=\"email\"\n                                  onChange={this.handleOnChange}\n                                  value={email}\n                                  required\n                                  className=\"rounded-pill  ps-4 pe-4\"\n                                />\n                                <CFormLabel\n                                  htmlFor=\"floatingInputEmail \"\n                                  className=\"ps-4 pe-4\"\n                                >\n                                  <FaIcons.FaEnvelope size={18} />\n                                  <span className=\"ps-2\">Email</span>\n                                </CFormLabel>\n                                <CFormFeedback invalid>\n                                  Please provide a valid Email\n                                </CFormFeedback>\n                              </CFormFloating>\n                            </CCol>\n                          </CInputGroup>\n                          <CCol\n                            sm=\"12\"\n                            md=\"12\"\n                            lg=\"12\"\n                            className=\"d-flex flex-column justify-content-center\"\n                          >\n                            <CButton\n                              form=\"forgot-password-form\"\n                              type=\"submit\"\n                              color=\"info\"\n                              size=\"lg\"\n                              style={{ margin: \"20px auto\" }}\n                              className=\"d-flex justify-content-center align-items-center position-relative overflow-hidden login-btn\"\n                              disabled={loading}\n                            >\n                              {loading ? (\n                                <CSpinner size=\"sm\" />\n                              ) : (\n                                <span className=\"d-flex align-items-center login-icon me-2\">\n                                  <BsIcons.BsSearch size={20} />\n                                </span>\n                              )}\n\n                              <span className=\"label-btn \">Reset Password</span>\n                            </CButton>\n                          </CCol>\n                        </CForm>\n                      )}\n                      {message && (\n                        <div className=\"form-group\">\n                          <div className={alertColor} role=\"alert\">\n                            {message}\n                          </div>\n                          {sentEmail ? (\n                            <>\n                              <div className=\"alert alert-info\" role=\"alert\">\n                                <strong>Note: </strong>\n                                <span>\n                                  If you not Found the Email Message in your\n                                  inbox, Try to look in your Spam. Thankyou!\n                                </span>\n                              </div>\n                            </>\n                          ) : (\n                            <></>\n                          )}\n                        </div>\n                      )}\n                      <Link\n                        to={config.api.private.prefixFrontendUrl + \"/login\"}\n                      >\n                        Back Login\n                      </Link>\n                    </CCardBody>\n                  </CCard>\n                </CCardGroup>\n              </CCol>\n            </CRow>\n          </CContainer>\n        </div>\n      </>\n    )\n  }\n}\nconst mapStateToProps = (state) => {\n  return {\n    userResponse: state.userResponse,\n    messageResponse: state.messageResponse,\n    accountResponse: state.accountResponse,\n  }\n}\nexport default connect(mapStateToProps, {\n  forgotPassword,\n  validateToken,\n  resetPassword,\n})(ForgotPassword)\n","import authHeader from \"../auth/authHeader\"\nimport axios from \"./RestApi\"\n\nexport class AccountApiService {\n  getAccountEmployees(query, page, limit) {\n    return axios.get(\"/users/account\", {\n      headers: authHeader(),\n      params: {\n        query: query,\n        page: page,\n        limit: limit,\n      },\n    })\n  }\n  getUsersAccount(query, role, page, limit) {\n    return axios.get(\"/users/account\", {\n      headers: authHeader(),\n      params: {\n        query: query,\n        role: role,\n        page: page,\n        limit: limit,\n      },\n    })\n  }\n\n  saveEmployeeAccount(\n    firstName,\n    lastName,\n    email,\n    phoneNumber,\n    username,\n    password,\n    birthday,\n    role,\n  ) {\n    console.log(birthday)\n    return axios.post(\n      \"/users/account/create\",\n      {\n        firstName,\n        lastName,\n        email,\n        phoneNumber,\n        username,\n        password,\n        birthday,\n        role,\n      },\n      {\n        headers: authHeader(),\n      },\n    )\n  }\n  deleteAccount(id) {\n    return axios.delete(\"/users/account/delete/\" + id, {\n      headers: authHeader(),\n    })\n  }\n  updateUser(id, firstName, lastName, phoneNumber, birthday) {\n    return axios.put(\n      \"/users/account/update/\" + id,\n      {\n        firstName: firstName,\n        lastName: lastName,\n        phoneNumber: phoneNumber,\n        birthday: birthday,\n      },\n      {\n        headers: authHeader(),\n      },\n    )\n  }\n  banAccount(id) {\n    return axios.delete(\"/users/account/ban/\" + id, {\n      headers: authHeader(),\n    })\n  }\n  changePassword(id, currentPassword, newPassword, confirmPassword) {\n    let password = newPassword\n    return axios.post(\n      \"/users/account/change/password\",\n      {\n        id,\n        currentPassword,\n        password,\n        confirmPassword,\n      },\n      {\n        headers: authHeader(),\n      },\n    )\n  }\n  forgotPassword(email) {\n    console.log(email)\n    return axios.get(\"/account/password/forgot\", {\n      params: {\n        email: email,\n      },\n    })\n  }\n  verifyAccount(code) {\n    return axios.get(\"/account/verification/\" + code)\n  }\n  validateToken(token) {\n    return axios.get(\"/account/password/forgot/token\", {\n      params: {\n        token: token,\n      },\n    })\n  }\n  resetPassword(accountId, token, password, confirmPassword) {\n    return axios.post(\"/users/account/reset/password\", {\n      accountId: accountId,\n      token: token,\n      password: password,\n      confirmPassword: confirmPassword,\n    })\n  }\n  getMe() {\n    return axios.get(\"/users/account/me\", {\n      headers: authHeader(),\n    })\n  }\n}\nexport default new AccountApiService()\n","import {\n  BAN_ACCOUNT,\n  CHANGE_PASSWORD,\n  DELETE_ACCOUNT,\n  FORGOT_PASSWORD,\n  GET_ME,\n  GET_USERS_ACCOUNT,\n  RESET_PASSWORD,\n  SAVE_EMPLOYEE,\n  UPDATE_USER,\n  VALIDATE_TOKEN,\n  VERIFY_ACCOUNT,\n} from \"src/service/redux/constants\"\nimport AccountApiService from \"src/service/restAPI/AccountApiService\"\nimport { SET_MESSAGE } from \"src/constants/userConstants\"\n\nexport const getUsersAccount =\n  (query, role, page, limit) => async (dispatch) => {\n    return AccountApiService.getUsersAccount(query, role, page, limit).then(\n      (response) => {\n        dispatch({\n          type: GET_USERS_ACCOUNT,\n          payload: {\n            status: 200,\n            action: \"USERSACCOUNT\",\n            data: {\n              accounts: response.data,\n            },\n          },\n        })\n        return Promise.resolve()\n      },\n      (error) => {\n        const errorMessage =\n          (error.response &&\n            error.response.data &&\n            error.response.data.message) ||\n          error.message ||\n          error.toString()\n\n        const status =\n          (error.response && error.response.data && error.response.data.code) ||\n          error.toString()\n\n        dispatch({\n          type: SET_MESSAGE,\n          payload: {\n            status: status,\n            data: {\n              message: errorMessage,\n            },\n          },\n        })\n        return Promise.reject()\n      },\n    )\n  }\nexport const saveEmployee =\n  (\n    firstName,\n    lastName,\n    email,\n    phoneNumber,\n    username,\n    password,\n    birthday,\n    role,\n  ) =>\n    async (dispatch) => {\n      return AccountApiService.saveEmployeeAccount(\n        firstName,\n        lastName,\n        email,\n        phoneNumber,\n        username,\n        password,\n        birthday,\n        role,\n      ).then(\n        (response) => {\n          dispatch({\n            type: SAVE_EMPLOYEE,\n            payload: {\n              status: 200,\n              action: \"SAVEEMPLOYEE\",\n              data: {},\n            },\n          })\n          dispatch({\n            type: SET_MESSAGE,\n            payload: {\n              status: 200,\n              data: {\n                message: \"Successfully Saved\",\n              },\n            },\n          })\n        },\n        (error) => {\n          const errorMessage =\n            (error.response &&\n              error.response.data &&\n              error.response.data.message) ||\n            error.message ||\n            error.toString()\n\n          const status =\n            (error.response && error.response.data && error.response.data.code) ||\n            error.toString()\n\n          dispatch({\n            type: SET_MESSAGE,\n            payload: {\n              status: status,\n              data: {\n                message: errorMessage,\n              },\n            },\n          })\n          return Promise.reject()\n        },\n      )\n    }\nexport const deleteAccount = (id) => async (dispatch) => {\n  return AccountApiService.deleteAccount(id).then(\n    (response) => {\n      dispatch({\n        type: DELETE_ACCOUNT,\n        payload: {\n          status: 200,\n          action: \"DELETEACCOUNT\",\n          data: {},\n        },\n      })\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: 200,\n          data: {\n            message: \"Successfully Deleted\",\n          },\n        },\n      })\n    },\n    (error) => {\n      const errorMessage =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: errorMessage,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\nexport const banAccount = (id) => async (dispatch) => {\n  return AccountApiService.banAccount(id).then(\n    (response) => {\n      dispatch({\n        type: BAN_ACCOUNT,\n        payload: {\n          status: 200,\n          action: \"BANACCOUNT\",\n          data: {},\n        },\n      })\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: 200,\n          data: {\n            message: \"Successfully Banned\",\n          },\n        },\n      })\n    },\n    (error) => {\n      const errorMessage =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: errorMessage,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\nexport const changePassword =\n  (id, currentPassword, newPassword, confirmPassword) => async (dispatch) => {\n    return AccountApiService.changePassword(\n      id,\n      currentPassword,\n      newPassword,\n      confirmPassword,\n    ).then(\n      (response) => {\n        dispatch({\n          type: CHANGE_PASSWORD,\n          payload: {\n            status: 200,\n            action: \"changepassword\",\n            data: {},\n          },\n        })\n        dispatch({\n          type: SET_MESSAGE,\n          payload: {\n            status: 200,\n            data: {\n              message: \"Password Change Successfully.\",\n            },\n          },\n        })\n        return Promise.resolve()\n      },\n      (error) => {\n        const errorMessage =\n          (error.response &&\n            error.response.data &&\n            error.response.data.message) ||\n          error.message ||\n          error.toString()\n\n        const status =\n          (error.response && error.response.data && error.response.data.code) ||\n          error.toString()\n\n        dispatch({\n          type: SET_MESSAGE,\n          payload: {\n            status: status,\n            data: {\n              message: errorMessage,\n            },\n          },\n        })\n        return Promise.reject()\n      },\n    )\n  }\n\nexport const forgotPassword = (email) => async (dispatch) => {\n  console.log(email)\n  return AccountApiService.forgotPassword(email).then(\n    (response) => {\n      dispatch({\n        type: FORGOT_PASSWORD,\n        payload: {\n          status: 200,\n          action: FORGOT_PASSWORD,\n          data: {},\n        },\n      })\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: 200,\n          data: {\n            message:\n              \"The Forgot Password Token has been sent to your Email Address.\",\n            // {\n            //   message:,\n            //   note: \"If you not Found the Email Message in your inbox, Try to look in your Spam. Thankyou!\"\n            // },\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      const errorMessage =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: errorMessage,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\n\nexport const validateToken = (token) => async (dispatch) => {\n  return AccountApiService.validateToken(token).then(\n    (response) => {\n      dispatch({\n        type: VALIDATE_TOKEN,\n        payload: {\n          status: 200,\n          action: VALIDATE_TOKEN,\n          data: {\n            tokenResponse: response.data,\n          },\n        },\n      })\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: 200,\n          data: {\n            message: \"\",\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      const errorMessage =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: errorMessage,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\nexport const resetPassword =\n  (accoutnId, token, password, confirmPassword) => async (dispatch) => {\n    return AccountApiService.resetPassword(\n      accoutnId,\n      token,\n      password,\n      confirmPassword,\n    ).then(\n      (response) => {\n        dispatch({\n          type: RESET_PASSWORD,\n          payload: {\n            status: 200,\n            action: RESET_PASSWORD,\n            data: {},\n          },\n        })\n        dispatch({\n          type: SET_MESSAGE,\n          payload: {\n            status: 200,\n            data: {\n              message: \"Successfully Reset your Password\",\n            },\n          },\n        })\n        return Promise.resolve()\n      },\n      (error) => {\n        const errorMessage =\n          (error.response &&\n            error.response.data &&\n            error.response.data.message) ||\n          error.message ||\n          error.toString()\n\n        const status =\n          (error.response && error.response.data && error.response.data.code) ||\n          error.toString()\n\n        dispatch({\n          type: SET_MESSAGE,\n          payload: {\n            status: status,\n            data: {\n              message: errorMessage,\n            },\n          },\n        })\n        return Promise.reject()\n      },\n    )\n  }\nexport const getMe = () => async (dispatch) => {\n  return AccountApiService.getMe().then(\n    (response) => {\n      dispatch({\n        type: GET_ME,\n        payload: {\n          status: 200,\n          action: GET_ME,\n          data: {\n            account: response.data,\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      const errorMessage =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: errorMessage,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\nexport const updateUser =\n  (id, firstName, lastName, phoneNumber, birthday) => async (dispatch) => {\n    return AccountApiService.updateUser(\n      id,\n      firstName,\n      lastName,\n      phoneNumber,\n      birthday,\n    ).then(\n      (response) => {\n        dispatch({\n          type: UPDATE_USER,\n          payload: {\n            status: 200,\n            action: UPDATE_USER,\n            data: {},\n          },\n        })\n        dispatch({\n          type: SET_MESSAGE,\n          payload: {\n            status: 200,\n            data: {\n              message: \"Successfully Updated\",\n            },\n          },\n        })\n        return Promise.resolve()\n      },\n      (error) => {\n        const errorMessage =\n          (error.response &&\n            error.response.data &&\n            error.response.data.message) ||\n          error.message ||\n          error.toString()\n\n        const status =\n          (error.response && error.response.data && error.response.data.code) ||\n          error.toString()\n\n        dispatch({\n          type: SET_MESSAGE,\n          payload: {\n            status: status,\n            data: {\n              message: errorMessage,\n            },\n          },\n        })\n        return Promise.reject()\n      },\n    )\n  }\nexport const verifyCode = (code) => async (dispatch) => {\n  return AccountApiService.verifyAccount(code).then(\n    (response) => {\n      dispatch({\n        type: VERIFY_ACCOUNT,\n        payload: {\n          status: 200,\n          action: VERIFY_ACCOUNT,\n          data: {\n\n          }\n        }\n\n      })\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: 200,\n          data: {\n            message: \"Your Account has been Verified. Try To Login.\",\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n\n      const errorMessage =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: errorMessage,\n          },\n        },\n      })\n      return Promise.reject()\n    }\n  )\n}"],"sourceRoot":""}