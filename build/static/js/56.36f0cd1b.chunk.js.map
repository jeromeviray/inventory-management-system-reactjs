{"version":3,"sources":["views/common/cart/checkout/Checkout.js","service/restAPI/CartApiService.js","service/apiActions/cartAction/cartAction.js"],"names":["Checkout","Component","state","token","message","cart","cartItems","checked","pendingItem","totalAmount","quantity","retrieveCartItems","this","props","getCart","manageCartItemsResponse","prevProps","prevState","cartResponse","action","status","data","setState","Array","length","fill","handOnRemoveItem","id","removeCartItem","then","handleOnChange","position","check","map","item","index","find","indexOf","splice","push","totalPrice","reduce","sum","currentState","amount","product","promo","console","log","percentage","discount","productPrice","price","paymentDetailsOnChange","manageStatus","color","shape","incrementValue","productId","quantityAction","decrementValue","handleQuantityOnChange","event","preventDefault","value","max","min","target","Math","Number","componentDidMount","componentDidUpdate","render","headerStyle","fontWeight","className","style","addedAt","inventory","maxQuantity","totalStock","disabled","name","onChange","rounded","src","fileImages","config","api","private","baseUrl","path","fileName","NO_IMAGE_BASE64","width","height","productName","fontSize","toFixed","type","onClick","pattern","readOnly","connect","userResponse","messageResponse","clearMessage","getOrderItems","addToCart","axios","post","headers","authHeader","get","removeItem","delete","put","async","CartApiService","response","dispatch","ADD_TO_CART","payload","SET_MESSAGE","Promise","resolve","error","errorMessage","toString","code","reject","GET_CART_ITEMS","REMOVE_ITEM","QUANTITY_ACTION"],"mappings":"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","file":"static/js/56.36f0cd1b.chunk.js","sourcesContent":["import React, { Component } from \"react\"\nimport {\n  CRow,\n  CCol,\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCardFooter,\n  CImage,\n  CFormCheck,\n  CCloseButton,\n\n  CBadge,\n  CContainer,\n} from \"@coreui/react\"\nimport { connect } from \"react-redux\"\nimport { BsDash, BsPlus } from \"react-icons/bs\";\n//action\nimport {\n  getCart,\n  removeCartItem, quantityAction\n} from \"src/service/apiActions/cartAction/cartAction\"\nimport { clearMessage } from \"src/service/apiActions/messageAction/messageAction\"\nimport { getOrderItems } from \"src/service/apiActions/orderAction/orderAction\"\nimport config from \"../../../../config\";\n\nimport { NO_IMAGE_BASE64 } from \"src/service/redux/constants\"\n\n//icon\n// import * as IoIcons from \"react-icons/io5\";\n\nexport class Checkout extends Component {\n  state = {\n    // isLoggedIn: false,\n    // permission: '',\n    token: \"\",\n    message: \"\",\n    cart: [],\n    cartItems: [],\n\n    checked: [],\n    pendingItem: [],\n    totalAmount: 0,\n    quantity: 0,\n  }\n  componentDidMount() {\n    this.retrieveCartItems()\n  }\n  retrieveCartItems = () => {\n    this.props.getCart()\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    this.manageCartItemsResponse(prevProps, prevState)\n  }\n  manageCartItemsResponse = (prevProps, prevState) => {\n    if (prevProps.cartResponse !== this.props.cartResponse) {\n      let { action, status, data } = this.props.cartResponse\n      if (action === \"CARTITEMS\" && status === 200) {\n        this.setState({\n          checked: new Array(data.cart.cartItems.length).fill(false),\n          cart: data.cart,\n          cartItems: data.cart.cartItems,\n        })\n      }\n    }\n  }\n  handOnRemoveItem = (id) => {\n    let { token } = this.state\n    this.props\n      .removeCartItem(id)\n      .then(() => {\n        this.retrieveCartItems(token)\n      })\n  }\n  handleOnChange = (position) => {\n    let { checked, pendingItem, cartItems } = this.state\n    let check = checked.map((item, index) => {\n      return index === position ? !item : item\n    })\n\n    let find = pendingItem.indexOf(cartItems[position])\n\n    if (find > -1) {\n      pendingItem.splice(find, 1)\n    } else {\n      pendingItem.push(cartItems[position])\n    }\n\n    let totalPrice = check.reduce((sum, currentState, index) => {\n      if (currentState === true) {\n        let status = cartItems[index].product.promo && cartItems[index].product.promo.status\n        console.log(cartItems[index])\n        let amount\n        if (status === \"ONGOING\") {\n          const { product } = cartItems[index]\n          let percentage = product.promo.percentage\n          let discount = (product.product.productPrice * percentage) / 100\n          let price = product.product.productPrice - discount\n          amount = cartItems[index].quantity * price\n\n        } else {\n          amount = cartItems[index].amount\n        }\n        return sum + amount\n      }\n      return sum\n    }, 0)\n    let quantity = check.reduce((quantity, currentState, index) => {\n      if (currentState === true) {\n        return quantity + cartItems[index].quantity\n      }\n      return quantity\n    }, 0)\n    this.setState({\n      checked: check,\n      totalAmount: totalPrice,\n      quantity: quantity,\n    })\n    this.props.paymentDetailsOnChange(pendingItem, quantity, totalPrice)\n  }\n\n  manageStatus = (status) => {\n    switch (status) {\n      case \"OK\":\n        return (\n          <CBadge color=\"success\" shape=\"rounded-pill\">\n            {status}\n          </CBadge>\n        )\n      case \"LOW\":\n        return (\n          <CBadge color=\"warning\" shape=\"rounded-pill\">\n            {status}\n          </CBadge>\n        )\n      case \"OUT_OF_STOCK\":\n        return (\n          <CBadge color=\"danger\" shape=\"rounded-pill\">\n            OUT OF STOCK\n          </CBadge>\n        )\n      default:\n        return (\n          <CBadge color=\"danger\" shape=\"rounded-pill\">\n            {status}\n          </CBadge>\n        )\n    }\n  }\n  incrementValue = (index) => {\n    const { cartItems } = this.state;\n    const productId = cartItems[index].product.product.id\n    this.props.quantityAction(\"increase\", productId).then(() => {\n      this.retrieveCartItems()\n    })\n\n  }\n\n  decrementValue = (index) => {\n    const { cartItems } = this.state;\n    const productId = cartItems[index].product.product.id\n    this.props.quantityAction(\"decrease\", productId).then(() => {\n      this.retrieveCartItems()\n    })\n\n  }\n  handleQuantityOnChange = (event) => {\n    event.preventDefault();\n\n    let { value, max, min } = event.target;\n    value = Math.max(Number(min), Math.min(Number(max), Number(value)));\n\n    this.setState({\n      quantity: value\n    })\n\n  }\n  render() {\n    let { cartItems, checked } = this.state\n    const headerStyle = {\n      fontWeight: \"800\",\n    }\n    return (\n      <>\n        <CContainer>\n\n          <CCard className=\"mb-3 border-0\">\n            <CCardHeader>\n              <div className=\"d-flex justify-content-between\">\n                <div>\n                  <span style={{ ...headerStyle }}>Select</span>\n                </div>\n                <div>\n                  <span style={{ ...headerStyle }}>Item</span>\n                </div>\n                <div>\n                  <span style={{ ...headerStyle }}>Price</span>\n                </div>\n                <div>\n                  <span style={{ ...headerStyle }}>Quantity</span>\n                </div>\n                <div>\n                  <span style={{ ...headerStyle }}>Action</span>\n                </div>\n              </div>\n            </CCardHeader>\n\n            <CCardBody>\n              {cartItems.length > 0 ? (\n                cartItems.map((item, index) => {\n                  const { quantity, addedAt, } = item\n                  const { product, inventory, promo } = item.product\n                  let percentage = 0\n                  let discount = 0\n                  let price = 0\n                  let amount = item.amount\n                  let status = promo && promo.status;\n\n\n                  if (status === \"ONGOING\") {\n                    percentage = promo && promo.percentage\n                    discount = (product.productPrice * percentage) / 100\n                    price = product.productPrice - discount\n                    amount = quantity * (price)\n                  } else {\n                    amount = quantity * product.productPrice\n                  }\n\n                  let maxQuantity = status === \"ONGOING\" ? promo.quantity : inventory.totalStock\n                  let disabled = status === \"ONGOING\" ? false : inventory.totalStock <= 0 ? true : false;\n                  return (\n                    <CCard\n                      key={index}\n                      className={\n                        checked[index] ? \"border border-success mb-3\" : \"mb-3\"\n                      }\n                    >\n                      <CCardBody>\n                        <div className=\"d-flex align-items-start\">\n                          <div className=\"me-3\">\n                            <CFormCheck\n                              color=\"success\"\n                              name=\"checked\"\n                              id=\"flexCheckChecked\"\n                              checked={checked[index]}\n                              value={item}\n                              onChange={() => this.handleOnChange(index)}\n                              disabled={disabled}\n                            />\n                          </div>\n\n                          <CImage\n                            rounded\n                            src={\n                              product.fileImages.length > 0\n                                ? config.api.private.baseUrl + \"/api/v1/products/getImages/bytesArrays/\" +\n                                product.fileImages[0].path +\n                                product.fileImages[0].fileName\n                                : NO_IMAGE_BASE64\n                            }\n                            width={100}\n                            height={100}\n                          />\n                          <div className=\"ms-2  w-100\">\n                            <CRow className=\"d-flex justify-content-between\">\n                              <CCol className=\"ps-4 text-dark\">\n                                {product.productName}\n                              </CCol>\n                              <CCol className=\"text-dark d-flex flex-column align-items-center\">\n                                <span>\n                                  &#8369;{status === \"ONGOING\" ? (\n                                    <>\n                                      <span\n                                        className=\"text-muted text-decoration-line-through me-2\"\n                                        style={{ fontSize: \"16px\" }}\n                                      >\n                                        {product.productPrice.toFixed(2)}\n                                      </span>\n                                      <span>{price.toFixed(2)}</span><br />\n                                      <span\n                                        className=\"text-muted \"\n                                        style={{ fontSize: \"16px\" }}\n                                      >\n                                        {percentage + \"%\"} discount\n                                      </span>\n                                    </>\n                                  ) : (\n                                    product.productPrice.toFixed(2)\n                                  )}\n                                </span>\n                              </CCol>\n                              <CCol className=\"text-dark d-flex flex-column align-items-center\">\n                                <div className=\"quantity-container\">\n                                  <CButton\n                                    className=\"decrement-btn\"\n                                    type=\"button\"\n                                    disabled={quantity === 1 ? true : false}\n                                    onClick={() => this.decrementValue(index)}\n                                  >\n                                    <BsDash />\n\n                                  </CButton>\n                                  <input\n                                    type=\"text\"\n                                    className=\"input-quantity\"\n                                    value={quantity}\n                                    pattern=\"[0-9]*\"\n                                    onChange={this.handleQuantityOnChange}\n                                    max={status === \"ONGOING\" ? promo.quantity : inventory.totalStock}\n                                    min={1}\n                                    readOnly={true}\n\n                                  />\n                                  <CButton className=\"increment-btn\"\n                                    disabled={quantity === maxQuantity ? true : maxQuantity <= 0 ? true : false}\n                                    onClick={() => this.incrementValue(index)} >\n                                    <BsPlus />\n                                  </CButton>\n                                </div>\n                              </CCol>\n                              <CCol className=\"text-dark  d-flex justify-content-end\">\n                                <span>\n                                  <CCloseButton\n                                    onClick={() =>\n                                      this.handOnRemoveItem(item.id)\n                                    }\n                                  />\n                                </span>\n                              </CCol>\n                            </CRow>\n                          </div>\n                        </div>\n                      </CCardBody>\n                      <CCardFooter\n                        className={\n                          checked[index] ? \"bg-success text-white\" : \"\"\n                        }\n                      >\n                        <div className=\"d-flex justify-content-between align-items-center w-100 \">\n                          <span className=\"text-muted font-style\">\n                            <div>\n                              {addedAt}\n                            </div>\n                            <div>\n                              Stock: <span className=\"me-2\">{status === \"ONGOING\" ? promo.quantity : inventory.totalStock}</span>{disabled ? this.manageStatus(inventory.status) : \"\"}\n                            </div>\n                          </span>\n                          <div className=\"d-flex align-items-center\">\n                            <span className=\"text-muted font-style me-2\">\n                              Amount\n                            </span>\n                            <span style={{ fontWeight: \"500\" }}>\n                              &#8369;{amount.toFixed(2)}\n                            </span>\n                          </div>\n                        </div>\n                      </CCardFooter>\n                    </CCard>\n                  )\n                })\n              ) : (\n                <CCard className=\"mb-3 border-0\">\n                  <CCardBody className=\"text-center\">\n                    No Cart Item Added\n                  </CCardBody>\n                </CCard>\n              )}\n            </CCardBody>\n          </CCard>\n        </CContainer>\n      </>\n    )\n  }\n}\nconst mapStateToProps = (state) => {\n  return {\n    userResponse: state.userResponse,\n    messageResponse: state.messageResponse,\n    cartResponse: state.cartResponse,\n  }\n}\nexport default connect(mapStateToProps, {\n  getCart,\n  removeCartItem,\n  clearMessage,\n  getOrderItems,\n  quantityAction\n})(Checkout)\n","import authHeader from '../auth/authHeader';\nimport axios from './RestApi'\n\nexport class CartApiService {\n    addToCart(id) {\n        return axios.post(\"/cart/item/add/\" + id, {\n\n        }, {\n            headers: authHeader()\n        })\n    }\n    getCart() {\n        return axios.get(\"/cart\", {\n            headers: authHeader()\n        })\n    }\n    removeItem(id) {\n        return axios.delete(\"/cart/item/remove/\" + id, {\n            headers: authHeader()\n        });\n    }\n    quantityAction(action, productId) {\n        return axios.put(\"/cart/item/\" + action + \"/quantity/\" + productId, {}, {\n            headers: authHeader()\n        })\n    }\n}\n\nexport default new CartApiService();","import { SET_MESSAGE } from \"src/constants/userConstants\"\nimport {\n  ADD_TO_CART,\n  GET_CART_ITEMS,\n  QUANTITY_ACTION,\n  REMOVE_ITEM,\n} from \"src/service/redux/constants\"\nimport CartApiService from \"src/service/restAPI/CartApiService\"\n\nexport const addToCart = (id) => async (dispatch) => {\n  return CartApiService.addToCart(id).then(\n    (response) => {\n      dispatch({\n        type: ADD_TO_CART,\n        payload: {\n          status: 200,\n          action: \"ADDTOCART\",\n          data: {},\n        },\n      })\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: 200,\n          data: {\n            message: \"Added Successfully\",\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      const errorMessage =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: errorMessage,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\nexport const getCart = () => async (dispatch) => {\n  return CartApiService.getCart().then(\n    (response) => {\n      dispatch({\n        type: GET_CART_ITEMS,\n        payload: {\n          status: 200,\n          action: \"CARTITEMS\",\n          data: {\n            cart: response.data,\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      const errorMessage =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: errorMessage,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\n\nexport const removeCartItem = (id) => async (dispatch) => {\n  return CartApiService.removeItem(id).then(\n    (response) => {\n      dispatch({\n        type: REMOVE_ITEM,\n        payload: {\n          status: 200,\n          action: \"REMOVE\",\n          data: {},\n        },\n      })\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: 200,\n          data: {\n            message: \"Remove Item Successfully\",\n          },\n        },\n      })\n\n      return Promise.resolve()\n    },\n    (error) => {\n      console.log(error)\n      const errorMessage =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: errorMessage,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\n\nexport const quantityAction = (action, productId) => async (dispatch) => {\n  return CartApiService.quantityAction(action, productId).then(\n    (response) => {\n      dispatch({\n        type: QUANTITY_ACTION,\n        payload: {\n          status: 200,\n          action: QUANTITY_ACTION,\n          data: {},\n        },\n      })\n      // dispatch({\n      //     type: SET_MESSAGE,\n      //     payload: {\n      //         status: 200,\n      //         data: {\n      //             message: action + \" Quantity Product Id: \" + productId\n      //         }\n      //     }\n      // })\n    },\n    (error) => {\n      const errorMessage =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: errorMessage,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\n"],"sourceRoot":""}