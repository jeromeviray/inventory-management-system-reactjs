{"version":3,"sources":["service/apiActions/modalAction/modalAction.js","service/apiActions/productAction/productAction.js","service/restAPI/ProductApiService.js","service/restAPI/BranchApiService.js","components/modals/alert/AlertModal.js","service/apiActions/branchAction/branchAction.js","service/restAPI/CategoriesApiService.js","service/apiActions/categoryAction/categoryAction.js","service/restAPI/SupplierApiService.js","service/apiActions/supplierAction/supplierAction.js","service/restAPI/BrandApiService.js","service/apiActions/brandAction/brandAction.js","service/restAPI/PromoApiService.js","service/apiActions/promoAction/promoAction.js"],"names":["setProductModal","visible","action","icon","async","dispatch","type","SET_PRODUCTEDITMODAL_VISIBILIT","payload","status","data","setProductDetailsModal","product","SET_PRODUCT_DETAILS_MODAL","editProductModal","updateProduct","EDIT_PRODUCT_MODAL","setAlertModal","alert","module","id","ALERT_MODAL","setAlertBanModal","ALERT_BAN_MODAL","setStoreModal","storeInfo","UDPATE_STORE_INFORMATION","addBrandModal","branch","ADD_BRAND_MODAL","brand","addCategoryModal","category","ADD_CATEGORY_MODAL","addAccountModal","employee","ADD_EMPLOYEE_MODAL","changePasswordModal","CHANGE_PASSWORD_MODAL","setLoginModal","LOGIN_MODAL","setAddressModal","address","SET_ADDRESS_MODAL","setSupplierModal","supplier","SET_SUPPLIER_MODAL","setSupplyModal","supply","SET_SUPPLY_MODAL","setScanModal","SET_SCAN_MODAL","setPromoModal","promo","SET_PROMO_MODAL","setTermAndConditionModal","termsAndCondition","SET_TERMS_AND_CONDITION_MODAL","setCarouselModal","carousel","SET_CAROULSE_MDOAL","saveProduct","formData","ProductApiService","then","response","SAVE_PRODUCT","SET_MESSAGE","message","Promise","resolve","error","console","log","error_message","toString","code","SAVE_FAIL","reject","getDiscoverProducts","query","page","limit","GET_DISCOVER_PRODUCT","products","SET_PRODUCT_MESSAGE","getPopularProducts","GET_POPULAR_PRODUCT","getImage","image","token","GET_IMAGE","FAIL_GET_IMAGE","getProduct","GET_PRODUCT","getProductDetails","GET_PRODUCT_DETAILS","deleteProduct","DELETE_PRODUCT","productId","UPDATE_PRODUCT","updatedProduct","searchProductByBarcodeOrName","SEARCH_PRODUCT","getProductsByCategoryName","categoryName","GET_PRODUCT_BY_CATEGORY_NAME","getProductsByStatus","GET_PRODUCTS_BY_STATUS","getProductsWithPromo","GET_PRODUCTS_WITH_PROMO","axios","post","headers","authHeader","put","delete","getProducts","get","params","path","getPath","responseType","getBranches","Authorization","getBranchesWithTotaProduct","saveBranch","updateBranch","deleteBranch","AlertModal","Component","state","loading","success","manageModalAlert","prevProps","prevState","modalVisible","this","props","setState","handleOnDelete","accessToken","userResponse","credentials","branchDelete","handleDeleteBrand","handleAccountDelete","handleSupplierDelete","handleDeleteCategory","handleDeleteProduct","handleDeletePromo","handleDeleteMe","setInterval","window","location","reload","catch","successFully","deleteBrand","messageResponse","deleteAccount","deleteSupplier","deleteCategory","deletePromo","logout","componentDidUpdate","render","onDismiss","className","color","variant","onClick","disabled","size","connect","modalVisibleResponse","BranchApiService","DELETE_BRANCH","clearMessage","withRouter","saveCategory","name","updateCategory","getCategories","getCategory","getCategoriesList","CategoriesApiService","SAVE_CATEGORY","GET_CATEGORIES","categories","GET_CATEGORIES_LIST","categoriesList","UPDATE_CATEGORY","updatedCategory","DELETE_CATEGORY","createSupplier","updateSupplier","getSuppliers","getSupplier","SupplierApiService","CREATE_SUPPLIER","errorMessage","UPDATE_SUPPLIER","DELETE_SUPPLIER","GET_SUPPLIERS","suppliers","getBrands","getBrand","saveBrand","updateBrand","BrandApiService","GET_BRANDS","brands","savingBrand","SAVE_BRAND","FAIL_BRAND","UPDATE_BRAND","DELETE_BRAND","getPromos","savePromo","quantity","percentage","startDate","endDate","updatePromo","PromoApiService","GET_PROMOS","productsWithPromo","SAVE_PROMO","DELETE_PROMO","UPDATE_PROMO","updatedPromo"],"mappings":"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","file":"static/js/5.67abcfa5.chunk.js","sourcesContent":["import {\n  ADD_BRANCH_MODAL,\n  ALERT_MODAL,\n  EDIT_PRODUCT_MODAL,\n  SET_PRODUCTEDITMODAL_VISIBILIT,\n  ADD_BRAND_MODAL,\n  ADD_CATEGORY_MODAL,\n  ADD_EMPLOYEE_MODAL,\n  SET_PRODUCT_DETAILS_MODAL,\n  LOGIN_MODAL,\n  SET_ADDRESS_MODAL,\n  SET_SUPPLIER_MODAL,\n  SET_SUPPLY_MODAL,\n  SET_SCAN_MODAL,\n  SET_PROMO_MODAL,\n  ALERT_BAN_MODAL,\n  CHANGE_PASSWORD_MODAL,\n  UDPATE_STORE_INFORMATION,\n  SET_TERMS_AND_CONDITION_MODAL,\n  SET_CAROULSE_MDOAL,\n} from \"src/service/redux/constants\"\n\nexport const setProductModal = (visible, action, icon) => async (dispatch) => {\n  dispatch({\n    type: SET_PRODUCTEDITMODAL_VISIBILIT,\n    payload: {\n      status: 200,\n      data: {\n        visible: visible,\n        action: action,\n        icon: icon,\n      },\n    },\n  })\n}\nexport const setProductDetailsModal =\n  (visible, action, product) => async (dispatch) => {\n    dispatch({\n      type: SET_PRODUCT_DETAILS_MODAL,\n      payload: {\n        status: 200,\n        data: {\n          visible: visible,\n          action: action,\n          product: product,\n        },\n      },\n    })\n  }\nexport const editProductModal =\n  (visible, action, updateProduct, icon) => async (dispatch) => {\n    dispatch({\n      type: EDIT_PRODUCT_MODAL,\n      payload: {\n        status: 200,\n        data: {\n          visible: visible,\n          action: action,\n          product: updateProduct,\n          icon: icon,\n        },\n      },\n    })\n  }\nexport const setAlertModal =\n  (alert, action, module, id) => async (dispatch) => {\n    dispatch({\n      type: ALERT_MODAL,\n      payload: {\n        action: action,\n        module: module,\n        alert: alert,\n        data: {\n          id: id,\n        },\n      },\n    })\n  }\nexport const setAlertBanModal =\n  (alert, action, module, id) => async (dispatch) => {\n    dispatch({\n      type: ALERT_BAN_MODAL,\n      payload: {\n        action: action,\n        module: module,\n        alert: alert,\n        data: {\n          id: id,\n        },\n      },\n    })\n  }\nexport const setStoreModal =\n  (visible, action, storeInfo, icon) => async (dispatch) => {\n    dispatch({\n      type: UDPATE_STORE_INFORMATION,\n      payload: {\n        status: 200,\n        data: {\n          visible: visible,\n          action: action,\n          storeInfo: storeInfo,\n          icon: icon,\n        },\n      },\n    })\n  }\n\nexport const addBrandModal =\n  (visible, action, branch, icon) => async (dispatch) => {\n    dispatch({\n      type: ADD_BRAND_MODAL,\n      payload: {\n        status: 200,\n        data: {\n          visible: visible,\n          action: action,\n          brand: branch,\n          icon: icon,\n        },\n      },\n    })\n  }\n\nexport const addCategoryModal =\n  (visible, action, category, icon) => async (dispatch) => {\n    dispatch({\n      type: ADD_CATEGORY_MODAL,\n      payload: {\n        status: 200,\n        data: {\n          visible: visible,\n          action: action,\n          category: category,\n          icon: icon,\n        },\n      },\n    })\n  }\n\nexport const addAccountModal =\n  (visible, action, employee, icon) => async (dispatch) => {\n    dispatch({\n      type: ADD_EMPLOYEE_MODAL,\n      payload: {\n        status: 200,\n        data: {\n          visible: visible,\n          action: action,\n          employee: employee,\n          icon: icon,\n        },\n      },\n    })\n  }\nexport const changePasswordModal =\n  (visible, action, employee, icon) => async (dispatch) => {\n    dispatch({\n      type: CHANGE_PASSWORD_MODAL,\n      payload: {\n        status: 200,\n        data: {\n          visible: visible,\n          action: action,\n          employee: employee,\n          icon: icon,\n        },\n      },\n    })\n  }\nexport const setLoginModal = (visible, action) => async (dispatch) => {\n  dispatch({\n    type: LOGIN_MODAL,\n    payload: {\n      data: {\n        visible: visible,\n        action: action,\n      },\n    },\n  })\n}\n\nexport const setAddressModal =\n  (visible, action, address, icon) => async (dispatch) => {\n    dispatch({\n      type: SET_ADDRESS_MODAL,\n      payload: {\n        data: {\n          visible: visible,\n          action: action,\n          address: address,\n          icon: icon,\n        },\n      },\n    })\n  }\n\nexport const setSupplierModal =\n  (visible, action, supplier, icon) => async (dispatch) => {\n    dispatch({\n      type: SET_SUPPLIER_MODAL,\n      payload: {\n        action: action,\n        data: {\n          visible: visible,\n          icon: icon,\n          supplier: supplier,\n        },\n      },\n    })\n  }\nexport const setSupplyModal =\n  (visible, action, supply, icon) => async (dispatch) => {\n    dispatch({\n      type: SET_SUPPLY_MODAL,\n      payload: {\n        action: action,\n        data: {\n          visible: visible,\n          icon: icon,\n          supply: supply,\n        },\n      },\n    })\n  }\n\nexport const setScanModal = (visible, action) => async (dispatch) => {\n  dispatch({\n    type: SET_SCAN_MODAL,\n    payload: {\n      action: action,\n      data: {\n        visible: visible,\n      },\n    },\n  })\n}\nexport const setPromoModal =\n  (visible, action, promo, icon) => async (dispatch) => {\n    dispatch({\n      type: SET_PROMO_MODAL,\n      payload: {\n        action: action,\n        data: {\n          visible: visible,\n          icon: icon,\n          promo: promo,\n        },\n      },\n    })\n  }\nexport const setTermAndConditionModal =\n  (visible, action, termsAndCondition, icon) => async (dispatch) => {\n    dispatch({\n      type: SET_TERMS_AND_CONDITION_MODAL,\n      payload: {\n        status: 200,\n        data: {\n          visible: visible,\n          action: action,\n          termsAndCondition: termsAndCondition,\n          icon: icon,\n        },\n      },\n    })\n  }\n  export const setCarouselModal =\n    (visible, action, carousel, icon) => async (dispatch) => {\n      dispatch({\n        type: SET_CAROULSE_MDOAL,\n        payload: {\n          status: 200,\n          data: {\n            visible: visible,\n            action: action,\n            carousel: carousel,\n            icon: icon,\n          },\n        },\n      })\n    }","// import RestApi from '../RestApi'\nimport { SET_MESSAGE } from \"src/constants/userConstants\"\nimport ProductApiService from \"src/service/restAPI/ProductApiService\"\nimport {\n  DELETE_PRODUCT,\n  FAIL_GET_IMAGE,\n  GET_DISCOVER_PRODUCT,\n  GET_IMAGE,\n  GET_PRODUCT,\n  GET_PRODUCTS,\n  GET_PRODUCTS_BY_STATUS,\n  GET_PRODUCTS_WITH_PROMO,\n  GET_PRODUCT_BY_CATEGORY_NAME,\n  GET_PRODUCT_DETAILS,\n  SAVE_FAIL,\n  // UPDATE_PRODUCT,\n  // DELETE_PRODUCT\n  SAVE_PRODUCT,\n  SEARCH_PRODUCT,\n  SET_PRODUCT_MESSAGE,\n  UPDATE_PRODUCT,\n  GET_POPULAR_PRODUCT\n} from \"../../redux/constants\"\n\nexport const saveProduct = (formData) => async (dispatch) => {\n  return ProductApiService.saveProduct(formData).then(\n    (response) => {\n      dispatch({\n        type: SAVE_PRODUCT,\n      })\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: 200,\n          data: {\n            message: \"Successfully Saved\",\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      console.log(error)\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.error_message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.toString()\n      console.log(status)\n      dispatch({\n        type: SAVE_FAIL,\n      })\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: message,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\n\nexport const getProducts = (query, page, limit) => async (dispatch) => {\n  return ProductApiService.getProducts(query, page, limit).then(\n    (response) => {\n      dispatch({\n        type: GET_PRODUCTS,\n        payload: {\n          status: 200,\n          data: {\n            products: response.data,\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.error_message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.status ||\n        error.toString()\n\n      dispatch({\n        type: SET_PRODUCT_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: message,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\n\nexport const getDiscoverProducts = (query, page, limit) => async (dispatch) => {\n  return ProductApiService.getDiscoverProducts(query, page, limit).then(\n    (response) => {\n      dispatch({\n        type: GET_DISCOVER_PRODUCT,\n        payload: {\n          status: 200,\n          data: {\n            products: response.data,\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.error_message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.status ||\n        error.toString()\n\n      dispatch({\n        type: SET_PRODUCT_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: message,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\n\nexport const getPopularProducts = (query, page, limit) => async (dispatch) => {\n  return ProductApiService.getPopularProducts(query, page, limit).then(\n    (response) => {\n      dispatch({\n        type: GET_POPULAR_PRODUCT,\n        payload: {\n          status: 200,\n          data: {\n            products: response.data,\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.error_message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.status ||\n        error.toString()\n\n      dispatch({\n        type: SET_PRODUCT_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: message,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\n\nexport const getImage = (image, token) => async (dispatch) => {\n  return ProductApiService.getImage(image, token).then(\n    (response) => {\n      console.log(response)\n      dispatch({\n        type: GET_IMAGE,\n        payload: {\n          status: response.status,\n          data: {\n            image: response.data,\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.error_message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.status ||\n        error.toString()\n      dispatch({\n        type: FAIL_GET_IMAGE,\n      })\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: message,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\nexport const getProduct = (id) => async (dispatch) => {\n  return ProductApiService.getProduct(id).then(\n    (response) => {\n      dispatch({\n        type: GET_PRODUCT,\n        payload: {\n          status: 200,\n          data: {\n            product: response.data,\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.error_message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.status ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: message,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\nexport const getProductDetails = (id) => async (dispatch) => {\n  return ProductApiService.getProductDetails(id).then(\n    (response) => {\n      dispatch({\n        type: GET_PRODUCT_DETAILS,\n        payload: {\n          status: 200,\n          data: {\n            product: response.data,\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.error_message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.status ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: message,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\nexport const deleteProduct = (id) => async (dispatch) => {\n  return ProductApiService.deleteProduct(id).then(\n    (response) => {\n      dispatch({\n        type: DELETE_PRODUCT,\n        payload: {\n          status: 200,\n          action: DELETE_PRODUCT,\n          data: {},\n        },\n      })\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: 200,\n          data: {\n            message: \"Successfully Deleted\",\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.error_message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.status ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: message,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\n\nexport const updateProduct = (productId, formData) => async (dispatch) => {\n  return ProductApiService.updateProduct(productId, formData).then(\n    (response) => {\n      dispatch({\n        type: UPDATE_PRODUCT,\n        payload: {\n          status: 200,\n          action: UPDATE_PRODUCT,\n          data: {\n            updatedProduct: response.data,\n          },\n        },\n      })\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: 200,\n          data: {\n            message: \"Successfully Updated\",\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.error_message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.status ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: message,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\nexport const searchProductByBarcodeOrName =\n  (query, page, limit) => async (dispatch) => {\n    return ProductApiService.searchProductByBarcodeOrName(\n      query,\n      page,\n      limit,\n    ).then(\n      (response) => {\n        dispatch({\n          type: SEARCH_PRODUCT,\n          payload: {\n            status: 200,\n            action: SEARCH_PRODUCT,\n            data: {\n              products: response.data,\n            },\n          },\n        })\n        return Promise.resolve()\n      },\n      (error) => {\n        const message =\n          (error.response &&\n            error.response.data &&\n            error.response.data.message) ||\n          error.message ||\n          error.error_message ||\n          error.toString()\n\n        const status =\n          (error.response && error.response.data && error.response.data.code) ||\n          error.status ||\n          error.toString()\n\n        dispatch({\n          type: SET_MESSAGE,\n          payload: {\n            status: status,\n            data: {\n              message: message,\n            },\n          },\n        })\n        return Promise.reject()\n      },\n    )\n  }\n\nexport const getProductsByCategoryName =\n  (categoryName, query, page, limit) => async (dispatch) => {\n    return ProductApiService.getProductsByCategoryName(\n      categoryName,\n      query,\n      page,\n      limit,\n    ).then(\n      (response) => {\n        dispatch({\n          type: GET_PRODUCT_BY_CATEGORY_NAME,\n          payload: {\n            status: 200,\n            action: GET_PRODUCT_BY_CATEGORY_NAME,\n            data: {\n              products: response.data,\n            },\n          },\n        })\n        return Promise.resolve()\n      },\n      (error) => {\n        const message =\n          (error.response &&\n            error.response.data &&\n            error.response.data.message) ||\n          error.message ||\n          error.error_message ||\n          error.toString()\n\n        const status =\n          (error.response && error.response.data && error.response.data.code) ||\n          error.status ||\n          error.toString()\n\n        dispatch({\n          type: SET_MESSAGE,\n          payload: {\n            status: status,\n            data: {\n              message: message,\n            },\n          },\n        })\n        return Promise.reject()\n      },\n    )\n  }\nexport const getProductsByStatus =\n  (query, status, page, limit) => async (dispatch) => {\n    return ProductApiService.getProductsByStatus(\n      query,\n      status,\n      page,\n      limit,\n    ).then(\n      (response) => {\n        dispatch({\n          type: GET_PRODUCTS_BY_STATUS,\n          payload: {\n            status: 200,\n            action: GET_PRODUCTS_BY_STATUS,\n            data: {\n              products: response.data,\n            },\n          },\n        })\n      },\n      (error) => {\n        const message =\n          (error.response &&\n            error.response.data &&\n            error.response.data.message) ||\n          error.message ||\n          error.error_message ||\n          error.toString()\n\n        const status =\n          (error.response && error.response.data && error.response.data.code) ||\n          error.status ||\n          error.toString()\n\n        dispatch({\n          type: SET_MESSAGE,\n          payload: {\n            status: status,\n            data: {\n              message: message,\n            },\n          },\n        })\n        return Promise.reject()\n      },\n    )\n  }\n\nexport const getProductsWithPromo =\n  (status, query, page, limit) => async (dispatch) => {\n    return ProductApiService.getProductsWithPromo(\n      status,\n      query,\n      page,\n      limit,\n    ).then(\n      (response) => {\n        dispatch({\n          type: GET_PRODUCTS_WITH_PROMO,\n          payload: {\n            status: 200,\n            action: GET_PRODUCTS_WITH_PROMO,\n            data: {\n              products: response.data,\n            },\n          },\n        })\n        return Promise.resolve()\n      },\n      (error) => {\n        const message =\n          (error.response &&\n            error.response.data &&\n            error.response.data.message) ||\n          error.message ||\n          error.error_message ||\n          error.toString()\n\n        const status =\n          (error.response && error.response.data && error.response.data.code) ||\n          error.status ||\n          error.toString()\n\n        dispatch({\n          type: SET_MESSAGE,\n          payload: {\n            status: status,\n            data: {\n              message: message,\n            },\n          },\n        })\n        return Promise.reject()\n      },\n    )\n  }\n","import authHeader from \"../auth/authHeader\"\nimport axios from \"./RestApi\"\n\nexport class ProductApiService {\n  saveProduct(formData) {\n    return axios.post(\"/products/save\", formData, { headers: authHeader() })\n  }\n  updateProduct(productId, formData) {\n    return axios.put(\"/products/update/\" + productId, formData, {\n      headers: authHeader(),\n    })\n  }\n  deleteProduct(id) {\n    return axios.delete(\"/products/delete/\" + id, {\n      headers: authHeader(),\n    })\n  }\n  getProducts(query, page, limit) {\n    return axios.get(\"/products\", {\n      headers: authHeader(),\n      params: {\n        query: query,\n        page: page,\n        limit: limit,\n      },\n    })\n  }\n  getImage(path, image) {\n    console.log()\n    let getPath = path ? path : \"null/\"\n\n    return axios.get(\"/products/getImages/bytesArrays/\" + getPath + image, {\n      responseType: \"blob\",\n    })\n  }\n  getProduct(id) {\n    return axios.get(\"/products/\" + id, {\n      headers: authHeader(),\n    })\n  }\n  getProductDetails(id) {\n    return axios.get(\"/products/details/\" + id, {\n      headers: authHeader(),\n    })\n  }\n  getDiscoverProducts(query, page, limit) {\n    return axios.get(\"/products/discover\", {\n      headers: authHeader(),\n      params: {\n        query: query,\n        page: page,\n        limit: limit,\n      },\n    })\n  }\n  getPopularProducts(query, page, limit) {\n    return axios.get(\"/products/popular\", {\n      headers: authHeader(),\n      params: {\n        query: query,\n        page: page,\n        limit: limit,\n      },\n    })\n  }\n  searchProductByBarcodeOrName(query, page, limit) {\n    return axios.get(\"/products/search\", {\n      headers: authHeader(),\n      params: {\n        query: query,\n        page: page,\n        limit: limit,\n      },\n    })\n  }\n  getProductsByCategoryName(categoryName, query, page, limit) {\n    return axios.get(\"/products/category/\" + categoryName, {\n\n      headers: authHeader(),\n      params: {\n        query: query,\n        page: page,\n        limit: limit,\n      },\n    })\n  }\n  getProductsByStatus(query, status, page, limit) {\n    return axios.get(\"/products/status\", {\n      headers: authHeader(),\n      params: {\n        status: status,\n        query: query,\n        page: page,\n        limit: limit,\n      },\n    })\n  }\n  getProductsWithPromo(status, query, page, limit) {\n    return axios.get(\"/products/promo\", {\n      headers: authHeader(),\n      params: {\n        status: status,\n        query: query,\n        page: page,\n        limit: limit,\n      },\n    })\n  }\n}\n\nexport default new ProductApiService()\n\n// export default new ProductApiService();\n","import axios from './RestApi'\n\nexport class BranchApiService {\n    getBranches(token) {\n        return axios.get(\"/branches/options\", {\n            headers: { Authorization: token }\n        })\n    }\n    getBranchesWithTotaProduct(token) {\n        return axios.get(\"/branches\", {\n            headers: { Authorization: token }\n        })\n    }\n    saveBranch(branch, token) {\n        return axios.post(\"/branches/save\", {\n            branch\n        }, {\n            headers: { Authorization: token }\n        });\n    }\n    updateBranch(id, branch, token) {\n        console.log(id)\n        return axios.post(\"/branches/update/\" + id, {\n            branch\n        }, {\n            headers: { Authorization: token }\n        })\n    }\n    deleteBranch(id, token) {\n        return axios.delete(\"/branches/delete/\" + id, {\n            headers: { Authorization: token }\n        })\n    }\n}\nexport default new BranchApiService();","import React, { Component } from \"react\"\nimport {\n  CModal,\n  CModalHeader,\n  CModalBody,\n  CModalFooter,\n  CButton,\n  CModalTitle,\n  CSpinner,\n} from \"@coreui/react\"\nimport { connect } from \"react-redux\"\n//action\nimport { deleteBranch } from \"src/service/apiActions/branchAction/branchAction\"\nimport { setAlertModal } from \"src/service/apiActions/modalAction/modalAction\"\nimport { clearMessage } from \"src/service/apiActions/messageAction/messageAction\"\nimport { deleteBrand } from \"src/service/apiActions/brandAction/brandAction\"\nimport { deleteAccount } from \"src/service/apiActions/accountAction/accountAction\"\nimport { deleteSupplier } from \"src/service/apiActions/supplierAction/supplierAction\"\nimport { deleteCategory } from \"src/service/apiActions/categoryAction/categoryAction\"\nimport { deleteProduct } from \"src/service/apiActions/productAction/productAction\"\nimport { deletePromo } from \"src/service/apiActions/promoAction/promoAction\"\nimport { withRouter } from \"react-router\"\nimport { logout } from \"src/service/apiActions/userAction/userAction\"\nexport class AlertModal extends Component {\n  state = {\n    visible: false,\n    id: \"\",\n    action: \"\",\n    module: \"\",\n    loading: false,\n    success: false,\n    message: \"\",\n    status: \"\",\n  }\n  componentDidUpdate(prevProps, prevState) {\n    this.manageModalAlert(prevProps, prevState)\n  }\n  manageModalAlert = (prevProps, prevState) => {\n    if (prevProps.modalVisible !== this.props.modalVisible) {\n      let { alert, id, module, action } = this.props.modalVisible\n      switch (action) {\n        case \"DELETEBRANCH\":\n          this.setState({\n            visible: alert,\n            id: id,\n            module: module,\n            action: action,\n          })\n          break\n        case \"DELETEBRAND\":\n          this.setState({\n            visible: alert,\n            id: id,\n            module: module,\n            action: action,\n          })\n          break\n        case \"DELETEEMPLOYEE\":\n          this.setState({\n            visible: alert,\n            id: id,\n            module: module,\n            action: action,\n          })\n          break\n\n        case \"DELETECUSTOMER\":\n          this.setState({\n            visible: alert,\n            id: id,\n            module: module,\n            action: action,\n          })\n          break\n\n        case \"DELETESUPPLIER\":\n          this.setState({\n            visible: alert,\n            id: id,\n            module: module,\n            action: action,\n          })\n          break\n\n        case \"DELETECATEGORY\":\n          this.setState({\n            visible: alert,\n            id: id,\n            module: module,\n            action: action,\n          })\n          break\n\n        case \"DELETEPRODUCT\":\n          this.setState({\n            visible: alert,\n            id: id,\n            module: module,\n            action: action,\n          })\n          break\n\n        case \"DELETEPROMO\":\n          this.setState({\n            visible: alert,\n            id: id,\n            module: module,\n            action: action,\n          })\n          break\n\n        case \"DELETEME\":\n          this.setState({\n            visible: alert,\n            id: id,\n            module: module,\n            action: action,\n          })\n          break\n\n        default:\n          this.setState({\n            visible: alert,\n          })\n      }\n    }\n  }\n\n  handleOnDelete = () => {\n    let { id, action, module } = this.state\n    let { accessToken, type } = this.props.userResponse.credentials\n    let token = type + accessToken\n    this.setState({\n      loading: true,\n    })\n    if (action === \"DELETEBRANCH\" && module === \"BRANCH\") {\n      this.branchDelete(id, token)\n      console.log(\"BRANCH\")\n    } else if (action === \"DELETEBRAND\" && module === \"BRAND\") {\n      this.handleDeleteBrand(id, token)\n    } else if (action === \"DELETEEMPLOYEE\" && module === \"EMPLOYEE\") {\n      this.handleAccountDelete(id)\n    } else if (action === \"DELETECUSTOMER\" && module === \"CUSTOMER\") {\n      this.handleAccountDelete(id)\n    } else if (action === \"DELETESUPPLIER\" && module === \"SUPPLIER\") {\n      this.handleSupplierDelete(id)\n    } else if (action === \"DELETECATEGORY\" && module === \"CATEGORY\") {\n      this.handleDeleteCategory(id)\n    } else if (action === \"DELETEPRODUCT\" && module === \"PRODUCT\") {\n      this.handleDeleteProduct(id)\n    } else if (action === \"DELETEPROMO\" && module === \"PROMO\") {\n      this.handleDeletePromo(id)\n    } else if (action === \"DELETEME\" && module === \"ACCOUNT\") {\n      this.handleDeleteMe(id)\n    } else {\n      console.log(\"ERRPR\")\n    }\n  }\n  branchDelete = (id, token) => {\n    this.props\n      .deleteBranch(id, token)\n      .then(() => {\n        this.setState({\n          loading: false,\n        })\n        setInterval(function () {\n          window.location.reload()\n        }, 1000)\n      })\n      .catch(() => {\n        this.setState({\n          successFully: false,\n          loading: false,\n        })\n      })\n  }\n  handleDeleteBrand = (id, token) => {\n    this.props\n      .deleteBrand(id, token)\n      .then(() => {\n        let { data } = this.props.messageResponse\n        this.setState({\n          loading: false,\n        })\n        setInterval(function () {\n          window.location.reload()\n        }, 1000)\n      })\n      .catch(() => {\n        this.setState({\n          successFully: false,\n          loading: false,\n        })\n      })\n  }\n  handleAccountDelete = (id) => {\n    this.props\n      .deleteAccount(id)\n      .then(() => {\n        let { data } = this.props.messageResponse\n        this.setState({\n          loading: false,\n        })\n        setInterval(function () {\n          window.location.reload()\n        }, 1000)\n      })\n      .catch(() => {\n        this.setState({\n          successFully: false,\n          loading: false,\n        })\n      })\n  }\n  handleSupplierDelete = (id) => {\n    this.props\n      .deleteSupplier(id)\n      .then(() => {\n        this.setState({\n          loading: false,\n        })\n        setInterval(function () {\n          window.location.reload()\n        }, 1000)\n      })\n      .catch(() => {\n        this.setState({\n          successFully: false,\n          loading: false,\n        })\n      })\n  }\n  handleDeleteCategory = (id) => {\n    this.props\n      .deleteCategory(id)\n      .then(() => {\n        this.setState({\n          loading: false,\n        })\n        setInterval(function () {\n          window.location.reload()\n        }, 1000)\n      })\n      .catch(() => {\n        this.setState({\n          successFully: false,\n          loading: false,\n        })\n      })\n  }\n  handleDeleteProduct = (id) => {\n    this.props\n      .deleteProduct(id)\n      .then(() => {\n        this.setState({\n          loading: false,\n        })\n        setInterval(function () {\n          window.location.reload()\n        }, 1000)\n      })\n      .catch(() => {\n        this.setState({\n          successFully: false,\n          loading: false,\n        })\n      })\n  }\n  handleDeletePromo = (id) => {\n    this.props\n      .deletePromo(id)\n      .then(() => {\n        this.setState({\n          loading: false,\n        })\n        setInterval(function () {\n          window.location.reload()\n        }, 1000)\n      })\n      .catch(() => {\n        this.setState({\n          successFully: false,\n          loading: false,\n        })\n      })\n  }\n  handleDeleteMe = (id) => {\n    this.props\n      .deleteAccount(id)\n      .then(() => {\n        let { data } = this.props.messageResponse\n        this.setState({\n          loading: false,\n        })\n        setInterval(() => {\n          this.props.logout()\n        }, 1000)\n      })\n      .catch(() => {\n        this.setState({\n          successFully: false,\n          loading: false,\n        })\n      })\n  }\n\n  render() {\n    let { visible, loading } = this.state\n    return (\n      <div>\n\n\n        <CModal\n          visible={visible}\n          onDismiss={() => this.props.setAlertModal(false)}\n        >\n          <CModalHeader onDismiss={() => this.props.setAlertModal(false)}>\n            <CModalTitle>Confirmation</CModalTitle>\n          </CModalHeader>\n          <CModalBody className=\"text-center\">\n            <h6>Are you sure you want to delete?</h6>\n          </CModalBody>\n          <CModalFooter>\n            <CButton\n              color=\"dark\"\n              variant=\"ghost\"\n              onClick={() => {\n                this.props.setAlertModal(false, \"\", \"\", \"\")\n              }}\n            >\n              No\n            </CButton>\n            <CButton\n              type=\"submit\"\n              color=\"primary\"\n              disabled={loading}\n              onClick={() => this.handleOnDelete()}\n            >\n              {loading && <CSpinner size=\"sm\" className=\"ms-1\" />}\n              Yes\n            </CButton>\n          </CModalFooter>\n        </CModal>\n      </div>\n    )\n  }\n}\nconst mapStateToProps = (state) => {\n  return {\n    modalVisible: state.modalVisibleResponse,\n    messageResponse: state.messageResponse,\n    userResponse: state.userResponse,\n  }\n}\n\nexport default connect(mapStateToProps, {\n  setAlertModal,\n  deleteBranch,\n  clearMessage,\n  deleteBrand,\n  deleteAccount,\n  deleteSupplier,\n  deleteCategory,\n  deleteProduct,\n  deletePromo,\n  logout\n})(withRouter(AlertModal))\n","import { DELETE_BRANCH, GET_BRANCH, GET_BRANCH_TOTAL_PRODUCT, SAVE_BRANCH, SAVE_BRAND, UPDATE_BRANCH, } from \"src/service/redux/constants\";\nimport { SET_MESSAGE } from \"src/constants/userConstants\";\nimport BranchApiService from \"src/service/restAPI/BranchApiService\";\n\n\nexport const getBranches = (token) => async (dispatch) => {\n    return BranchApiService.getBranches(token).then(\n        (response) => {\n            dispatch({\n                type: GET_BRANCH,\n                payload: {\n                    status: 200,\n                    action: \"GETBRANCH\",\n                    data: {\n                        branches: response.data\n                    }\n                }\n            })\n            return Promise.resolve();\n        },\n        (error) => {\n            const errorMessage =\n                (error.response &&\n                    error.response.data &&\n                    error.response.data.message) ||\n                error.message ||\n                error.toString();\n\n            const status = (error.response &&\n                error.response.data &&\n                error.response.data.code) ||\n                error.toString();\n            console.log(status)\n\n            dispatch({\n                type: SET_MESSAGE,\n                payload: {\n                    status: status,\n                    data: {\n                        message: errorMessage\n                    }\n                }\n            })\n            return Promise.reject();\n        }\n    )\n\n}\n\nexport const getBranchesWithTotalProduct = (token) => async (dispatch) => {\n    return BranchApiService.getBranchesWithTotaProduct(token).then(\n        (response) => {\n            dispatch({\n                type: GET_BRANCH_TOTAL_PRODUCT,\n                payload: {\n                    status: 200,\n                    action: \"GETBRANCHPRODUCT\",\n                    data: {\n                        branches: response.data\n                    }\n                }\n            })\n            return Promise.resolve();\n        },\n        (error) => {\n            const errorMessage =\n                (error.response &&\n                    error.response.data &&\n                    error.response.data.message) ||\n                error.message ||\n                error.toString();\n\n            const status = (error.response &&\n                error.response.data &&\n                error.response.data.code) ||\n                error.toString();\n\n            dispatch({\n                type: SET_MESSAGE,\n                payload: {\n                    status: status,\n                    data: {\n                        message: errorMessage\n                    }\n                }\n            })\n            return Promise.reject();\n        }\n    )\n}\n\nexport const saveBranch = (branch, token) => async (dispatch) => {\n    return BranchApiService.saveBranch(branch, token)\n        .then(\n            (response) => {\n                console.log(response);\n                dispatch({\n                    type: SAVE_BRANCH,\n                    payload: {\n                        status: 200,\n                        action: SAVE_BRANCH\n                    }\n                })\n                dispatch({\n                    type: SET_MESSAGE,\n                    payload: {\n                        status: 200,\n                        data: {\n                            message: \"Successfully Saved\"\n                        }\n                    }\n                })\n                return Promise.resolve();\n            },\n\n            (error) => {\n                console.log(error)\n                const message = (error.response &&\n                    error.response.data &&\n                    error.response.data.message) ||\n                    error.message || error.error_message ||\n                    error.toString();\n\n                const status = (error.response &&\n                    error.response.data &&\n                    error.response.data.code) ||\n                    error.toString();\n                console.log(status)\n\n                dispatch({\n                    type: SET_MESSAGE,\n                    payload: {\n                        status: status,\n                        data: {\n                            message: message\n                        }\n                    }\n                })\n                return Promise.reject();\n            }\n        )\n}\nexport const updateBranch = (id, branch, token) => async (dispatch) => {\n    return BranchApiService.updateBranch(id, branch, token)\n        .then((response) => {\n            console.log(response)\n            dispatch({\n                type: UPDATE_BRANCH,\n                payload: {\n                    status: 200,\n                    action: \"UPDATEBRANCH\",\n\n                }\n            })\n            dispatch({\n                type: SET_MESSAGE,\n                payload: {\n                    status: 200,\n                    data: {\n                        message: \"Successfully Updated\"\n                    }\n                }\n            })\n            return Promise.resolve();\n\n        },\n            (error) => {\n                console.log(error)\n                const message = (error.response &&\n                    error.response.data &&\n                    error.response.data.message) ||\n                    error.message || error.error_message ||\n                    error.toString();\n\n                const status = (error.response &&\n                    error.response.data &&\n                    error.response.data.code) ||\n                    error.toString();\n                console.log(status)\n\n                dispatch({\n                    type: SET_MESSAGE,\n                    payload: {\n                        status: status,\n                        data: {\n                            message: message\n                        }\n                    }\n                })\n                return Promise.reject();\n            }\n        )\n}\n\nexport const deleteBranch = (id, token) => async (dispatch) => {\n    return BranchApiService.deleteBranch(id, token)\n        .then((response) => {\n            console.log(response)\n            dispatch({\n                type: DELETE_BRANCH,\n                payload: {\n                    status: 200,\n                    action: \"DELETEBRANCH\",\n\n                }\n            })\n            dispatch({\n                type: SET_MESSAGE,\n                payload: {\n                    status: 200,\n                    data: {\n                        message: \"Successfully DELETED\"\n                    }\n                }\n            })\n            return Promise.resolve();\n\n        },\n            (error) => {\n                console.log(error)\n                const message = (error.response &&\n                    error.response.data &&\n                    error.response.data.message) ||\n                    error.message || error.error_message ||\n                    error.toString();\n\n                const status = (error.response &&\n                    error.response.data &&\n                    error.response.data.code) ||\n                    error.toString();\n                console.log(status)\n\n                dispatch({\n                    type: SET_MESSAGE,\n                    payload: {\n                        status: status,\n                        data: {\n                            message: message\n                        }\n                    }\n                })\n                return Promise.reject();\n            }\n        )\n}","import authHeader from \"../auth/authHeader\"\nimport axios from \"./RestApi\"\n\nexport class CategoriesApiService {\n  saveCategory(categoryName) {\n    let name = categoryName\n    return axios.post(\n      \"/categories/save\",\n      {\n        name,\n      },\n      {\n        headers: authHeader(),\n      },\n    )\n  }\n  updateCategory(id, name) {\n    return axios.put(\n      \"/categories/update/\" + id,\n      {\n        name,\n      },\n      {\n        headers: authHeader(),\n      },\n    )\n  }\n\n  deleteCategory(id) {\n    return axios.delete(\"/categories/delete/\" + id, {\n      headers: authHeader(),\n    })\n  }\n  getCategories(query, page, limit) {\n    return axios.get(\"/categories\", {\n      headers: authHeader(),\n      params: {\n        query,\n        page,\n        limit,\n      },\n    })\n  }\n  getCategory(id) {\n    return axios.get(\"/categories/id\", {\n      headers: authHeader(),\n    })\n  }\n  getCategoriesList() {\n    return axios.get(\"/categories/list\")\n  }\n}\nexport default new CategoriesApiService()\n","import { SET_MESSAGE } from \"src/constants/userConstants\"\nimport {\n  DELETE_CATEGORY,\n  GET_CATEGORIES,\n  GET_CATEGORIES_LIST,\n  GET_CATEGORY,\n  SAVE_CATEGORY,\n  UPDATE_CATEGORY,\n} from \"src/service/redux/constants\"\nimport CategoriesApiService from \"src/service/restAPI/CategoriesApiService\"\n\nexport const saveCategory = (categoryName) => async (dispatch) => {\n  return CategoriesApiService.saveCategory(categoryName).then(\n    (response) => {\n      dispatch({\n        type: SAVE_CATEGORY,\n        payload: {\n          status: 200,\n          action: SAVE_CATEGORY,\n          data: {},\n        },\n      })\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: 200,\n          data: {\n            message: \"Successfully Saved\",\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.error_message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: message,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\nexport const getCategories = (query, page, limit) => async (dispatch) => {\n  return CategoriesApiService.getCategories(query, page, limit).then(\n    (response) => {\n      dispatch({\n        type: GET_CATEGORIES,\n        payload: {\n          status: 200,\n          action: GET_CATEGORIES,\n          data: {\n            categories: response.data,\n          },\n        },\n      })\n\n      return Promise.resolve()\n    },\n\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.error_message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: message,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\nexport const getCategoriesList = () => async (dispatch) => {\n  return CategoriesApiService.getCategoriesList().then(\n    (response) => {\n      dispatch({\n        type: GET_CATEGORIES_LIST,\n        payload: {\n          status: 200,\n          action: GET_CATEGORIES_LIST,\n          data: {\n            categoriesList: response.data,\n          },\n        },\n      })\n\n      return Promise.resolve()\n    },\n\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.error_message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: message,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\nexport const getCategory = (id) => async (dispatch) => {\n  return CategoriesApiService.getCategory(id).then(\n    (response) => {\n      dispatch({\n        type: GET_CATEGORY,\n        payload: {\n          status: 200,\n          action: GET_CATEGORY,\n          data: {\n            category: response.data,\n          },\n        },\n      })\n\n      return Promise.resolve()\n    },\n\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.error_message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: message,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\nexport const updateCategory = (id, name) => async (dispatch) => {\n  return CategoriesApiService.updateCategory(id, name).then(\n    (response) => {\n      dispatch({\n        type: UPDATE_CATEGORY,\n        payload: {\n          status: 200,\n          action: UPDATE_CATEGORY,\n          data: {\n            updatedCategory: response.data,\n          },\n        },\n      })\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: 200,\n          data: {\n            message: \"Successfully Updated\",\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.error_message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: message,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\n\nexport const deleteCategory = (id) => async (dispatch) => {\n  return CategoriesApiService.deleteCategory(id).then(\n    (response) => {\n      dispatch({\n        type: DELETE_CATEGORY,\n        payload: {\n          status: 200,\n          action: DELETE_CATEGORY,\n          data: {},\n        },\n      })\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: 200,\n          data: {\n            message: \"Successfully Deleted.\",\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.error_message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: message,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\n","import authHeader from \"../auth/authHeader\"\nimport axios from \"./RestApi\"\n\nexport class SupplierApiService {\n  createSupplier(name) {\n    return axios.post(\n      \"/suppliers/create\",\n      {\n        name,\n      },\n      {\n        headers: authHeader(),\n      },\n    )\n  }\n  updateSupplier(id, name) {\n    console.log(name)\n    return axios.put(\n      \"/suppliers/update/\" + id,\n      {\n        name,\n      },\n      {\n        headers: authHeader(),\n      },\n    )\n  }\n  deleteSupplier(id) {\n    return axios.delete(\"/suppliers/delete/\" + id, {\n      headers: authHeader(),\n    })\n  }\n  getSuppliers(query, page, limit) {\n    return axios.get(\"/suppliers\", {\n      headers: authHeader(),\n      params: {\n        query: query,\n        page: page,\n        limit: limit,\n      },\n    })\n  }\n  getSupplier(id) {\n    return axios.get(\"/suppliers/\" + id, {\n      headers: authHeader(),\n    })\n  }\n}\nexport default new SupplierApiService()\n","import { SET_MESSAGE } from \"src/constants/userConstants\"\nimport {\n  CREATE_SUPPLIER,\n  DELETE_SUPPLIER,\n  GET_SUPPLIER,\n  GET_SUPPLIERS,\n  UPDATE_SUPPLIER,\n} from \"src/service/redux/constants\"\nimport SupplierApiService from \"src/service/restAPI/SupplierApiService\"\n\nexport const createSupplier = (name) => async (dispatch) => {\n  return SupplierApiService.createSupplier(name).then(\n    (response) => {\n      dispatch({\n        type: CREATE_SUPPLIER,\n        payload: {\n          status: 200,\n          action: CREATE_SUPPLIER,\n          data: {},\n        },\n      })\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: 200,\n          data: {\n            message: \"Successfully Created.\",\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      const errorMessage =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: errorMessage,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\nexport const updateSupplier = (id, name) => async (dispatch) => {\n  return SupplierApiService.updateSupplier(id, name).then(\n    (response) => {\n      dispatch({\n        type: UPDATE_SUPPLIER,\n        payload: {\n          status: 200,\n          action: UPDATE_SUPPLIER,\n          data: {\n            supplier: response.data,\n          },\n        },\n      })\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: 200,\n          data: {\n            message: \"Successfully Updated.\",\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      const errorMessage =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: errorMessage,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\n// export const deleteSupplier = (id) => async (dispatch) => {\n//   return SupplierApiService.deleteSupplier(id).then(\n//     (response) => {\n//       dispatch({\n//         type: DELETE_SUPPLIER,\n//         payload: {\n//           status: 200,\n//           action: GET_SUPPLIERS,\n//           data: {},\n//         },\n//       })\n//       dispatch({\n//         type: SET_MESSAGE,\n//         payload: {\n//           status: 200,\n//           data: {\n//             message: \"Successfully Deleted.\",\n//           },\n//         },\n//       })\n//       return Promise.resolve()\n//     },\n//     (error) => {\n//       const errorMessage =\n//         (error.response &&\n//           error.response.data &&\n//           error.response.data.message) ||\n//         error.message ||\n//         error.toString()\n\n//       const status =\n//         (error.response && error.response.data && error.response.data.code) ||\n//         error.toString()\n\n//       dispatch({\n//         type: SET_MESSAGE,\n//         payload: {\n//           status: status,\n//           data: {\n//             message: errorMessage,\n//           },\n//         },\n//       })\n//       return Promise.reject()\n//     },\n//   )\n// }\nexport const deleteSupplier = (id) => async (dispatch) => {\n  return SupplierApiService.deleteSupplier(id).then(\n    (response) => {\n      console.log(response)\n      dispatch({\n        type: DELETE_SUPPLIER,\n        payload: {\n          status: 200,\n          action: \"DELETESUPPLIER\",\n        },\n      })\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: 200,\n          data: {\n            message: \"Successfully DELETED\",\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.error_message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: message,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\nexport const getSuppliers = (query, page, limit) => async (dispatch) => {\n  return SupplierApiService.getSuppliers(query, page, limit).then(\n    (response) => {\n      dispatch({\n        type: GET_SUPPLIERS,\n        payload: {\n          status: 200,\n          action: GET_SUPPLIERS,\n          data: {\n            suppliers: response.data,\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      const errorMessage =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: errorMessage,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\n\nexport const getSupplier = (id) => async (dispatch) => {\n  return SupplierApiService.getSupplier(id).then(\n    (response) => {\n      dispatch({\n        type: GET_SUPPLIER,\n        payload: {\n          status: 200,\n          action: GET_SUPPLIER,\n          data: {\n            supplier: response.data,\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      const errorMessage =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: errorMessage,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\n","import axios from \"./RestApi\"\nimport authHeader from \"../auth/authHeader\"\nexport class BrandApiService {\n  getBrands(query, page, limit) {\n    return axios.get(\"/brands\", {\n      headers: authHeader(),\n      params: {\n        query: query,\n        page: page,\n        limit: limit,\n      },\n    })\n  }\n  getBrand(id, token) {\n    return axios.get(\"/brands\" + id, {\n      headers: { Authorization: token },\n    })\n  }\n  saveBrand(brand, token) {\n    return axios.post(\n      \"/brands/save\",\n      {\n        brand,\n      },\n      {\n        headers: { Authorization: token },\n      },\n    )\n  }\n  updateBrand(id, brand, token) {\n    return axios.put(\n      \"/brands/update/\" + id,\n      {\n        brand,\n      },\n      {\n        headers: { Authorization: token },\n      },\n    )\n  }\n  deleteBrand(id, token) {\n    return axios.delete(\"/brands/delete/\" + id, {\n      headers: { Authorization: token },\n    })\n  }\n}\nexport default new BrandApiService()\n","import { SET_MESSAGE } from \"src/constants/userConstants\"\nimport {\n  DELETE_BRAND,\n  FAIL_BRAND,\n  GET_BRANDS,\n  SAVE_BRAND,\n  UPDATE_BRAND,\n} from \"src/service/redux/constants\"\nimport BrandApiService from \"src/service/restAPI/BrandApiService\"\n\nexport const getBrands = (query, page, limit) => async (dispatch) => {\n  return BrandApiService.getBrands(query, page, limit).then(\n    (response) => {\n      dispatch({\n        type: GET_BRANDS,\n        payload: {\n          status: 200,\n          action: \"GETBRANDS\",\n          data: {\n            brands: response.data,\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      const errorMessage =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: errorMessage,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\n\nexport const savingBrand = (brand, token) => async (dispatch) => {\n  return BrandApiService.saveBrand(brand, token).then(\n    (response) => {\n      dispatch({\n        type: SAVE_BRAND,\n        payload: {\n          status: 200,\n          action: SAVE_BRAND,\n        },\n      })\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: 200,\n          data: {\n            message: \"Successfully Saved\",\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n\n    (error) => {\n      console.log(error)\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.error_message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.toString()\n      console.log(status)\n      dispatch({\n        type: FAIL_BRAND,\n      })\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: message,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\n\nexport const updateBrand = (id, branch, token) => async (dispatch) => {\n  return BrandApiService.updateBrand(id, branch, token).then(\n    (response) => {\n      dispatch({\n        type: UPDATE_BRAND,\n        payload: {\n          status: 200,\n          action: \"UPDATEBRAND\",\n        },\n      })\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: 200,\n          data: {\n            message: \"Successfully Updated\",\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.error_message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: message,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\n\nexport const deleteBrand = (id, token) => async (dispatch) => {\n  return BrandApiService.deleteBrand(id, token).then(\n    (response) => {\n      dispatch({\n        type: DELETE_BRAND,\n        payload: {\n          status: 200,\n          action: \"DELETEBRAND\",\n        },\n      })\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: 200,\n          data: {\n            message: \"Successfully DELETED\",\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.error_message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: message,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\n","import authHeader from \"../auth/authHeader\"\nimport axios from \"./RestApi\"\n\nexport class PromoApiService {\n  getPromos() {\n    return axios.get(\"/promos\", {\n      headers: authHeader(),\n    })\n  }\n  savePromo(quantity, percentage, productId, startDate, endDate) {\n    return axios.post(\n      \"/promos/save\",\n      {\n        productId,\n        quantity,\n        percentage,\n        startDate,\n        endDate,\n      },\n      {\n        headers: authHeader(),\n      },\n    )\n  }\n  updatePromo(id, quantity, percentage, productId, startDate, endDate) {\n    return axios.put(\n      \"/promos/update/\" + id,\n      {\n        productId,\n        quantity,\n        percentage,\n        startDate,\n        endDate,\n      },\n      {\n        headers: authHeader(),\n      },\n    )\n  }\n  deletePromo(id) {\n    return axios.delete(\"/promos/delete/\" + id, {\n      headers: authHeader(),\n    })\n  }\n}\nexport default new PromoApiService()\n","import { SET_MESSAGE } from \"src/constants/userConstants\"\nimport {\n  DELETE_PROMO,\n  GET_PROMOS,\n  SAVE_PROMO,\n  UPDATE_PROMO,\n} from \"src/service/redux/constants\"\nimport PromoApiService from \"src/service/restAPI/PromoApiService\"\n\nexport const getPromos = () => async (dispatch) => {\n  return PromoApiService.getPromos().then(\n    (response) => {\n      dispatch({\n        type: GET_PROMOS,\n        payload: {\n          status: 200,\n          action: GET_PROMOS,\n          data: {\n            productsWithPromo: response.data,\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.error_message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.status ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: message,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\nexport const savePromo =\n  (quantity, percentage, productId, startDate, endDate) => async (dispatch) => {\n    return PromoApiService.savePromo(\n      quantity,\n      percentage,\n      productId,\n      startDate,\n      endDate,\n    ).then(\n      (response) => {\n        dispatch({\n          type: SAVE_PROMO,\n          payload: {\n            status: 200,\n            action: SAVE_PROMO,\n            data: {},\n          },\n        })\n        dispatch({\n          type: SET_MESSAGE,\n          payload: {\n            status: 200,\n            data: {\n              message: \"Successfully Saved\",\n            },\n          },\n        })\n        return Promise.resolve()\n      },\n      (error) => {\n        const message =\n          (error.response &&\n            error.response.data &&\n            error.response.data.message) ||\n          error.message ||\n          error.error_message ||\n          error.toString()\n\n        const status =\n          (error.response && error.response.data && error.response.data.code) ||\n          error.status ||\n          error.toString()\n\n        dispatch({\n          type: SET_MESSAGE,\n          payload: {\n            status: status,\n            data: {\n              message: message,\n            },\n          },\n        })\n        return Promise.reject()\n      },\n    )\n  }\nexport const deletePromo = (id) => async (dispatch) => {\n  return PromoApiService.deletePromo(id).then(\n    (response) => {\n      dispatch({\n        type: DELETE_PROMO,\n        payload: {\n          action: DELETE_PROMO,\n          status: 200,\n          data: {},\n        },\n      })\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: 200,\n          data: {\n            message: \"Successfully DELETED\",\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.error_message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.status ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: message,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\nexport const updatePromo =\n  (id, quantity, percentage, productId, startDate, endDate) =>\n  async (dispatch) => {\n    return PromoApiService.updatePromo(\n      id,\n      quantity,\n      percentage,\n      productId,\n      startDate,\n      endDate,\n    ).then(\n      (response) => {\n          dispatch({\n            type: UPDATE_PROMO,\n            payload: {\n              action: UPDATE_PROMO,\n              status: 200,\n              data: {\n                updatedPromo: response.data\n              },\n            },\n          })\n          dispatch({\n            type: SET_MESSAGE,\n            payload: {\n              status: 200,\n              data: {\n                message: \"Successfully Updated\",\n              },\n            },\n          })\n        return Promise.resolve()\n      },\n      (error) => {\n         const message =\n           (error.response &&\n             error.response.data &&\n             error.response.data.message) ||\n           error.message ||\n           error.error_message ||\n           error.toString()\n\n         const status =\n           (error.response &&\n             error.response.data &&\n             error.response.data.code) ||\n           error.status ||\n           error.toString()\n\n         dispatch({\n           type: SET_MESSAGE,\n           payload: {\n             status: status,\n             data: {\n               message: message,\n             },\n           },\n         })\n        return Promise.reject()\n      },\n    )\n  }\n"],"sourceRoot":""}