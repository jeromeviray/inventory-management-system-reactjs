{"version":3,"sources":["service/apiActions/modalAction/modalAction.js","service/restAPI/TermsAndCondiitonApiService.js","service/apiActions/termsAction/TermsAndConditionAction.js","views/private/termsAndCondition/TermsAndConditionController.js","components/modals/termsAndCondition/TermsAndCondtionModal.js"],"names":["setProductModal","visible","action","icon","async","dispatch","type","SET_PRODUCTEDITMODAL_VISIBILIT","payload","status","data","setProductDetailsModal","product","SET_PRODUCT_DETAILS_MODAL","editProductModal","updateProduct","EDIT_PRODUCT_MODAL","setAlertModal","alert","module","id","ALERT_MODAL","setAlertBanModal","ALERT_BAN_MODAL","setStoreModal","storeInfo","UDPATE_STORE_INFORMATION","addBrandModal","branch","ADD_BRAND_MODAL","brand","addCategoryModal","category","ADD_CATEGORY_MODAL","addAccountModal","employee","ADD_EMPLOYEE_MODAL","changePasswordModal","CHANGE_PASSWORD_MODAL","setLoginModal","LOGIN_MODAL","setAddressModal","address","SET_ADDRESS_MODAL","setSupplierModal","supplier","SET_SUPPLIER_MODAL","setSupplyModal","supply","SET_SUPPLY_MODAL","setScanModal","SET_SCAN_MODAL","setPromoModal","promo","SET_PROMO_MODAL","setTermAndConditionModal","termsAndCondition","SET_TERMS_AND_CONDITION_MODAL","setCarouselModal","carousel","SET_CAROULSE_MDOAL","setTrackingInfoModal","order","SET_TRACKING_INFO_MODAL","saveTermsAndCondition","content","axios","post","headers","authHeader","updateTermsAndCondition","put","getTermsAndCondition","get","TermsAndCondionApiService","then","response","SAVE_TERMS_AND_CONDITION","SET_MESSAGE","message","Promise","resolve","error","errorMessage","toString","code","reject","UPDATE_TERMS_AND_CONDITION","GET_TERMS_AND_CONDITION","TermsAndConditionController","Component","state","manageTermsAndConditionResponse","prevProps","prevState","termsAndConditionResponse","this","props","setState","manageStoreInfo","modalVisible","createMarkup","html","__html","DOMPurify","sanitize","componentDidMount","componentDidUpdate","render","convertFromRawContent","getContent","JSON","parse","convertFromRaw","editorState","EditorState","createWithContent","draftToHtml","convertToRaw","getCurrentContent","margin","marginBottom","marginLeft","className","color","variant","size","onClick","style","createdAt","updatedAt","dangerouslySetInnerHTML","connect","modalVisibleResponse","messageResponse","TermsAndCondtionModal","loading","successFully","createEmpty","validated","onEditorStateChange","branchId","branchName","handleOnSubmit","event","preventDefault","currentTarget","checkValidity","stopPropagation","handleSave","handleEdit","stringify","catch","scrollable","onDismiss","clearMessage","role","onSubmit","noValidate","sm","md","lg","wrapperClassName","editorClassName","placeholder","toolbar","options","disabled","form"],"mappings":"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","file":"static/js/43.7e262a32.chunk.js","sourcesContent":["import {\n  ADD_BRANCH_MODAL,\n  ALERT_MODAL,\n  EDIT_PRODUCT_MODAL,\n  SET_PRODUCTEDITMODAL_VISIBILIT,\n  ADD_BRAND_MODAL,\n  ADD_CATEGORY_MODAL,\n  ADD_EMPLOYEE_MODAL,\n  SET_PRODUCT_DETAILS_MODAL,\n  LOGIN_MODAL,\n  SET_ADDRESS_MODAL,\n  SET_SUPPLIER_MODAL,\n  SET_SUPPLY_MODAL,\n  SET_SCAN_MODAL,\n  SET_PROMO_MODAL,\n  ALERT_BAN_MODAL,\n  CHANGE_PASSWORD_MODAL,\n  UDPATE_STORE_INFORMATION,\n  SET_TERMS_AND_CONDITION_MODAL,\n  SET_CAROULSE_MDOAL,\n  SET_TRACKING_INFO_MODAL,\n} from \"src/service/redux/constants\"\n\nexport const setProductModal = (visible, action, icon) => async (dispatch) => {\n  dispatch({\n    type: SET_PRODUCTEDITMODAL_VISIBILIT,\n    payload: {\n      status: 200,\n      data: {\n        visible: visible,\n        action: action,\n        icon: icon,\n      },\n    },\n  })\n}\nexport const setProductDetailsModal =\n  (visible, action, product) => async (dispatch) => {\n    dispatch({\n      type: SET_PRODUCT_DETAILS_MODAL,\n      payload: {\n        status: 200,\n        data: {\n          visible: visible,\n          action: action,\n          product: product,\n        },\n      },\n    })\n  }\nexport const editProductModal =\n  (visible, action, updateProduct, icon) => async (dispatch) => {\n    dispatch({\n      type: EDIT_PRODUCT_MODAL,\n      payload: {\n        status: 200,\n        data: {\n          visible: visible,\n          action: action,\n          product: updateProduct,\n          icon: icon,\n        },\n      },\n    })\n  }\nexport const setAlertModal =\n  (alert, action, module, id) => async (dispatch) => {\n    dispatch({\n      type: ALERT_MODAL,\n      payload: {\n        action: action,\n        module: module,\n        alert: alert,\n        data: {\n          id: id,\n        },\n      },\n    })\n  }\nexport const setAlertBanModal =\n  (alert, action, module, id) => async (dispatch) => {\n    dispatch({\n      type: ALERT_BAN_MODAL,\n      payload: {\n        action: action,\n        module: module,\n        alert: alert,\n        data: {\n          id: id,\n        },\n      },\n    })\n  }\nexport const setStoreModal =\n  (visible, action, storeInfo, icon) => async (dispatch) => {\n    dispatch({\n      type: UDPATE_STORE_INFORMATION,\n      payload: {\n        status: 200,\n        data: {\n          visible: visible,\n          action: action,\n          storeInfo: storeInfo,\n          icon: icon,\n        },\n      },\n    })\n  }\n\nexport const addBrandModal =\n  (visible, action, branch, icon) => async (dispatch) => {\n    dispatch({\n      type: ADD_BRAND_MODAL,\n      payload: {\n        status: 200,\n        data: {\n          visible: visible,\n          action: action,\n          brand: branch,\n          icon: icon,\n        },\n      },\n    })\n  }\n\nexport const addCategoryModal =\n  (visible, action, category, icon) => async (dispatch) => {\n    dispatch({\n      type: ADD_CATEGORY_MODAL,\n      payload: {\n        status: 200,\n        data: {\n          visible: visible,\n          action: action,\n          category: category,\n          icon: icon,\n        },\n      },\n    })\n  }\n\nexport const addAccountModal =\n  (visible, action, employee, icon) => async (dispatch) => {\n    dispatch({\n      type: ADD_EMPLOYEE_MODAL,\n      payload: {\n        status: 200,\n        data: {\n          visible: visible,\n          action: action,\n          employee: employee,\n          icon: icon,\n        },\n      },\n    })\n  }\nexport const changePasswordModal =\n  (visible, action, employee, icon) => async (dispatch) => {\n    dispatch({\n      type: CHANGE_PASSWORD_MODAL,\n      payload: {\n        status: 200,\n        data: {\n          visible: visible,\n          action: action,\n          employee: employee,\n          icon: icon,\n        },\n      },\n    })\n  }\nexport const setLoginModal = (visible, action) => async (dispatch) => {\n  dispatch({\n    type: LOGIN_MODAL,\n    payload: {\n      data: {\n        visible: visible,\n        action: action,\n      },\n    },\n  })\n}\n\nexport const setAddressModal =\n  (visible, action, address, icon) => async (dispatch) => {\n    dispatch({\n      type: SET_ADDRESS_MODAL,\n      payload: {\n        data: {\n          visible: visible,\n          action: action,\n          address: address,\n          icon: icon,\n        },\n      },\n    })\n  }\n\nexport const setSupplierModal =\n  (visible, action, supplier, icon) => async (dispatch) => {\n    dispatch({\n      type: SET_SUPPLIER_MODAL,\n      payload: {\n        action: action,\n        data: {\n          visible: visible,\n          icon: icon,\n          supplier: supplier,\n        },\n      },\n    })\n  }\nexport const setSupplyModal =\n  (visible, action, supply, icon) => async (dispatch) => {\n    dispatch({\n      type: SET_SUPPLY_MODAL,\n      payload: {\n        action: action,\n        data: {\n          visible: visible,\n          icon: icon,\n          supply: supply,\n        },\n      },\n    })\n  }\n\nexport const setScanModal = (visible, action) => async (dispatch) => {\n  dispatch({\n    type: SET_SCAN_MODAL,\n    payload: {\n      action: action,\n      data: {\n        visible: visible,\n      },\n    },\n  })\n}\nexport const setPromoModal =\n  (visible, action, promo, icon) => async (dispatch) => {\n    dispatch({\n      type: SET_PROMO_MODAL,\n      payload: {\n        action: action,\n        data: {\n          visible: visible,\n          icon: icon,\n          promo: promo,\n        },\n      },\n    })\n  }\nexport const setTermAndConditionModal =\n  (visible, action, termsAndCondition, icon) => async (dispatch) => {\n    dispatch({\n      type: SET_TERMS_AND_CONDITION_MODAL,\n      payload: {\n        status: 200,\n        data: {\n          visible: visible,\n          action: action,\n          termsAndCondition: termsAndCondition,\n          icon: icon,\n        },\n      },\n    })\n  }\nexport const setCarouselModal =\n  (visible, action, carousel, icon) => async (dispatch) => {\n    dispatch({\n      type: SET_CAROULSE_MDOAL,\n      payload: {\n        status: 200,\n        data: {\n          visible: visible,\n          action: action,\n          carousel: carousel,\n          icon: icon,\n        },\n      },\n    })\n  }\n\nexport const setTrackingInfoModal = (visible, action, order, icon) => async (dispatch) => {\n  dispatch({\n    type: SET_TRACKING_INFO_MODAL,\n    payload: {\n      status: 200,\n      data: {\n        visible: visible,\n        action: action,\n        order: order,\n        icon: icon\n      }\n    }\n  })\n}\n","import axios from \"./RestApi\"\nimport authHeader from \"../auth/authHeader\"\n\nexport class TermsAndCondionApiService {\n  saveTermsAndCondition(content) {\n    return axios.post(\n      \"/terms/save\",\n      {\n        content,\n      },\n      {\n        headers: authHeader(),\n      },\n    )\n  }\n  updateTermsAndCondition(id, content) {\n    return axios.put(\n      \"/terms/update/\" + id,\n      {\n        content,\n      },\n      {\n        headers: authHeader(),\n      },\n    )\n  }\n  getTermsAndCondition() {\n    return axios.get(\n      \"/terms\",\n      {\n        headers: authHeader(),\n      },\n    )\n  }\n}\nexport default new TermsAndCondionApiService()\n","import { SET_MESSAGE } from \"src/constants/userConstants\"\nimport {\n  GET_TERMS_AND_CONDITION,\n  SAVE_TERMS_AND_CONDITION,\n  UPDATE_TERMS_AND_CONDITION,\n} from \"src/service/redux/constants\"\nimport TermsAndCondionApiService from \"src/service/restAPI/TermsAndCondiitonApiService\"\nexport const saveTermsAndCondition = (content) => async (dispatch) => {\n  return TermsAndCondionApiService.saveTermsAndCondition(content).then(\n    (response) => {\n      dispatch({\n        type: SAVE_TERMS_AND_CONDITION,\n        payload: {\n          status: 200,\n          action: SAVE_TERMS_AND_CONDITION,\n          data: {},\n        },\n      })\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: 200,\n          data: {\n            message: \"Successfully Saved\",\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      const errorMessage =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: errorMessage,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\nexport const updateTermsAndCondition = (id, content) => async (dispatch) => {\n  return TermsAndCondionApiService.updateTermsAndCondition(id, content).then(\n    (response) => {\n      dispatch({\n        type: UPDATE_TERMS_AND_CONDITION,\n        payload: {\n          status: 200,\n          action: UPDATE_TERMS_AND_CONDITION,\n          data: {\n            termsAndCondition: response.data,\n          },\n        },\n      })\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: 200,\n          data: {\n            message: \"Successfully Updated\",\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      const errorMessage =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: errorMessage,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\nexport const getTermsAndCondition = () => async (dispatch) => {\n  return TermsAndCondionApiService.getTermsAndCondition().then(\n    (response) => {\n      dispatch({\n        type: GET_TERMS_AND_CONDITION,\n        payload: {\n          status: 200,\n          action: GET_TERMS_AND_CONDITION,\n          data: {\n            termsAndCondition: response.data,\n          },\n        },\n      })\n\n      return Promise.resolve()\n    },\n    (error) => {\n      const errorMessage =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: errorMessage,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\n","import {\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CButton,\n  CCardText,\n  CCardTitle,\n} from \"@coreui/react\"\nimport React, { Component } from \"react\"\nimport * as MdIcons from \"react-icons/md\"\nimport * as FaIcons from \"react-icons/fa\"\n\nimport { connect } from \"react-redux\"\nimport { getTermsAndCondition } from \"src/service/apiActions/termsAction/TermsAndConditionAction\"\nimport { EditorState, convertFromRaw, convertToRaw } from \"draft-js\"\nimport DOMPurify from \"dompurify\"\nimport draftToHtml from \"draftjs-to-html\"\nimport TermsAndCondtionModal from \"src/components/modals/termsAndCondition/TermsAndCondtionModal\"\nimport { setTermAndConditionModal } from \"src/service/apiActions/modalAction/modalAction\"\nexport class TermsAndConditionController extends Component {\n  state = {\n    termsAndCondition: [],\n    visible: false,\n  }\n  componentDidMount() {\n    this.props.getTermsAndCondition()\n  }\n  componentDidUpdate(prevProps, prevState) {\n    this.manageTermsAndConditionResponse(prevProps, prevState)\n    this.manageStoreInfo(prevProps, prevState)\n  }\n  manageTermsAndConditionResponse = (prevProps, prevState) => {\n    if (\n      prevProps.termsAndConditionResponse !==\n      this.props.termsAndConditionResponse\n    ) {\n      const { action, status, data } = this.props.termsAndConditionResponse\n      if (action === \"GET_TERMS_AND_CONDITION\" && status === 200) {\n        this.setState({\n          termsAndCondition: data,\n        })\n      }\n    }\n  }\n  manageStoreInfo = (prevProps, prevState) => {\n    if (prevProps.modalVisible !== this.props.modalVisible) {\n      let { action } = this.props.modalVisible\n      if (action === \"close\") {\n        this.props.getTermsAndCondition()\n      }\n    }\n  }\n  createMarkup = (html) => {\n    return {\n      __html: DOMPurify.sanitize(html),\n    }\n  }\n  render() {\n    const { termsAndCondition, visible } = this.state\n    const { content } = termsAndCondition\n    let convertFromRawContent = \"\"\n    let html = <></>\n    if (content) {\n      let getContent = termsAndCondition && JSON.parse(content)\n      if (getContent) {\n        convertFromRawContent = convertFromRaw(getContent)\n        const editorState = EditorState.createWithContent(convertFromRawContent)\n        html = draftToHtml(convertToRaw(editorState.getCurrentContent()))\n      }\n    }\n    const margin = {\n      marginBottom: \"12px\",\n      marginLeft: \"5px\",\n    }\n    return (\n      <>\n        <TermsAndCondtionModal />\n        <CCard>\n          <CCardHeader className=\"d-flex justify-content-between align-items-center\">\n            <CCardTitle>Terms And Condition</CCardTitle>\n            <div className=\"\">\n              {termsAndCondition ? (\n                <CButton\n                  color=\"info\"\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() =>\n                    this.props.setTermAndConditionModal(\n                      !visible,\n                      \"Edit\",\n                      termsAndCondition,\n                      <MdIcons.MdModeEdit size=\"24\" className=\"me-2\" />,\n                    )\n                  }\n                >\n                  <MdIcons.MdModeEdit size=\"20\" />\n                </CButton>\n              ) : (\n                <CButton\n                  color=\"info\"\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() =>\n                    this.props.setTermAndConditionModal(\n                      !visible,\n                      \"Add\",\n                      null,\n                      <FaIcons.FaPlus size={20} />,\n                    )\n                  }\n                >\n                  <FaIcons.FaPlus size={20} />,\n                </CButton>\n              )}\n            </div>\n          </CCardHeader>\n          <CCardBody>\n            {termsAndCondition ? (\n              <>\n                <div className=\"text-black-50 d-flex justify-content-between align-items-center mb-3\">\n                  <h6 className=\"m-0 pe-3 mb-2\">\n                    Created Date:\n                    <strong style={{ ...margin }}>\n                      {termsAndCondition.createdAt}\n                    </strong>\n                  </h6>\n                  <h6 className=\"m-0 pe-3 mb-2\">\n                    Last Updated Date:\n                    <strong style={{ ...margin }}>\n                      {termsAndCondition.updatedAt}\n                    </strong>\n                  </h6>\n                </div>\n                <hr />\n\n                <CCardText className=\"p-3 d-flex justify-content-center\">\n                  <div\n                    className=\"preview ps-4\"\n                    dangerouslySetInnerHTML={this.createMarkup(html)}\n                  ></div>\n                </CCardText>\n              </>\n            ) : (\n              <>\n                <div className=\"preview ps-4 text-warning\">\n                  No Terms And Condition Created\n                </div>\n              </>\n            )}\n          </CCardBody>\n        </CCard>\n      </>\n    )\n  }\n}\nconst mapStateToProps = (state) => {\n  return {\n    modalVisible: state.modalVisibleResponse,\n    messageResponse: state.messageResponse,\n    termsAndConditionResponse: state.termsAndConditionResponse,\n  }\n}\nexport default connect(mapStateToProps, {\n  getTermsAndCondition,\n  setTermAndConditionModal,\n})(TermsAndConditionController)\n","import React, { Component } from \"react\"\nimport {\n  CModal,\n  CModalHeader,\n  CModalBody,\n  CModalFooter,\n  CButton,\n  CModalTitle,\n  CSpinner,\n  CForm,\n  CCol,\n  CRow,\n} from \"@coreui/react\"\nimport { convertFromRaw, convertToRaw, EditorState } from \"draft-js\"\nimport { Editor } from \"react-draft-wysiwyg\"\nimport { setTermAndConditionModal } from \"src/service/apiActions/modalAction/modalAction\"\nimport {\n  saveTermsAndCondition,\n  updateTermsAndCondition,\n} from \"src/service/apiActions/termsAction/TermsAndConditionAction\"\nimport { clearMessage } from \"src/service/apiActions/messageAction/messageAction\"\nimport { connect } from \"react-redux\"\nexport class TermsAndCondtionModal extends Component {\n  state = {\n    visible: false,\n    icon: \"\",\n    loading: false,\n    message: \"\",\n    action: \"\",\n    status: \"\",\n    successFully: \"\",\n    editorState: EditorState.createEmpty(),\n    validated: false,\n    id: \"\",\n  }\n  onEditorStateChange = (editorState) => {\n    this.setState({\n      editorState,\n    })\n  }\n  componentDidUpdate(prevProps, prevState) {\n    this.manageStoreInfo(prevProps, prevState)\n  }\n  manageStoreInfo = (prevProps, prevState) => {\n    if (prevProps.modalVisible !== this.props.modalVisible) {\n      let { visible, action, termsAndCondition, icon } = this.props.modalVisible\n      if (action === \"Edit\") {\n        this.setState({\n          id: termsAndCondition.id,\n          visible: visible,\n          icon: icon,\n          action: action,\n          editorState: termsAndCondition.content\n            ? EditorState.createWithContent(\n              convertFromRaw(JSON.parse(termsAndCondition.content)),\n            )\n            : EditorState.createEmpty(),\n        })\n      } else if (action === \"Add\") {\n        this.setState({\n          visible: visible,\n\n          icon: icon,\n          action: action,\n        })\n      } else {\n        this.setState({\n          visible: visible,\n          branchId: \"\",\n          branchName: \"\",\n          icon: \"\",\n          action: \"\",\n          loading: false,\n        })\n      }\n    }\n  }\n  handleOnSubmit = (event) => {\n    event.preventDefault()\n\n    const form = event.currentTarget\n    if (form.checkValidity() === false) {\n      event.stopPropagation()\n    }\n    this.setState({\n      validated: true,\n      loading: true,\n    })\n    const { action } = this.state\n    if (action === \"Add\") {\n      this.handleSave()\n    } else if (action === \"Edit\") {\n      this.handleEdit()\n    }\n  }\n  handleSave = () => {\n    const { editorState } = this.state\n    const content = JSON.stringify(\n      convertToRaw(editorState.getCurrentContent()),\n    )\n    this.props\n      .saveTermsAndCondition(content)\n      .then(() => {\n        this.setState({\n          validated: false,\n          loading: false,\n        })\n        this.props.setTermAndConditionModal(false, \"close\", \"\", \"\")\n      })\n      .catch(() => {\n        this.setState({\n          loading: false,\n        })\n      })\n  }\n  handleEdit = () => {\n    const { id, editorState } = this.state\n    const content = JSON.stringify(\n      convertToRaw(editorState.getCurrentContent()),\n    )\n    this.props\n      .updateTermsAndCondition(id, content)\n      .then(() => {\n        this.setState({\n          validated: false,\n          loading: false,\n        })\n        this.props.setTermAndConditionModal(false, \"close\", \"\", \"\")\n      })\n      .catch(() => {\n        this.setState({\n          loading: false,\n        })\n      })\n  }\n  render() {\n    let {\n      visible,\n      action,\n      icon,\n      loading,\n      successFully,\n      message,\n      editorState,\n      validated,\n    } = this.state\n    return (\n      <div>\n        <CModal visible={visible} size=\"xl\" scrollable>\n          <CModalHeader\n            onDismiss={() => {\n              this.props.setTermAndConditionModal(false, \"close\", \"\", \"\")\n              this.props.clearMessage()\n            }}\n          >\n            <CModalTitle>\n              <div className=\"d-flex align-items-center\">\n                {icon}\n                {action + \" Terms and Condition\"}\n              </div>\n            </CModalTitle>\n          </CModalHeader>\n          <CModalBody>\n            {message && (\n              <div className=\"form-group\">\n                <div\n                  className={\n                    successFully ? \"alert alert-success\" : \"alert alert-danger\"\n                  }\n                  role=\"alert\"\n                >\n                  {message}\n                </div>\n              </div>\n            )}\n            <CForm\n              onSubmit={this.handleOnSubmit}\n              id=\"branch-form\"\n              noValidate\n              validated={validated}\n            >\n              <div className=\"mb-3\">\n                <CRow>\n                  <CCol sm=\"12\" md=\"12\" lg=\"12\" className=\"mt-4\">\n                    <Editor\n                      editorState={editorState}\n                      wrapperClassName=\"editor-wrapper\"\n                      editorClassName=\"editor\"\n                      onEditorStateChange={this.onEditorStateChange}\n                      placeholder=\"Inser Description about your Store\"\n                      toolbar={{\n                        options: [\n                          \"inline\",\n                          \"blockType\",\n                          \"fontSize\",\n                          \"fontFamily\",\n                          \"list\",\n                          \"textAlign\",\n                          \"colorPicker\",\n                          \"emoji\",\n                          \"remove\",\n                          \"history\",\n                        ],\n                      }}\n                    />\n                  </CCol>\n                </CRow>\n              </div>\n            </CForm>\n          </CModalBody>\n          <CModalFooter>\n            <CButton\n              color=\"dark\"\n              variant=\"ghost\"\n              onClick={() => {\n                this.props.setTermAndConditionModal(false, \"close\", \"\", \"\")\n                this.props.clearMessage()\n              }}\n            >\n              Close\n            </CButton>\n            <CButton\n              color=\"primary\"\n              disabled={loading}\n              type=\"submit\"\n              form=\"branch-form\"\n            >\n              {loading && <CSpinner size=\"sm\" className=\"ms-1\" />}\n              Save {action === \"Edit\" ? \"Changes\" : \"Terms And Condition\"}\n            </CButton>\n          </CModalFooter>\n        </CModal>\n      </div>\n    )\n  }\n}\nconst mapStateToProps = (state) => {\n  return {\n    modalVisible: state.modalVisibleResponse,\n    messageResponse: state.messageResponse,\n  }\n}\nexport default connect(mapStateToProps, {\n  setTermAndConditionModal,\n  clearMessage,\n  saveTermsAndCondition,\n  updateTermsAndCondition,\n})(TermsAndCondtionModal)\n"],"sourceRoot":""}