{"version":3,"sources":["views/common/address/CustomerAddressController.js","components/modals/address/AddressModal.js","../node_modules/select-philippines-address/index.js"],"names":["CustomerAddressController","Component","state","message","action","addresses","addressId","visible","isCart","retreiveAddressResponse","this","props","getAdress","manageAddressResponse","prevProps","prevState","addressResponse","status","data","setState","manageModalVisible","modalVisible","componentDidMount","userResponse","isLoggedIn","history","push","config","api","private","prefixFrontendUrl","componentDidUpdate","render","shape","color","variant","className","onClick","setAddressModal","size","style","marginLeft","map","address","index","firstName","lastName","phoneNumber","street","barangay","province","region","city","postalCode","id","md","setAlertModal","fontStyle","role","connect","messageResponse","modalVisibleResponse","clearMessage","withRouter","AddressModal","icon","addressStates","loading","regionsData","provincesData","citiesData","baranggaysData","baranggayId","cityId","provinceId","regionId","handleOnEditSetState","onResetValue","regionIndex","findIndex","item","name","getProvince","code","provinces","then","dt","province_name","province_code","provinceIndex","getCity","cities","city_name","city_code","cityIndex","getBarangay","console","log","barangays","brgy_name","brgy_code","barangayIndex","handleOnChange","event","target","value","handleOnSubmit","preventDefault","currentTarget","checkValidity","stopPropagation","handleSaveAddress","handleUpdateAddress","saveAddress","catch","updateAddress","onRegionChanged","onProvinceChanged","onCityChanged","onBaranggayChanged","regions","region_name","region_code","prevPros","onDismiss","onSubmit","type","placeholder","onChange","required","htmlFor","pattern","disabled","form","axios","require","module","exports","async","get","psgc_code","e","filter","filtered","region_desc"],"mappings":"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","file":"static/js/49.c7c526ba.chunk.js","sourcesContent":["import React, { Component } from \"react\"\nimport {\n  CButton,\n  CRow,\n  CCol,\n  CCard,\n  CCardTitle,\n  CCardBody,\n  CAlert,\n} from \"@coreui/react\"\nimport { withRouter } from \"react-router\"\nimport { getAdress } from \"src/service/apiActions/addressAction/addressAction\"\nimport { clearMessage } from \"src/service/apiActions/messageAction/messageAction\"\nimport { setAddressModal } from \"src/service/apiActions/modalAction/modalAction\"\nimport AddressModal from \"src/components/modals/address/AddressModal\"\nimport AlertModal from \"src/components/modals/alert/AlertModal\"\nimport { connect } from \"react-redux\"\nimport * as FaIcons from \"react-icons/fa\"\nimport * as MdIcons from \"react-icons/md\"\nimport config from \"../../../config\"\nimport { setAlertModal } from \"src/service/apiActions/modalAction/modalAction\"\nexport class CustomerAddressController extends Component {\n  state = {\n    message: \"\",\n    action: \"\",\n    addresses: [],\n    addressId: \"\",\n    visible: false,\n    isCart: false,\n  }\n  componentDidMount() {\n    if (!this.props.userResponse.isLoggedIn) {\n      this.props.history.push(config.api.private.prefixFrontendUrl + \"/login\")\n    } else {\n      this.retreiveAddressResponse()\n    }\n  }\n  retreiveAddressResponse = () => {\n    this.props.getAdress()\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    this.manageAddressResponse(prevProps, prevState)\n    this.manageModalVisible(prevProps, prevState)\n  }\n  manageAddressResponse = (prevProps, prevState) => {\n    if (prevProps.addressResponse !== this.props.addressResponse) {\n      let { action, status, data } = this.props.addressResponse\n      if (action === \"GET_ADDRESSES\" && status === 200) {\n        this.setState({\n          addresses: data.addresses,\n        })\n      }\n    }\n  }\n  manageModalVisible = (prevProps, prevState) => {\n    if (prevProps.modalVisible !== this.props.modalVisible) {\n      let { action } = this.props.modalVisible\n      if (action === \"close\") {\n        this.retreiveAddressResponse()\n      }\n    }\n  }\n  render() {\n    let { message, addresses, visible, isCart } = this.state\n    const cursorStyle = {\n      cursor: \"pointer\",\n    }\n    return (\n      <>\n        <AddressModal />\n        <AlertModal />\n        <CButton\n          shape=\"rounded-pill\"\n          color=\"primary\"\n          variant=\"ghost\"\n          className=\"d-flex justify-content-center align-items-center mb-3\"\n          onClick={() =>\n            this.props.setAddressModal(\n              !visible,\n              \"Add\",\n              \"\",\n              <FaIcons.FaPlus size={20} className=\"me-2\" />,\n            )\n          }\n        >\n          <FaIcons.FaPlus size={20} />\n          <span style={{ marginLeft: \"10px\" }}>Add Address</span>\n        </CButton>\n        <CRow>\n          {addresses.map((address, index) => {\n            const {\n              firstName,\n              lastName,\n              phoneNumber,\n              street,\n              barangay,\n              province,\n              region,\n              city,\n              postalCode,\n              id,\n            } = address\n            return (\n              <CCol key={index} md={12} className=\"mb-3\">\n                <CCard className=\"border-envelope\">\n                  <CCardBody className=\"p-3 \">\n                    <div>\n                      <div className=\"d-flex align-items-center justify-content-between \">\n                        <CCardTitle>{firstName + \" \" + lastName}</CCardTitle>\n                        <div className=\" text-end\">\n                          <CButton\n                            color=\"info\"\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() =>\n                              this.props.setAddressModal(\n                                !visible,\n                                \"Edit\",\n                                address,\n                                <FaIcons.FaPlus size={20} className=\"me-2\" />,\n                              )\n                            }\n                          >\n                            <FaIcons.FaEdit size=\"20\" />\n                          </CButton>\n                          <CButton\n                            color=\"danger\"\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() =>\n                              this.props.setAlertModal(\n                                !visible,\n                                \"DELETECUSTOMERADDRESS\",\n                                \"ADDRESS\",\n                                id,\n                              )\n                            }\n                          >\n                            <MdIcons.MdDelete size=\"20\" />\n                          </CButton>\n                        </div>\n                      </div>\n                      <div className=\"ps-2\">Mobile #: {phoneNumber}</div>\n                      <div className=\"ps-2\">\n                        Address:{\" \"}\n                        {street +\n                          \", \" +\n                          barangay +\n                          \", \" +\n                          city +\n                          \", \" +\n                          province +\n                          \", \" +\n                          region}\n                      </div>\n                    </div>\n                  </CCardBody>\n                </CCard>\n              </CCol>\n            )\n          })}\n          {isCart && (\n            <CCol className=\"m-3 text-center\" style={{ fontStyle: \"italic\" }}>\n              <CAlert color=\"warning\">\n                To Proceed to the next step Select or Add your Address\n                Information\n              </CAlert>\n            </CCol>\n          )}\n        </CRow>\n        {message && (\n          <div className=\"form-group d-flex justify-content-center align-items-center\">\n            <div className=\"alert alert-danger\" role=\"alert\">\n              {message}\n            </div>\n          </div>\n        )}\n      </>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    addressResponse: state.addressResponse,\n    userResponse: state.userResponse,\n    messageResponse: state.messageResponse,\n    modalVisible: state.modalVisibleResponse,\n  }\n}\nexport default connect(mapStateToProps, {\n  getAdress,\n  clearMessage,\n  setAddressModal,\n  setAlertModal,\n})(withRouter(CustomerAddressController))\n","import React, { Component } from \"react\"\nimport {\n  CButton,\n  // CRow,\n  CCol,\n  CFormFloating,\n  CFormLabel,\n  CFormControl,\n  CForm,\n  CModal,\n  CModalBody,\n  CModalHeader,\n  CModalTitle,\n  CModalFooter,\n  CSpinner,\n  CFormSelect,\n} from \"@coreui/react\"\nimport { connect } from \"react-redux\"\n//action\nimport { setAddressModal } from \"src/service/apiActions/modalAction/modalAction\"\nimport {\n  saveAddress,\n  updateAddress,\n} from \"src/service/apiActions/addressAction/addressAction\"\nimport { clearMessage } from \"src/service/apiActions/messageAction/messageAction\"\n\nimport {\n  regions,\n  provinces,\n  cities,\n  barangays,\n} from \"select-philippines-address\"\n\nexport class AddressModal extends Component {\n  state = {\n    visible: false,\n    icon: \"\",\n    address: this.addressStates,\n    loading: false,\n    action: \"\",\n    regionsData: [],\n    provincesData: [],\n    citiesData: [],\n    baranggaysData: [],\n    baranggayId: \"\",\n    cityId: \"\",\n    provinceId: \"\",\n    regionId: \"\",\n    id: \"\",\n  }\n\n  addressStates = {\n    firstName: \"\",\n    lastName: \"\",\n    phoneNumber: \"\",\n    region: \"\",\n    city: \"\",\n    province: \"\",\n    barangay: \"\",\n    street: \"\",\n    postalCode: \"\",\n  }\n\n  componentDidMount() {\n    regions().then((regions) => {\n      let regionsData = []\n      regions.map((region) => {\n        regionsData[region.id] = {\n          name: region.region_name,\n          code: region.region_code,\n        }\n      })\n      this.setState({\n        regionsData: regionsData,\n      })\n    })\n  }\n\n  componentDidUpdate(prevPros, prevState) {\n    this.manageModalVisible(prevPros, prevState)\n  }\n\n  manageModalVisible = (prevProps, prevState) => {\n    if (prevProps.modalVisible !== this.props.modalVisible) {\n      let { visible, action, address, icon } = this.props.modalVisible\n      if (action === \"Add\") {\n        this.setState({\n          visible: visible,\n          icon: icon,\n          action: action,\n        })\n      } else if (action === \"Edit\") {\n        this.setState({\n          visible: visible,\n          icon: icon,\n          action: action,\n          id: address.id,\n        })\n        this.handleOnEditSetState(address)\n      } else {\n        this.setState({\n          visible: visible,\n          icon: \"\",\n          action: \"\",\n          regionId: \"\",\n          provinceId: \"\",\n          cityId: \"\",\n          baranggayId: \"\",\n        })\n        this.onResetValue()\n      }\n    }\n  }\n  handleOnEditSetState = (address) => {\n    const {\n      firstName,\n      lastName,\n      phoneNumber,\n      region,\n      city,\n      province,\n      barangay,\n      street,\n    } = address\n    const { regionsData } = this.state\n    const regionIndex = regionsData.findIndex(\n      (item) => item && item.name === region,\n    )\n    this.getProvince(regionsData[regionIndex].code, province)\n\n    this.setState({\n      firstName: firstName,\n      lastName: lastName,\n      phoneNumber: phoneNumber,\n      region: region,\n      city: city,\n      province: province,\n      barangay: barangay,\n      street: street,\n      regionId: regionIndex,\n    })\n  }\n  getProvince = (code, province) => {\n    provinces(code).then((provinces) => {\n      let provincesData = []\n      provinces.map((dt, index) => {\n        provincesData[index] = {\n          name: dt.province_name,\n          code: dt.province_code,\n        }\n      })\n      let provinceIndex = provincesData.findIndex(\n        (item) => item && item.name === province,\n      )\n      this.setState({\n        provinceId: provinceIndex,\n        provincesData: provincesData,\n      })\n      this.getCity(provincesData[provinceIndex].code)\n    })\n  }\n  getCity = (code) => {\n    const { city } = this.state\n    cities(code).then((item) => {\n      let citiesData = []\n      item.map((dt, index) => {\n        citiesData[index] = {\n          name: dt.city_name,\n          code: dt.city_code,\n        }\n      })\n      let cityIndex = citiesData.findIndex((item) => item && item.name === city)\n      this.setState({\n        citiesData: citiesData,\n        cityId: cityIndex,\n      })\n      this.getBarangay(citiesData[cityIndex].code)\n    })\n  }\n  getBarangay = (code) => {\n    console.log(code)\n    const { barangay } = this.state\n    barangays(code).then((item) => {\n      let baranggaysData = []\n      item.map((dt, index) => {\n        baranggaysData[index] = {\n          name: dt.brgy_name,\n          code: dt.brgy_code,\n        }\n      })\n      let barangayIndex = baranggaysData.findIndex(\n        (item) => item && item.name === barangay,\n      )\n      this.setState({\n        baranggaysData: baranggaysData,\n        baranggayId: barangayIndex,\n      })\n    })\n  }\n\n  handleOnChange = (event) => {\n    this.setState({\n      [event.target.name]: event.target.value,\n    })\n  }\n\n  handleOnSubmit = (event) => {\n    event.preventDefault()\n\n    const form = event.currentTarget\n    if (form.checkValidity() === false) {\n      event.stopPropagation()\n    }\n    this.setState({\n      loading: true,\n    })\n    let {\n      action,\n      firstName,\n      lastName,\n      phoneNumber,\n      region,\n      city,\n      province,\n      barangay,\n      street,\n      postalCode,\n      id,\n    } = this.state\n\n    let address = {\n      firstName: firstName,\n      lastName: lastName,\n      phoneNumber: phoneNumber,\n      region: region,\n      city: city,\n      province: province,\n      barangay: barangay,\n      street: street,\n      postalCode: postalCode,\n    }\n    if (action === \"Add\") {\n      this.handleSaveAddress(address)\n    } else if (action === \"Edit\") {\n      this.handleUpdateAddress(id, address)\n    }\n  }\n\n  onResetValue = () => {\n    this.setState(() => this.addressStates)\n  }\n\n  handleSaveAddress = (address) => {\n    this.props\n      .saveAddress(address)\n      .then(() => {\n        let { status } = this.props.messageResponse\n        if (status === 200) {\n          this.setState({\n            loading: false,\n            regionId: \"\",\n            provinceId: \"\",\n            cityId: \"\",\n            baranggayId: \"\",\n          })\n          this.onResetValue()\n          this.props.setAddressModal(false, \"close\", \"\", \"\")\n        }\n      })\n      .catch(() => {\n        this.setState({\n          loading: false,\n        })\n      })\n  }\n\n  handleUpdateAddress = (id, address) => {\n    console.log(id)\n    this.props\n      .updateAddress(id, address)\n      .then(() => {\n        let { status } = this.props.messageResponse\n        if (status === 200) {\n          this.setState({\n            loading: false,\n            regionId: \"\",\n            provinceId: \"\",\n            cityId: \"\",\n            baranggayId: \"\",\n          })\n          this.onResetValue()\n          this.props.setAddressModal(false, \"close\", \"\", \"\")\n        }\n      })\n      .catch(() => {\n        this.setState({\n          loading: false,\n        })\n      })\n  }\n  onRegionChanged = (event) => {\n    const regionsData = this.state.regionsData\n\n    if (event.target.value == \"\") {\n      return\n    }\n\n    const data = regionsData[event.target.value]\n    this.setState({\n      regionId: event.target.value,\n      region: data.name,\n    })\n\n    provinces(data.code).then((province) => {\n      let provincesData = []\n      province.map((dt, index) => {\n        provincesData[index] = {\n          name: dt.province_name,\n          code: dt.province_code,\n        }\n      })\n      this.setState({\n        provincesData: provincesData,\n      })\n    })\n  }\n\n  onProvinceChanged = (event) => {\n    const provincesData = this.state.provincesData\n\n    if (event.target.value == \"\") {\n      return\n    }\n\n    const data = provincesData[event.target.value]\n\n    this.setState({\n      provinceId: event.target.value,\n      province: data.name,\n    })\n\n    cities(data.code).then((city) => {\n      let citiesData = []\n      city.map((dt, index) => {\n        citiesData[index] = {\n          name: dt.city_name,\n          code: dt.city_code,\n        }\n      })\n      this.setState({\n        citiesData: citiesData,\n      })\n    })\n  }\n\n  onCityChanged = (event) => {\n    const citiesData = this.state.citiesData\n\n    if (event.target.value == \"\") {\n      return\n    }\n    const data = citiesData[event.target.value]\n\n    this.setState({\n      cityId: event.target.value,\n      city: data.name,\n    })\n    barangays(data.code).then((barangay) => {\n      let baranggaysData = []\n      barangay.map((dt, index) => {\n        baranggaysData[index] = {\n          name: dt.brgy_name,\n          code: dt.brgy_code,\n        }\n      })\n      this.setState({\n        baranggaysData: baranggaysData,\n      })\n    })\n  }\n\n  onBaranggayChanged = (event) => {\n    const baranggaysData = this.state.baranggaysData\n\n    if (event.target.value == \"\") {\n      return\n    }\n    const data = baranggaysData[event.target.value]\n\n    this.setState({\n      baranggayId: event.target.value,\n      barangay: data.name,\n    })\n  }\n\n  render() {\n    let {\n      visible,\n      firstName,\n      lastName,\n      phoneNumber,\n      street,\n      loading,\n      action,\n      regionsData,\n      provincesData,\n      citiesData,\n      baranggaysData,\n      baranggayId,\n      cityId,\n      regionId,\n      provinceId,\n    } = this.state\n    return (\n      <>\n        <CModal size=\"lg\" visible={visible}>\n          <CModalHeader\n            onDismiss={() => this.props.setAddressModal(false, \"close\", \"\", \"\")}\n          >\n            <CModalTitle>Customer Address</CModalTitle>\n          </CModalHeader>\n          <CModalBody>\n            <CForm\n              className=\"row g-3 needs-validation\"\n              id=\"address-form\"\n              onSubmit={this.handleOnSubmit}\n            >\n              <CCol md={6}>\n                <CFormFloating className=\"mb-3\">\n                  <CFormControl\n                    name=\"firstName\"\n                    type=\"text\"\n                    id=\"floatingFirstName\"\n                    placeholder=\"First name\"\n                    value={firstName}\n                    onChange={this.handleOnChange}\n                    required\n                  />\n                  <CFormLabel htmlFor=\"floatingFirstName\">\n                    First name\n                  </CFormLabel>\n                </CFormFloating>\n              </CCol>\n              <CCol md={6}>\n                <CFormFloating>\n                  <CFormControl\n                    name=\"lastName\"\n                    type=\"text\"\n                    id=\"floatingLastName\"\n                    placeholder=\"Last name\"\n                    value={lastName}\n                    onChange={this.handleOnChange}\n                    required\n                  />\n                  <CFormLabel htmlFor=\"floatingLastName\">Last name</CFormLabel>\n                </CFormFloating>\n              </CCol>\n              <CCol md={6}>\n                <CFormFloating>\n                  <CFormControl\n                    name=\"phoneNumber\"\n                    type=\"tel\"\n                    required\n                    pattern={\"^(09|\\\\+639)\\\\d{9}$\"}\n                    id=\"floatingPhoneNumber\"\n                    placeholder=\"Last name\"\n                    value={phoneNumber}\n                    onChange={this.handleOnChange}\n                  />\n                  <CFormLabel htmlFor=\"floatingPhoneNumber\">\n                    Phone number\n                  </CFormLabel>\n                </CFormFloating>\n              </CCol>\n              <CCol md={6}></CCol>\n              <CCol md={12}>\n                <CFormFloating>\n                  <CFormControl\n                    name=\"street\"\n                    type=\"text\"\n                    id=\"floatingStreet\"\n                    placeholder=\"Street\"\n                    value={street}\n                    onChange={this.handleOnChange}\n                    required\n                  />\n                  <CFormLabel htmlFor=\"floatingStreet\">Street</CFormLabel>\n                </CFormFloating>\n              </CCol>\n              <CCol md={6}>\n                <CFormFloating className=\"mb-3\">\n                  <CFormSelect\n                    name=\"region\"\n                    type=\"text\"\n                    id=\"floatingRegion\"\n                    placeholder=\"Region\"\n                    value={regionId}\n                    onChange={this.onRegionChanged}\n                    required\n                  >\n                    <option value=\"\" disabled>\n                      -- Choose Region --\n                    </option>\n                    {regionsData.map((region, index) => {\n                      return (\n                        <option value={index} key={index}>\n                          {region.name}\n                        </option>\n                      )\n                    })}\n                  </CFormSelect>\n                  <CFormLabel htmlFor=\"floatingRegion\">Region</CFormLabel>\n                </CFormFloating>\n              </CCol>\n              <CCol md={6}>\n                <CFormFloating>\n                  <CFormSelect\n                    name=\"province\"\n                    type=\"text\"\n                    id=\"floatingProvince\"\n                    placeholder=\"Province\"\n                    value={provinceId}\n                    onChange={this.onProvinceChanged}\n                    required\n                  >\n                    <option value=\"\" disabled>\n                      -- Choose Province --\n                    </option>\n                    {provincesData.map((region, index) => {\n                      return (\n                        <option value={index} key={region.name}>\n                          {region.name}\n                        </option>\n                      )\n                    })}\n                  </CFormSelect>\n                  <CFormLabel htmlFor=\"floatingProvince\">Province</CFormLabel>\n                </CFormFloating>\n              </CCol>\n              <CCol md={6}>\n                <CFormFloating>\n                  <CFormSelect\n                    name=\"city\"\n                    type=\"text\"\n                    id=\"floatingCity\"\n                    placeholder=\"City\"\n                    value={cityId}\n                    onChange={this.onCityChanged}\n                    required\n                  >\n                    <option value=\"\" disabled>\n                      -- Choose City --\n                    </option>\n                    {citiesData.map((region, index) => {\n                      return (\n                        <option value={index} key={index}>\n                          {region.name}\n                        </option>\n                      )\n                    })}\n                  </CFormSelect>\n                  <CFormLabel htmlFor=\"floatingCity\">City</CFormLabel>\n                </CFormFloating>\n              </CCol>\n              <CCol md={6}>\n                <CFormFloating>\n                  <CFormSelect\n                    name=\"barangay\"\n                    type=\"text\"\n                    id=\"floatingBarangay\"\n                    placeholder=\"Barangay\"\n                    value={baranggayId}\n                    onChange={this.onBaranggayChanged}\n                    required\n                  >\n                    <option value=\"\" disabled>\n                      -- Choose Barangay --\n                    </option>\n                    {baranggaysData.map((region, index) => {\n                      return (\n                        <option value={index} key={index}>\n                          {region.name}\n                        </option>\n                      )\n                    })}\n                  </CFormSelect>\n                  <CFormLabel htmlFor=\"floatingBarangay\">Barangay</CFormLabel>\n                </CFormFloating>\n              </CCol>\n            </CForm>\n          </CModalBody>\n          <CModalFooter>\n            <CButton\n              color=\"dark\"\n              variant=\"ghost\"\n              onClick={() => {\n                this.props.setAddressModal(false, \"close\", \"\", \"\")\n                // this.props.clearMessage();\n              }}\n            >\n              Close\n            </CButton>\n            <CButton\n              color=\"info\"\n              disabled={loading}\n              type=\"submit\"\n              form=\"address-form\"\n            >\n              {loading && <CSpinner size=\"sm\" className=\"ms-1\" />}\n              Save {action === \"Edit\" ? \"Changes\" : \"Address\"}\n            </CButton>\n          </CModalFooter>\n        </CModal>\n      </>\n    )\n  }\n}\nconst mapStateToProps = (state) => {\n  return {\n    modalVisible: state.modalVisibleResponse,\n    messageResponse: state.messageResponse,\n  }\n}\nexport default connect(mapStateToProps, {\n  setAddressModal,\n  saveAddress,\n  clearMessage,\n  updateAddress,\n})(AddressModal)\n","const axios = require('axios');\r\n\r\n// Returns all regions\r\n// @param NULL\r\n\r\nconst regions = async () => {\r\n    try {\r\n        const regions = await axios.get(\r\n            'https://isaacdarcilla.github.io/philippine-addresses/region.json'\r\n        );\r\n        return regions.data.map((region) => {\r\n            return {\r\n                id: region.id,\r\n                psgc_code: region.psgc_code,\r\n                region_name: region.region_name,\r\n                region_code: region.region_code\r\n            };\r\n        })\r\n    } catch (e) {\r\n        return e.message;\r\n    }\r\n};\r\n\r\n// Returns all provinces base on region code parameter.\r\n// @param REGION CODE\r\n\r\nconst provinces = async (code) => {\r\n    try {\r\n        const provinces = await axios.get(\r\n            'https://isaacdarcilla.github.io/philippine-addresses/province.json'\r\n        );\r\n        return provinces.data.filter(province => province.region_code === code)\r\n            .map((filtered) => {\r\n                return {\r\n                    psgc_code: filtered.psgc_code,\r\n                    province_name: filtered.province_name,\r\n                    province_code: filtered.province_code,\r\n                    region_code: filtered.region_code\r\n                };\r\n            });\r\n    } catch (e) {\r\n        return e.message;\r\n    }\r\n};\r\n\r\n// Returns all cities base on province code parameter.\r\n// @param PROVINCE CODE\r\n\r\nconst cities = async (code) => {\r\n    try {\r\n        const cities = await axios.get(\r\n            'https://isaacdarcilla.github.io/philippine-addresses/city.json'\r\n        );\r\n        return cities.data.filter(city => city.province_code === code)\r\n            .map((filtered) => {\r\n                return {\r\n                    city_name: filtered.city_name,\r\n                    city_code: filtered.city_code,\r\n                    province_code: filtered.province_code,\r\n                    region_desc: filtered.region_desc,\r\n                };\r\n            });\r\n    } catch (e) {\r\n        return e.message;\r\n    }\r\n};\r\n\r\n// Returns all barangays base on city code parameter.\r\n// @param CITY CODE\r\n\r\nconst barangays = async (code) => {\r\n    try {\r\n        const barangays = await axios.get(\r\n            'https://isaacdarcilla.github.io/philippine-addresses/barangay.json'\r\n        );\r\n        return barangays.data.filter(barangay => barangay.city_code === code)\r\n            .map((filtered) => {\r\n                return {\r\n                    brgy_name: filtered.brgy_name,\r\n                    brgy_code: filtered.brgy_code,\r\n                    province_code: filtered.province_code,\r\n                    region_code: filtered.region_code,\r\n                };\r\n            });\r\n    } catch (e) {\r\n        return e.message;\r\n    }\r\n};\r\n\r\nmodule.exports = { regions, provinces, cities, barangays };"],"sourceRoot":""}