{"version":3,"sources":["views/common/cart/customerAddress/CustomerAddress.js","service/apiActions/modalAction/modalAction.js","service/restAPI/AddressApiService.js","service/apiActions/addressAction/addressAction.js","components/modals/address/AddressModal.js","../node_modules/select-philippines-address/index.js"],"names":["CustomerAddress","Component","state","message","action","addresses","addressId","visible","isCart","retreiveAddressResponse","this","props","getAdress","manageAddressResponse","prevProps","prevState","addressResponse","status","data","setState","manageModalVisible","modalVisible","handleOnChange","event","value","target","checkValueOnChange","componentDidMount","userResponse","isLoggedIn","history","push","config","api","private","prefixFrontendUrl","componentDidUpdate","render","cursorStyle","cursor","shape","color","variant","className","onClick","setAddressModal","size","style","marginLeft","map","address","index","firstName","lastName","phoneNumber","street","barangay","province","region","city","postalCode","checked","getValue","id","md","type","name","defaultChecked","undefined","onChange","fontStyle","role","connect","messageResponse","modalVisibleResponse","clearMessage","setProductModal","icon","async","dispatch","SET_PRODUCTEDITMODAL_VISIBILIT","payload","setProductDetailsModal","product","SET_PRODUCT_DETAILS_MODAL","editProductModal","updateProduct","EDIT_PRODUCT_MODAL","setAlertModal","alert","module","ALERT_MODAL","setAlertBanModal","ALERT_BAN_MODAL","setStoreModal","storeInfo","UDPATE_STORE_INFORMATION","addBrandModal","branch","ADD_BRAND_MODAL","brand","addCategoryModal","category","ADD_CATEGORY_MODAL","addAccountModal","employee","ADD_EMPLOYEE_MODAL","changePasswordModal","CHANGE_PASSWORD_MODAL","setLoginModal","LOGIN_MODAL","SET_ADDRESS_MODAL","setSupplierModal","supplier","SET_SUPPLIER_MODAL","setSupplyModal","supply","SET_SUPPLY_MODAL","setScanModal","SET_SCAN_MODAL","setPromoModal","promo","SET_PROMO_MODAL","setTermAndConditionModal","termsAndCondition","SET_TERMS_AND_CONDITION_MODAL","setCarouselModal","carousel","SET_CAROULSE_MDOAL","getAddresses","axios","get","headers","authHeader","updateAddress","update","saveAddress","post","AddressApiService","then","response","GET_ADDRESSES","Promise","resolve","error","errorMessage","toString","code","SET_MESSAGE","reject","console","log","SAVE_ADDRESS","AddressModal","addressStates","loading","regionsData","provincesData","citiesData","baranggaysData","baranggayId","cityId","provinceId","regionId","handleOnSubmit","currentTarget","checkValidity","preventDefault","stopPropagation","handleSaveAddress","onResetValue","catch","onRegionChanged","provinces","dt","province_name","province_code","onProvinceChanged","cities","city_name","city_code","onCityChanged","barangays","brgy_name","brgy_code","onBaranggayChanged","regions","region_name","region_code","prevPros","onDismiss","onSubmit","placeholder","required","htmlFor","pattern","disabled","form","require","exports","psgc_code","e","filter","filtered","region_desc"],"mappings":"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","file":"static/js/36.556c4d9f.chunk.js","sourcesContent":["import React, { Component } from \"react\"\nimport {\n  CButton,\n  CRow,\n  CCol,\n  CCard,\n  CCardTitle,\n  CFormCheck,\n  CCardBody,\n  CAlert,\n} from \"@coreui/react\"\n\nimport { connect } from \"react-redux\"\n//icons\nimport * as FaIcons from \"react-icons/fa\"\n// modal\nimport AddressModal from \"src/components/modals/address/AddressModal\"\n//action\nimport { getAdress } from \"src/service/apiActions/addressAction/addressAction\"\nimport { clearMessage } from \"src/service/apiActions/messageAction/messageAction\"\nimport { setAddressModal } from \"src/service/apiActions/modalAction/modalAction\"\n//history\nimport { history } from \"src/_helper/history\"\nimport config from \"../../../../config\"\n\nexport class CustomerAddress extends Component {\n  state = {\n    message: \"\",\n    action: \"\",\n    addresses: [],\n    addressId: \"\",\n    visible: false,\n    isCart: false\n  }\n\n  componentDidMount() {\n    if (!this.props.userResponse.isLoggedIn) {\n      history.push(config.api.private.prefixFrontendUrl + \"/login\")\n    } else {\n      this.retreiveAddressResponse()\n    }\n  }\n\n  retreiveAddressResponse = () => {\n    this.props.getAdress()\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    this.manageAddressResponse(prevProps, prevState)\n    this.manageModalVisible(prevProps, prevState)\n  }\n  manageAddressResponse = (prevProps, prevState) => {\n    if (prevProps.addressResponse !== this.props.addressResponse) {\n      let { action, status, data } = this.props.addressResponse\n      if (action === \"GET_ADDRESSES\" && status === 200) {\n        this.setState({\n          addresses: data.addresses,\n        })\n      }\n    }\n  }\n  manageModalVisible = (prevProps, prevState) => {\n    if (prevProps.modalVisible !== this.props.modalVisible) {\n      let { action } = this.props.modalVisible\n      if (action === \"close\") {\n        this.retreiveAddressResponse()\n      }\n    }\n  }\n  handleOnChange = (event) => {\n    let value = event.target.value\n    this.setState({\n      addressId: value,\n    })\n    this.props.checkValueOnChange(value)\n  }\n\n  render() {\n    let { message, addresses, visible, isCart } = this.state\n    const cursorStyle = {\n      cursor: \"pointer\",\n    }\n    return (\n      <>\n        <AddressModal />\n        <CButton\n          shape=\"rounded-pill\"\n          color=\"primary\"\n          variant=\"ghost\"\n          className=\"d-flex justify-content-center align-items-center mb-3\"\n          onClick={() =>\n            this.props.setAddressModal(\n              !visible,\n              \"Add\",\n              \"\",\n              <FaIcons.FaPlus size={20} className=\"me-2\" />,\n            )\n          }\n        >\n          <FaIcons.FaPlus size={20} />\n          <span style={{ marginLeft: \"10px\" }}>Add Address</span>\n        </CButton>\n        <CRow>\n          {addresses.map((address, index) => {\n            const {\n              firstName,\n              lastName,\n              phoneNumber,\n              street,\n              barangay,\n              province,\n              region,\n              city,\n              postalCode } = address;\n\n            let checked = this.props.getValue == address.id\n            return (\n              <CCol key={index} md={12} className=\"mb-3\">\n                <CCard\n                  className={\n                    checked ? \"border-envelope shadow\" : \"border-envelope\"\n                  }\n                >\n                  <CCardBody className=\"p-3 \">\n                    <div className=\"d-flex align-items-center justify-content-start\">\n                      <CFormCheck\n                        type=\"radio\"\n                        name=\"check\"\n                        id={\"address\" + address.id}\n                        style={cursorStyle}\n                        value={address.id}\n                        defaultChecked={\n                          this.props.getValue !== undefined ? checked : false\n                        }\n                        onChange={this.handleOnChange}\n                      />\n\n                      <CCardTitle className=\"ps-4\">\n                        {address.firstName + \" \" + address.lastName}\n                      </CCardTitle>\n                    </div>\n                    <div className=\"ps-5\">\n                      {street + \", \" + barangay + \", \" + city + \", \" + province + \", \" + region}\n                    </div>\n                  </CCardBody>\n                </CCard>\n              </CCol>\n            )\n          })}\n          {isCart &&\n            <CCol className=\"m-3 text-center\" style={{ fontStyle: \"italic\" }}>\n              <CAlert color=\"warning\">\n                To Proceed to the next step Select or Add your Address Information\n              </CAlert>\n            </CCol>\n          }\n        </CRow>\n        {message && (\n          <div className=\"form-group d-flex justify-content-center align-items-center\">\n            <div className=\"alert alert-danger\" role=\"alert\">\n              {message}\n            </div>\n          </div>\n        )}\n      </>\n    )\n  }\n}\nconst mapStateToProps = (state) => {\n  return {\n    addressResponse: state.addressResponse,\n    userResponse: state.userResponse,\n    messageResponse: state.messageResponse,\n    modalVisible: state.modalVisibleResponse,\n  }\n}\nexport default connect(mapStateToProps, {\n  getAdress,\n  clearMessage,\n  setAddressModal,\n})(CustomerAddress)\n","import {\n  ADD_BRANCH_MODAL,\n  ALERT_MODAL,\n  EDIT_PRODUCT_MODAL,\n  SET_PRODUCTEDITMODAL_VISIBILIT,\n  ADD_BRAND_MODAL,\n  ADD_CATEGORY_MODAL,\n  ADD_EMPLOYEE_MODAL,\n  SET_PRODUCT_DETAILS_MODAL,\n  LOGIN_MODAL,\n  SET_ADDRESS_MODAL,\n  SET_SUPPLIER_MODAL,\n  SET_SUPPLY_MODAL,\n  SET_SCAN_MODAL,\n  SET_PROMO_MODAL,\n  ALERT_BAN_MODAL,\n  CHANGE_PASSWORD_MODAL,\n  UDPATE_STORE_INFORMATION,\n  SET_TERMS_AND_CONDITION_MODAL,\n  SET_CAROULSE_MDOAL,\n} from \"src/service/redux/constants\"\n\nexport const setProductModal = (visible, action, icon) => async (dispatch) => {\n  dispatch({\n    type: SET_PRODUCTEDITMODAL_VISIBILIT,\n    payload: {\n      status: 200,\n      data: {\n        visible: visible,\n        action: action,\n        icon: icon,\n      },\n    },\n  })\n}\nexport const setProductDetailsModal =\n  (visible, action, product) => async (dispatch) => {\n    dispatch({\n      type: SET_PRODUCT_DETAILS_MODAL,\n      payload: {\n        status: 200,\n        data: {\n          visible: visible,\n          action: action,\n          product: product,\n        },\n      },\n    })\n  }\nexport const editProductModal =\n  (visible, action, updateProduct, icon) => async (dispatch) => {\n    dispatch({\n      type: EDIT_PRODUCT_MODAL,\n      payload: {\n        status: 200,\n        data: {\n          visible: visible,\n          action: action,\n          product: updateProduct,\n          icon: icon,\n        },\n      },\n    })\n  }\nexport const setAlertModal =\n  (alert, action, module, id) => async (dispatch) => {\n    dispatch({\n      type: ALERT_MODAL,\n      payload: {\n        action: action,\n        module: module,\n        alert: alert,\n        data: {\n          id: id,\n        },\n      },\n    })\n  }\nexport const setAlertBanModal =\n  (alert, action, module, id) => async (dispatch) => {\n    dispatch({\n      type: ALERT_BAN_MODAL,\n      payload: {\n        action: action,\n        module: module,\n        alert: alert,\n        data: {\n          id: id,\n        },\n      },\n    })\n  }\nexport const setStoreModal =\n  (visible, action, storeInfo, icon) => async (dispatch) => {\n    dispatch({\n      type: UDPATE_STORE_INFORMATION,\n      payload: {\n        status: 200,\n        data: {\n          visible: visible,\n          action: action,\n          storeInfo: storeInfo,\n          icon: icon,\n        },\n      },\n    })\n  }\n\nexport const addBrandModal =\n  (visible, action, branch, icon) => async (dispatch) => {\n    dispatch({\n      type: ADD_BRAND_MODAL,\n      payload: {\n        status: 200,\n        data: {\n          visible: visible,\n          action: action,\n          brand: branch,\n          icon: icon,\n        },\n      },\n    })\n  }\n\nexport const addCategoryModal =\n  (visible, action, category, icon) => async (dispatch) => {\n    dispatch({\n      type: ADD_CATEGORY_MODAL,\n      payload: {\n        status: 200,\n        data: {\n          visible: visible,\n          action: action,\n          category: category,\n          icon: icon,\n        },\n      },\n    })\n  }\n\nexport const addAccountModal =\n  (visible, action, employee, icon) => async (dispatch) => {\n    dispatch({\n      type: ADD_EMPLOYEE_MODAL,\n      payload: {\n        status: 200,\n        data: {\n          visible: visible,\n          action: action,\n          employee: employee,\n          icon: icon,\n        },\n      },\n    })\n  }\nexport const changePasswordModal =\n  (visible, action, employee, icon) => async (dispatch) => {\n    dispatch({\n      type: CHANGE_PASSWORD_MODAL,\n      payload: {\n        status: 200,\n        data: {\n          visible: visible,\n          action: action,\n          employee: employee,\n          icon: icon,\n        },\n      },\n    })\n  }\nexport const setLoginModal = (visible, action) => async (dispatch) => {\n  dispatch({\n    type: LOGIN_MODAL,\n    payload: {\n      data: {\n        visible: visible,\n        action: action,\n      },\n    },\n  })\n}\n\nexport const setAddressModal =\n  (visible, action, address, icon) => async (dispatch) => {\n    dispatch({\n      type: SET_ADDRESS_MODAL,\n      payload: {\n        data: {\n          visible: visible,\n          action: action,\n          address: address,\n          icon: icon,\n        },\n      },\n    })\n  }\n\nexport const setSupplierModal =\n  (visible, action, supplier, icon) => async (dispatch) => {\n    dispatch({\n      type: SET_SUPPLIER_MODAL,\n      payload: {\n        action: action,\n        data: {\n          visible: visible,\n          icon: icon,\n          supplier: supplier,\n        },\n      },\n    })\n  }\nexport const setSupplyModal =\n  (visible, action, supply, icon) => async (dispatch) => {\n    dispatch({\n      type: SET_SUPPLY_MODAL,\n      payload: {\n        action: action,\n        data: {\n          visible: visible,\n          icon: icon,\n          supply: supply,\n        },\n      },\n    })\n  }\n\nexport const setScanModal = (visible, action) => async (dispatch) => {\n  dispatch({\n    type: SET_SCAN_MODAL,\n    payload: {\n      action: action,\n      data: {\n        visible: visible,\n      },\n    },\n  })\n}\nexport const setPromoModal =\n  (visible, action, promo, icon) => async (dispatch) => {\n    dispatch({\n      type: SET_PROMO_MODAL,\n      payload: {\n        action: action,\n        data: {\n          visible: visible,\n          icon: icon,\n          promo: promo,\n        },\n      },\n    })\n  }\nexport const setTermAndConditionModal =\n  (visible, action, termsAndCondition, icon) => async (dispatch) => {\n    dispatch({\n      type: SET_TERMS_AND_CONDITION_MODAL,\n      payload: {\n        status: 200,\n        data: {\n          visible: visible,\n          action: action,\n          termsAndCondition: termsAndCondition,\n          icon: icon,\n        },\n      },\n    })\n  }\n  export const setCarouselModal =\n    (visible, action, carousel, icon) => async (dispatch) => {\n      dispatch({\n        type: SET_CAROULSE_MDOAL,\n        payload: {\n          status: 200,\n          data: {\n            visible: visible,\n            action: action,\n            carousel: carousel,\n            icon: icon,\n          },\n        },\n      })\n    }","import authHeader from '../auth/authHeader';\nimport axios from './RestApi'\n\nexport class AddressApiService {\n    getAddresses() {\n        return axios.get(\"/addresses\", {\n            headers: authHeader()\n        })\n    }\n    updateAddress(id, address) {\n        return axios.update(\"/addresses/update/\" + id, {\n            address\n        }, {\n            headers: authHeader()\n        })\n    }\n    saveAddress(address) {\n        return axios.post(\"/addresses/save\", {\n            firstName: address.firstName,\n            lastName: address.lastName,\n            phoneNumber: address.phoneNumber,\n            region: address.region,\n            city: address.city,\n            province: address.province,\n            barangay: address.barangay,\n            street: address.street,\n            postalCode: address.postalCode\n        }, {\n            headers: authHeader()\n        })\n    }\n}\n\nexport default new AddressApiService();","import { SET_MESSAGE } from \"src/constants/userConstants\";\nimport { GET_ADDRESSES, SAVE_ADDRESS } from \"src/service/redux/constants\";\nimport AddressApiService from \"src/service/restAPI/AddressApiService\"\n\nexport const getAdress = () => async (dispatch) => {\n    return AddressApiService.getAddresses().then(\n        (response) => {\n            dispatch({\n                type: GET_ADDRESSES,\n                payload: {\n                    status: 200,\n                    action: \"GET_ADDRESSES\",\n                    data: {\n                        addresses: response.data\n                    }\n                }\n            })\n            return Promise.resolve();\n        },\n        (error) => {\n            const errorMessage =\n                (error.response &&\n                    error.response.data &&\n                    error.response.data.message) ||\n                error.message ||\n                error.toString();\n\n            const status = (error.response &&\n                error.response.data &&\n                error.response.data.code) ||\n                error.toString();\n\n            dispatch({\n                type: SET_MESSAGE,\n                payload: {\n                    status: status,\n                    data: {\n                        message: errorMessage\n                    }\n                }\n            })\n            return Promise.reject();\n        }\n    )\n}\n\nexport const saveAddress = (address) => async (dispatch) => {\n    console.log(address)\n    return AddressApiService.saveAddress(address).then(\n        (response) => {\n            dispatch({\n                type: SAVE_ADDRESS,\n                payload: {\n                    status: 200,\n                    action: \"SAVE_ADDRESS\",\n                    data: {\n                    }\n                }\n            })\n            dispatch({\n                type: SET_MESSAGE,\n                payload: {\n                    status: 200,\n                    data: {\n                        message: \"Address Successfully Saved\"\n                    }\n                }\n            })\n            return Promise.resolve();\n        },\n        (error) => {\n            const errorMessage =\n                (error.response &&\n                    error.response.data &&\n                    error.response.data.message) ||\n                error.message ||\n                error.toString();\n\n            const status = (error.response &&\n                error.response.data &&\n                error.response.data.code) ||\n                error.toString();\n\n            dispatch({\n                type: SET_MESSAGE,\n                payload: {\n                    status: status,\n                    data: {\n                        message: errorMessage\n                    }\n                }\n            })\n            return Promise.reject();\n        }\n    )\n}","import React, { Component } from \"react\"\nimport {\n  CButton,\n  // CRow,\n  CCol,\n  CFormFloating,\n  CFormLabel,\n  CFormControl,\n  CForm,\n  CModal,\n  CModalBody,\n  CModalHeader,\n  CModalTitle,\n  CModalFooter,\n  CSpinner,\n  CFormSelect\n} from \"@coreui/react\"\nimport { connect } from \"react-redux\"\n//action\nimport { setAddressModal } from \"src/service/apiActions/modalAction/modalAction\"\nimport { saveAddress } from \"src/service/apiActions/addressAction/addressAction\"\nimport { clearMessage } from \"src/service/apiActions/messageAction/messageAction\"\n\nimport { regions, provinces, cities, barangays } from 'select-philippines-address';\n\nexport class AddressModal extends Component {\n  state = {\n    visible: false,\n    icon: \"\",\n    address: this.addressStates,\n    loading: false,\n    action: \"\",\n    regionsData: [],\n    provincesData: [],\n    citiesData: [],\n    baranggaysData: [],\n    baranggayId: \"\",\n    cityId: \"\",\n    provinceId: \"\",\n    regionId: \"\"\n  }\n\n  addressStates = {\n    firstName: \"\",\n    lastName: \"\",\n    phoneNumber: \"\",\n    region: \"\",\n    city: \"\",\n    province: \"\",\n    barangay: \"\",\n    street: \"\",\n    postalCode: \"\",\n  }\n\n  componentDidMount() {\n    regions().then((regions) => {\n      let regionsData = [];\n      regions.map((region) => {\n        regionsData[region.id] = {\n          name: region.region_name,\n          code: region.region_code\n        };\n      })\n      this.setState({\n        regionsData: regionsData\n      })\n    });\n  }\n\n  componentDidUpdate(prevPros, prevState) {\n    this.manageModalVisible(prevPros, prevState);\n  }\n\n  manageModalVisible = (prevProps, prevState) => {\n    if (prevProps.modalVisible !== this.props.modalVisible) {\n      let { visible, action, address, icon } = this.props.modalVisible\n      if (action === \"Add\") {\n        this.setState({\n          visible: visible,\n          icon: icon,\n          action: action,\n        })\n      } else if (action === \"Edit\") {\n        this.setState({\n          visible: visible,\n          icon: icon,\n          action: action,\n        })\n      } else {\n        this.setState({\n          visible: visible,\n          icon: \"\",\n          action: \"\",\n        })\n      }\n    }\n  }\n\n  handleOnChange = (event) => {\n    this.setState({\n      [event.target.name]: event.target.value,\n    })\n  }\n\n  handleOnSubmit = (event) => {\n    const form = event.currentTarget\n    if (form.checkValidity() === false) {\n      event.preventDefault()\n      event.stopPropagation()\n    }\n    this.setState({\n      loading: true,\n    })\n    let {\n      action,\n      firstName,\n      lastName,\n      phoneNumber,\n      region,\n      city,\n      province,\n      barangay,\n      street,\n      postalCode,\n    } = this.state\n\n    let address = {\n      firstName: firstName,\n      lastName: lastName,\n      phoneNumber: phoneNumber,\n      region: region,\n      city: city,\n      province: province,\n      barangay: barangay,\n      street: street,\n      postalCode: postalCode,\n    }\n    if (action === \"Add\") {\n      this.handleSaveAddress(address)\n    } else if (action === \"Edit\") {\n    }\n  }\n\n  onResetValue = () => {\n    this.setState(() => this.addressStates)\n  }\n\n  handleSaveAddress = (address) => {\n    this.props\n      .saveAddress(address)\n      .then(() => {\n        let { status } = this.props.messageResponse\n        if (status === 200) {\n          this.setState({\n            loading: false,\n          })\n          this.onResetValue()\n        }\n      })\n      .catch(() => {\n        let { status, data } = this.props.messageResponse\n        this.setState({\n          loading: false,\n        })\n      })\n  }\n\n\n  onRegionChanged = (event) => {\n    const regionsData = this.state.regionsData;\n\n\n    if (event.target.value == \"\") {\n      return;\n    }\n\n    const data = regionsData[event.target.value];\n\n    this.setState({\n      regionId: event.target.value,\n      region: data.name\n    })\n\n    provinces(data.code).then((province) => {\n      let provincesData = [];\n      province.map((dt, index) => {\n        provincesData[index] = {\n          name: dt.province_name,\n          code: dt.province_code\n        };\n      })\n      this.setState({\n        provincesData: provincesData\n      })\n    });\n  }\n\n  onProvinceChanged = (event) => {\n    const provincesData = this.state.provincesData;\n\n    if (event.target.value == \"\") {\n      return;\n    }\n\n    const data = provincesData[event.target.value];\n\n    this.setState({\n      provinceId: event.target.value,\n      province: data.name\n    })\n\n\n    cities(data.code).then((city) => {\n      let citiesData = [];\n      city.map((dt, index) => {\n        citiesData[index] = {\n          name: dt.city_name,\n          code: dt.city_code\n        };\n      })\n      this.setState({\n        citiesData: citiesData\n      })\n    });\n  }\n\n  onCityChanged = (event) => {\n    const citiesData = this.state.citiesData;\n\n    if (event.target.value == \"\") {\n      return;\n    }\n    const data = citiesData[event.target.value];\n\n    this.setState({\n      cityId: event.target.value,\n      city: data.name\n    })\n\n    barangays(data.code).then((barangay) => {\n      let baranggaysData = [];\n      barangay.map((dt, index) => {\n        baranggaysData[index] = {\n          name: dt.brgy_name,\n          code: dt.brgy_code\n        };\n      })\n      this.setState({\n        baranggaysData: baranggaysData\n      })\n    });\n  }\n\n  onBaranggayChanged = (event) => {\n    const baranggaysData = this.state.baranggaysData;\n\n    if (event.target.value == \"\") {\n      return;\n    }\n    const data = baranggaysData[event.target.value];\n\n    this.setState({\n      baranggayId: event.target.value,\n      barangay: data.name\n    })\n  }\n\n  render() {\n    let {\n      visible,\n      firstName,\n      lastName,\n      phoneNumber,\n      region,\n      city,\n      province,\n      barangay,\n      street,\n      postalCode,\n      loading,\n      action,\n      regionsData,\n      provincesData,\n      citiesData,\n      baranggaysData,\n      baranggayId,\n      cityId,\n      regionId,\n      provinceId,\n    } = this.state;\n    return (\n      <>\n\n        <CModal size=\"lg\" visible={visible}>\n          <CModalHeader\n            onDismiss={() => this.props.setAddressModal(false, \"close\", \"\", \"\")}\n          >\n            <CModalTitle>Customer Address</CModalTitle>\n          </CModalHeader>\n          <CModalBody>\n            <CForm\n\n              className=\"row g-3 needs-validation\"\n              id=\"address-form\"\n              onSubmit={this.handleOnSubmit}\n            >\n              <CCol md={6}>\n                <CFormFloating className=\"mb-3\">\n                  <CFormControl\n                    name=\"firstName\"\n                    type=\"text\"\n                    id=\"floatingFirstName\"\n                    placeholder=\"First name\"\n                    value={firstName}\n                    onChange={this.handleOnChange}\n                    required\n                  />\n                  <CFormLabel htmlFor=\"floatingFirstName\">\n                    First name\n                  </CFormLabel>\n                </CFormFloating>\n              </CCol>\n              <CCol md={6}>\n                <CFormFloating>\n                  <CFormControl\n                    name=\"lastName\"\n                    type=\"text\"\n                    id=\"floatingLastName\"\n                    placeholder=\"Last name\"\n                    value={lastName}\n                    onChange={this.handleOnChange}\n                    required\n                  />\n                  <CFormLabel htmlFor=\"floatingLastName\">Last name</CFormLabel>\n                </CFormFloating>\n              </CCol>\n              <CCol md={6}>\n                <CFormFloating>\n                  <CFormControl\n                    name=\"phoneNumber\"\n                    type=\"tel\"\n                    required\n                    pattern={\"^(09|\\\\+639)\\\\d{9}$\"}\n                    id=\"floatingPhoneNumber\"\n                    placeholder=\"Last name\"\n                    value={phoneNumber}\n                    onChange={this.handleOnChange}\n                  />\n                  <CFormLabel htmlFor=\"floatingPhoneNumber\">\n                    Phone number\n                  </CFormLabel>\n                </CFormFloating>\n              </CCol>\n              <CCol md={6}>\n\n              </CCol>\n              <CCol md={12}>\n                <CFormFloating>\n                  <CFormControl\n                    name=\"street\"\n                    type=\"text\"\n                    id=\"floatingStreet\"\n                    placeholder=\"Street\"\n                    value={street}\n                    onChange={this.handleOnChange}\n                    required\n                  />\n                  <CFormLabel htmlFor=\"floatingStreet\">Street</CFormLabel>\n                </CFormFloating>\n              </CCol>\n              <CCol md={6}>\n                <CFormFloating className=\"mb-3\">\n                  <CFormSelect\n                    name=\"region\"\n                    type=\"text\"\n                    id=\"floatingRegion\"\n                    placeholder=\"Region\"\n                    value={regionId}\n                    onChange={this.onRegionChanged}\n                    required\n                  >\n                    <option value=\"\" disabled>-- Choose Region --</option>\n                    {regionsData.map((region, index) => {\n                      return <option value={index} key={index}>{region.name}</option>\n                    })}\n                  </CFormSelect>\n                  <CFormLabel htmlFor=\"floatingRegion\">Region</CFormLabel>\n                </CFormFloating>\n              </CCol>\n              <CCol md={6}>\n                <CFormFloating>\n                  <CFormSelect\n                    name=\"province\"\n                    type=\"text\"\n                    id=\"floatingProvince\"\n                    placeholder=\"Province\"\n                    value={provinceId}\n                    onChange={this.onProvinceChanged}\n                    required\n                  >\n                    <option value=\"\" disabled>-- Choose Province --</option>\n                    {provincesData.map((region, index) => {\n                      return <option value={index} key={region.name}>{region.name}</option>\n                    })}\n                  </CFormSelect>\n                  <CFormLabel htmlFor=\"floatingProvince\">Province</CFormLabel>\n                </CFormFloating>\n              </CCol>\n              <CCol md={6}>\n                <CFormFloating>\n                  <CFormSelect\n                    name=\"city\"\n                    type=\"text\"\n                    id=\"floatingCity\"\n                    placeholder=\"City\"\n                    value={cityId}\n                    onChange={this.onCityChanged}\n                    required\n                  >\n                    <option value=\"\" disabled>-- Choose City --</option>\n                    {citiesData.map((region, index) => {\n                      return <option value={index} key={index}>{region.name}</option>\n                    })}\n                  </CFormSelect>\n                  <CFormLabel htmlFor=\"floatingCity\">City</CFormLabel>\n                </CFormFloating>\n              </CCol>\n              <CCol md={6}>\n                <CFormFloating>\n                  <CFormSelect\n                    name=\"barangay\"\n                    type=\"text\"\n                    id=\"floatingBarangay\"\n                    placeholder=\"Barangay\"\n                    value={baranggayId}\n                    onChange={this.onBaranggayChanged}\n                    required\n                  >\n                    <option value=\"\" disabled>-- Choose Barangay --</option>\n                    {baranggaysData.map((region, index) => {\n                      return <option value={index} key={index}>{region.name}</option>\n                    })}\n                  </CFormSelect>\n                  <CFormLabel htmlFor=\"floatingBarangay\">Barangay</CFormLabel>\n                </CFormFloating>\n              </CCol>\n              {/* <CCol md={3}>\n                <CFormFloating>\n                  <CFormControl\n                    name=\"postalCode\"\n                    type=\"number\"\n                    id=\"floatingPostalCode\"\n                    placeholder=\"Postal Code\"\n                    value={postalCode}\n                    onChange={this.handleOnChange}\n                    required\n                  />\n                  <CFormLabel htmlFor=\"floatingPostalCode\">\n                    Postal code\n                  </CFormLabel>\n                </CFormFloating>\n              </CCol> */}\n            </CForm>\n          </CModalBody>\n          <CModalFooter>\n            <CButton\n              color=\"dark\"\n              variant=\"ghost\"\n              onClick={() => {\n                this.props.setAddressModal(false, \"close\", \"\", \"\")\n                // this.props.clearMessage();\n              }}\n            >\n              Close\n            </CButton>\n            <CButton\n              color=\"info\"\n              disabled={loading}\n              type=\"submit\"\n              form=\"address-form\"\n            >\n              {loading && <CSpinner size=\"sm\" className=\"ms-1\" />}\n              Save {action === \"Edit\" ? \"Changes\" : \"Address\"}\n            </CButton>\n          </CModalFooter>\n        </CModal>\n      </>\n    )\n  }\n}\nconst mapStateToProps = (state) => {\n  return {\n    modalVisible: state.modalVisibleResponse,\n    messageResponse: state.messageResponse,\n  }\n}\nexport default connect(mapStateToProps, {\n  setAddressModal,\n  saveAddress,\n  clearMessage,\n})(AddressModal)\n","const axios = require('axios');\r\n\r\n// Returns all regions\r\n// @param NULL\r\n\r\nconst regions = async () => {\r\n    try {\r\n        const regions = await axios.get(\r\n            'https://isaacdarcilla.github.io/philippine-addresses/region.json'\r\n        );\r\n        return regions.data.map((region) => {\r\n            return {\r\n                id: region.id,\r\n                psgc_code: region.psgc_code,\r\n                region_name: region.region_name,\r\n                region_code: region.region_code\r\n            };\r\n        })\r\n    } catch (e) {\r\n        return e.message;\r\n    }\r\n};\r\n\r\n// Returns all provinces base on region code parameter.\r\n// @param REGION CODE\r\n\r\nconst provinces = async (code) => {\r\n    try {\r\n        const provinces = await axios.get(\r\n            'https://isaacdarcilla.github.io/philippine-addresses/province.json'\r\n        );\r\n        return provinces.data.filter(province => province.region_code === code)\r\n            .map((filtered) => {\r\n                return {\r\n                    psgc_code: filtered.psgc_code,\r\n                    province_name: filtered.province_name,\r\n                    province_code: filtered.province_code,\r\n                    region_code: filtered.region_code\r\n                };\r\n            });\r\n    } catch (e) {\r\n        return e.message;\r\n    }\r\n};\r\n\r\n// Returns all cities base on province code parameter.\r\n// @param PROVINCE CODE\r\n\r\nconst cities = async (code) => {\r\n    try {\r\n        const cities = await axios.get(\r\n            'https://isaacdarcilla.github.io/philippine-addresses/city.json'\r\n        );\r\n        return cities.data.filter(city => city.province_code === code)\r\n            .map((filtered) => {\r\n                return {\r\n                    city_name: filtered.city_name,\r\n                    city_code: filtered.city_code,\r\n                    province_code: filtered.province_code,\r\n                    region_desc: filtered.region_desc,\r\n                };\r\n            });\r\n    } catch (e) {\r\n        return e.message;\r\n    }\r\n};\r\n\r\n// Returns all barangays base on city code parameter.\r\n// @param CITY CODE\r\n\r\nconst barangays = async (code) => {\r\n    try {\r\n        const barangays = await axios.get(\r\n            'https://isaacdarcilla.github.io/philippine-addresses/barangay.json'\r\n        );\r\n        return barangays.data.filter(barangay => barangay.city_code === code)\r\n            .map((filtered) => {\r\n                return {\r\n                    brgy_name: filtered.brgy_name,\r\n                    brgy_code: filtered.brgy_code,\r\n                    province_code: filtered.province_code,\r\n                    region_code: filtered.region_code,\r\n                };\r\n            });\r\n    } catch (e) {\r\n        return e.message;\r\n    }\r\n};\r\n\r\nmodule.exports = { regions, provinces, cities, barangays };"],"sourceRoot":""}