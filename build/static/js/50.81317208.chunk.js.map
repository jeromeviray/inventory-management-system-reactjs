{"version":3,"sources":["views/common/cart/customerAddress/CustomerAddress.js","components/modals/address/AddressModal.js","../node_modules/select-philippines-address/index.js"],"names":["CustomerAddress","Component","state","message","action","addresses","addressId","visible","isCart","retreiveAddressResponse","this","props","getAdress","manageAddressResponse","prevProps","prevState","addressResponse","status","data","setState","manageModalVisible","modalVisible","handleOnChange","event","value","target","checkValueOnChange","componentDidMount","userResponse","isLoggedIn","history","push","config","api","private","prefixFrontendUrl","componentDidUpdate","render","cursorStyle","cursor","shape","color","variant","className","onClick","setAddressModal","size","style","marginLeft","map","address","index","firstName","lastName","phoneNumber","street","barangay","province","region","city","postalCode","id","checked","getValue","md","type","name","defaultChecked","undefined","onChange","setAlertModal","fontStyle","role","connect","messageResponse","modalVisibleResponse","clearMessage","AddressModal","icon","addressStates","loading","regionsData","provincesData","citiesData","baranggaysData","baranggayId","cityId","provinceId","regionId","handleOnEditSetState","onResetValue","regionIndex","findIndex","item","getProvince","code","provinces","then","dt","province_name","province_code","provinceIndex","getCity","cities","city_name","city_code","cityIndex","getBarangay","console","log","barangays","brgy_name","brgy_code","barangayIndex","handleOnSubmit","preventDefault","currentTarget","checkValidity","stopPropagation","handleSaveAddress","handleUpdateAddress","saveAddress","catch","updateAddress","onRegionChanged","onProvinceChanged","onCityChanged","onBaranggayChanged","regions","region_name","region_code","prevPros","onDismiss","onSubmit","placeholder","required","htmlFor","pattern","disabled","form","axios","require","module","exports","async","get","psgc_code","e","filter","filtered","region_desc"],"mappings":"sKAAA,0KA4BO,MAAMA,UAAwBC,YAAW,eAAD,oBAC7CC,MAAQ,CACNC,QAAS,GACTC,OAAQ,GACRC,UAAW,GACXC,UAAW,GACXC,SAAS,EACTC,QAAQ,GAPmC,KAkB7CC,wBAA0B,KACxBC,KAAKC,MAAMC,aAnBgC,KA0B7CC,sBAAwB,CAACC,EAAWC,KAClC,GAAID,EAAUE,kBAAoBN,KAAKC,MAAMK,gBAAiB,CAC5D,IAAI,OAAEZ,EAAF,OAAUa,EAAV,KAAkBC,GAASR,KAAKC,MAAMK,gBAC3B,kBAAXZ,GAAyC,MAAXa,GAChCP,KAAKS,SAAS,CACZd,UAAWa,EAAKb,cA/BqB,KAoC7Ce,mBAAqB,CAACN,EAAWC,KAC/B,GAAID,EAAUO,eAAiBX,KAAKC,MAAMU,aAAc,CACtD,IAAI,OAAEjB,GAAWM,KAAKC,MAAMU,aACb,UAAXjB,GACFM,KAAKD,4BAxCkC,KA4C7Ca,eAAkBC,IAChB,IAAIC,EAAQD,EAAME,OAAOD,MACzBd,KAAKS,SAAS,CACZb,UAAWkB,IAEbd,KAAKC,MAAMe,mBAAmBF,IAvChCG,oBACOjB,KAAKC,MAAMiB,aAAaC,WAG3BnB,KAAKD,0BAFLqB,IAAQC,KAAKC,IAAOC,IAAIC,QAAQC,kBAAoB,UAUxDC,mBAAmBtB,EAAWC,GAC5BL,KAAKG,sBAAsBC,EAAWC,GACtCL,KAAKU,mBAAmBN,EAAWC,GA4BrCsB,SACE,IAAI,QAAElC,EAAF,UAAWE,EAAX,QAAsBE,EAAtB,OAA+BC,GAAWE,KAAKR,MACnD,MAAMoC,EAAc,CAClBC,OAAQ,WAEV,OACE,qCACE,cAAC,IAAD,IACA,cAAC,IAAD,IACA,eAAC,IAAD,CACEC,MAAM,eACNC,MAAM,UACNC,QAAQ,QACRC,UAAU,wDACVC,QAAS,IACPlC,KAAKC,MAAMkC,iBACRtC,EACD,MACA,GACA,cAAC,IAAD,CAAgBuC,KAAM,GAAIH,UAAU,UAV1C,UAcE,cAAC,IAAD,CAAgBG,KAAM,KACtB,sBAAMC,MAAO,CAAEC,WAAY,QAA3B,4BAEF,eAAC,KAAD,WACG3C,EAAU4C,KAAI,CAACC,EAASC,KACvB,MAAM,UACJC,EADI,SAEJC,EAFI,YAGJC,EAHI,OAIJC,EAJI,SAKJC,EALI,SAMJC,EANI,OAOJC,EAPI,KAQJC,EARI,WASJC,EATI,GAUJC,GACEX,EAEJ,IAAIY,EAAUpD,KAAKC,MAAMoD,UAAYb,EAAQW,GAC7C,OACE,cAAC,IAAD,CAAkBG,GAAI,GAAIrB,UAAU,OAApC,SACE,cAAC,IAAD,CACEA,UACEmB,EAAU,yBAA2B,kBAFzC,SAKE,eAAC,IAAD,CAAWnB,UAAU,OAArB,UACE,qBAAKA,UAAU,kDAAf,SACE,cAAC,IAAD,CACEsB,KAAK,QACLC,KAAK,QACLL,GAAI,UAAYX,EAAQW,GACxBd,MAAOT,EACPd,MAAO0B,EAAQW,GACfM,oBAC0BC,IAAxB1D,KAAKC,MAAMoD,UAAyBD,EAEtCO,SAAU3D,KAAKY,mBAGnB,sBAAKqB,UAAU,qDAAf,UACE,cAAC,IAAD,UAAaS,EAAY,IAAMC,IAC/B,sBAAKV,UAAU,YAAf,UACE,cAAC,IAAD,CACEF,MAAM,OACNC,QAAQ,QACRI,KAAK,KACLF,QAAS,IACPlC,KAAKC,MAAMkC,iBACRtC,EACD,OACA2C,EACA,cAAC,IAAD,CAAgBJ,KAAM,GAAIH,UAAU,UAT1C,SAaE,cAAC,IAAD,CAAgBG,KAAK,SAEvB,cAAC,IAAD,CACEL,MAAM,SACNC,QAAQ,QACRI,KAAK,KACLF,QAAS,IACPlC,KAAKC,MAAM2D,eACR/D,EACD,wBACA,UACAsD,GATN,SAaE,cAAC,IAAD,CAAkBf,KAAK,eAI7B,sBAAKH,UAAU,OAAf,uBAAiCW,KACjC,sBAAKX,UAAU,OAAf,qBACW,IACRY,EACC,KACAC,EACA,KACAG,EACA,KACAF,EACA,KACAC,WAlECP,MAyEd3C,GACC,cAAC,IAAD,CAAMmC,UAAU,kBAAkBI,MAAO,CAAEwB,UAAW,UAAtD,SACE,cAAC,IAAD,CAAQ9B,MAAM,UAAd,qFAOLtC,GACC,qBAAKwC,UAAU,8DAAf,SACE,qBAAKA,UAAU,qBAAqB6B,KAAK,QAAzC,SACGrE,UAgBAsE,uBARUvE,IAChB,CACLc,gBAAiBd,EAAMc,gBACvBY,aAAc1B,EAAM0B,aACpB8C,gBAAiBxE,EAAMwE,gBACvBrD,aAAcnB,EAAMyE,wBAGgB,CACtC/D,cACAgE,iBACA/B,oBACAyB,mBAJaG,CAKZzE,I,iCCrOH,uEAiCO,MAAM6E,UAAqB5E,YAAW,eAAD,oBAC1CC,MAAQ,CACNK,SAAS,EACTuE,KAAM,GACN5B,QAASxC,KAAKqE,cACdC,SAAS,EACT5E,OAAQ,GACR6E,YAAa,GACbC,cAAe,GACfC,WAAY,GACZC,eAAgB,GAChBC,YAAa,GACbC,OAAQ,GACRC,WAAY,GACZC,SAAU,GACV3B,GAAI,IAfoC,KAkB1CkB,cAAgB,CACd3B,UAAW,GACXC,SAAU,GACVC,YAAa,GACbI,OAAQ,GACRC,KAAM,GACNF,SAAU,GACVD,SAAU,GACVD,OAAQ,GACRK,WAAY,IA3B4B,KAiD1CxC,mBAAqB,CAACN,EAAWC,KAC/B,GAAID,EAAUO,eAAiBX,KAAKC,MAAMU,aAAc,CACtD,IAAI,QAAEd,EAAF,OAAWH,EAAX,QAAmB8C,EAAnB,KAA4B4B,GAASpE,KAAKC,MAAMU,aACrC,QAAXjB,EACFM,KAAKS,SAAS,CACZZ,QAASA,EACTuE,KAAMA,EACN1E,OAAQA,IAEU,SAAXA,GACTM,KAAKS,SAAS,CACZZ,QAASA,EACTuE,KAAMA,EACN1E,OAAQA,EACRyD,GAAIX,EAAQW,KAEdnD,KAAK+E,qBAAqBvC,KAE1BxC,KAAKS,SAAS,CACZZ,QAASA,EACTuE,KAAM,GACN1E,OAAQ,GACRoF,SAAU,GACVD,WAAY,GACZD,OAAQ,GACRD,YAAa,KAEf3E,KAAKgF,kBA5E+B,KAgF1CD,qBAAwBvC,IACtB,MAAM,UACJE,EADI,SAEJC,EAFI,YAGJC,EAHI,OAIJI,EAJI,KAKJC,EALI,SAMJF,EANI,SAOJD,EAPI,OAQJD,GACEL,GACE,YAAE+B,GAAgBvE,KAAKR,MACvByF,EAAcV,EAAYW,WAC7BC,GAASA,GAAQA,EAAK3B,OAASR,IAElChD,KAAKoF,YAAYb,EAAYU,GAAaI,KAAMtC,GAEhD/C,KAAKS,SAAS,CACZiC,UAAWA,EACXC,SAAUA,EACVC,YAAaA,EACbI,OAAQA,EACRC,KAAMA,EACNF,SAAUA,EACVD,SAAUA,EACVD,OAAQA,EACRiC,SAAUG,KA1G4B,KA6G1CG,YAAc,CAACC,EAAMtC,KACnBuC,oBAAUD,GAAME,MAAMD,IACpB,IAAId,EAAgB,GACpBc,EAAU/C,KAAI,CAACiD,EAAI/C,KACjB+B,EAAc/B,GAAS,CACrBe,KAAMgC,EAAGC,cACTJ,KAAMG,EAAGE,kBAGb,IAAIC,EAAgBnB,EAAcU,WAC/BC,GAASA,GAAQA,EAAK3B,OAAST,IAElC/C,KAAKS,SAAS,CACZoE,WAAYc,EACZnB,cAAeA,IAEjBxE,KAAK4F,QAAQpB,EAAcmB,GAAeN,UA7HJ,KAgI1CO,QAAWP,IACT,MAAM,KAAEpC,GAASjD,KAAKR,MACtBqG,iBAAOR,GAAME,MAAMJ,IACjB,IAAIV,EAAa,GACjBU,EAAK5C,KAAI,CAACiD,EAAI/C,KACZgC,EAAWhC,GAAS,CAClBe,KAAMgC,EAAGM,UACTT,KAAMG,EAAGO,cAGb,IAAIC,EAAYvB,EAAWS,WAAWC,GAASA,GAAQA,EAAK3B,OAASP,IACrEjD,KAAKS,SAAS,CACZgE,WAAYA,EACZG,OAAQoB,IAEVhG,KAAKiG,YAAYxB,EAAWuB,GAAWX,UA/ID,KAkJ1CY,YAAeZ,IACba,QAAQC,IAAId,GACZ,MAAM,SAAEvC,GAAa9C,KAAKR,MAC1B4G,oBAAUf,GAAME,MAAMJ,IACpB,IAAIT,EAAiB,GACrBS,EAAK5C,KAAI,CAACiD,EAAI/C,KACZiC,EAAejC,GAAS,CACtBe,KAAMgC,EAAGa,UACThB,KAAMG,EAAGc,cAGb,IAAIC,EAAgB7B,EAAeQ,WAChCC,GAASA,GAAQA,EAAK3B,OAASV,IAElC9C,KAAKS,SAAS,CACZiE,eAAgBA,EAChBC,YAAa4B,QAlKuB,KAuK1C3F,eAAkBC,IAChBb,KAAKS,SAAS,CACZ,CAACI,EAAME,OAAOyC,MAAO3C,EAAME,OAAOD,SAzKI,KA6K1C0F,eAAkB3F,IAChBA,EAAM4F,kBAGuB,IADhB5F,EAAM6F,cACVC,iBACP9F,EAAM+F,kBAER5G,KAAKS,SAAS,CACZ6D,SAAS,IAEX,IAAI,OACF5E,EADE,UAEFgD,EAFE,SAGFC,EAHE,YAIFC,EAJE,OAKFI,EALE,KAMFC,EANE,SAOFF,EAPE,SAQFD,EARE,OASFD,EATE,WAUFK,EAVE,GAWFC,GACEnD,KAAKR,MAELgD,EAAU,CACZE,UAAWA,EACXC,SAAUA,EACVC,YAAaA,EACbI,OAAQA,EACRC,KAAMA,EACNF,SAAUA,EACVD,SAAUA,EACVD,OAAQA,EACRK,WAAYA,GAEC,QAAXxD,EACFM,KAAK6G,kBAAkBrE,GACH,SAAX9C,GACTM,KAAK8G,oBAAoB3D,EAAIX,IAnNS,KAuN1CwC,aAAe,KACbhF,KAAKS,UAAS,IAAMT,KAAKqE,iBAxNe,KA2N1CwC,kBAAqBrE,IACnBxC,KAAKC,MACF8G,YAAYvE,GACZ+C,MAAK,KACJ,IAAI,OAAEhF,GAAWP,KAAKC,MAAM+D,gBACb,MAAXzD,IACFP,KAAKS,SAAS,CACZ6D,SAAS,EACTQ,SAAU,GACVD,WAAY,GACZD,OAAQ,GACRD,YAAa,KAEf3E,KAAKgF,eACLhF,KAAKC,MAAMkC,iBAAgB,EAAO,QAAS,GAAI,QAGlD6E,OAAM,KACLhH,KAAKS,SAAS,CACZ6D,SAAS,QA9OyB,KAmP1CwC,oBAAsB,CAAC3D,EAAIX,KACzB0D,QAAQC,IAAIhD,GACZnD,KAAKC,MACFgH,cAAc9D,EAAIX,GAClB+C,MAAK,KACJ,IAAI,OAAEhF,GAAWP,KAAKC,MAAM+D,gBACb,MAAXzD,IACFP,KAAKS,SAAS,CACZ6D,SAAS,EACTQ,SAAU,GACVD,WAAY,GACZD,OAAQ,GACRD,YAAa,KAEf3E,KAAKgF,eACLhF,KAAKC,MAAMkC,iBAAgB,EAAO,QAAS,GAAI,QAGlD6E,OAAM,KACLhH,KAAKS,SAAS,CACZ6D,SAAS,QAvQyB,KA2Q1C4C,gBAAmBrG,IACjB,MAAM0D,EAAcvE,KAAKR,MAAM+E,YAE/B,GAA0B,IAAtB1D,EAAME,OAAOD,MACf,OAGF,MAAMN,EAAO+D,EAAY1D,EAAME,OAAOD,OACtCd,KAAKS,SAAS,CACZqE,SAAUjE,EAAME,OAAOD,MACvBkC,OAAQxC,EAAKgD,OAGf8B,oBAAU9E,EAAK6E,MAAME,MAAMxC,IACzB,IAAIyB,EAAgB,GACpBzB,EAASR,KAAI,CAACiD,EAAI/C,KAChB+B,EAAc/B,GAAS,CACrBe,KAAMgC,EAAGC,cACTJ,KAAMG,EAAGE,kBAGb1F,KAAKS,SAAS,CACZ+D,cAAeA,QAjSqB,KAsS1C2C,kBAAqBtG,IACnB,MAAM2D,EAAgBxE,KAAKR,MAAMgF,cAEjC,GAA0B,IAAtB3D,EAAME,OAAOD,MACf,OAGF,MAAMN,EAAOgE,EAAc3D,EAAME,OAAOD,OAExCd,KAAKS,SAAS,CACZoE,WAAYhE,EAAME,OAAOD,MACzBiC,SAAUvC,EAAKgD,OAGjBqC,iBAAOrF,EAAK6E,MAAME,MAAMtC,IACtB,IAAIwB,EAAa,GACjBxB,EAAKV,KAAI,CAACiD,EAAI/C,KACZgC,EAAWhC,GAAS,CAClBe,KAAMgC,EAAGM,UACTT,KAAMG,EAAGO,cAGb/F,KAAKS,SAAS,CACZgE,WAAYA,QA7TwB,KAkU1C2C,cAAiBvG,IACf,MAAM4D,EAAazE,KAAKR,MAAMiF,WAE9B,GAA0B,IAAtB5D,EAAME,OAAOD,MACf,OAEF,MAAMN,EAAOiE,EAAW5D,EAAME,OAAOD,OAErCd,KAAKS,SAAS,CACZmE,OAAQ/D,EAAME,OAAOD,MACrBmC,KAAMzC,EAAKgD,OAEb4C,oBAAU5F,EAAK6E,MAAME,MAAMzC,IACzB,IAAI4B,EAAiB,GACrB5B,EAASP,KAAI,CAACiD,EAAI/C,KAChBiC,EAAejC,GAAS,CACtBe,KAAMgC,EAAGa,UACThB,KAAMG,EAAGc,cAGbtG,KAAKS,SAAS,CACZiE,eAAgBA,QAvVoB,KA4V1C2C,mBAAsBxG,IACpB,MAAM6D,EAAiB1E,KAAKR,MAAMkF,eAElC,GAA0B,IAAtB7D,EAAME,OAAOD,MACf,OAEF,MAAMN,EAAOkE,EAAe7D,EAAME,OAAOD,OAEzCd,KAAKS,SAAS,CACZkE,YAAa9D,EAAME,OAAOD,MAC1BgC,SAAUtC,EAAKgD,QAxUnBvC,oBACEqG,oBAAU/B,MAAM+B,IACd,IAAI/C,EAAc,GAClB+C,EAAQ/E,KAAKS,IACXuB,EAAYvB,EAAOG,IAAM,CACvBK,KAAMR,EAAOuE,YACblC,KAAMrC,EAAOwE,gBAGjBxH,KAAKS,SAAS,CACZ8D,YAAaA,OAKnB7C,mBAAmB+F,EAAUpH,GAC3BL,KAAKU,mBAAmB+G,EAAUpH,GA4TpCsB,SACE,IAAI,QACF9B,EADE,UAEF6C,EAFE,SAGFC,EAHE,YAIFC,EAJE,OAKFC,EALE,QAMFyB,EANE,OAOF5E,EAPE,YAQF6E,EARE,cASFC,EATE,WAUFC,EAVE,eAWFC,EAXE,YAYFC,EAZE,OAaFC,EAbE,SAcFE,EAdE,WAeFD,GACE7E,KAAKR,MACT,OACE,mCACE,eAAC,IAAD,CAAQ4C,KAAK,KAAKvC,QAASA,EAA3B,UACE,cAAC,IAAD,CACE6H,UAAW,IAAM1H,KAAKC,MAAMkC,iBAAgB,EAAO,QAAS,GAAI,IADlE,SAGE,cAAC,IAAD,iCAEF,cAAC,IAAD,UACE,eAAC,IAAD,CACEF,UAAU,2BACVkB,GAAG,eACHwE,SAAU3H,KAAKwG,eAHjB,UAKE,cAAC,IAAD,CAAMlD,GAAI,EAAV,SACE,eAAC,IAAD,CAAerB,UAAU,OAAzB,UACE,cAAC,IAAD,CACEuB,KAAK,YACLD,KAAK,OACLJ,GAAG,oBACHyE,YAAY,aACZ9G,MAAO4B,EACPiB,SAAU3D,KAAKY,eACfiH,UAAQ,IAEV,cAAC,IAAD,CAAYC,QAAQ,oBAApB,6BAKJ,cAAC,IAAD,CAAMxE,GAAI,EAAV,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CACEE,KAAK,WACLD,KAAK,OACLJ,GAAG,mBACHyE,YAAY,YACZ9G,MAAO6B,EACPgB,SAAU3D,KAAKY,eACfiH,UAAQ,IAEV,cAAC,IAAD,CAAYC,QAAQ,mBAApB,4BAGJ,cAAC,IAAD,CAAMxE,GAAI,EAAV,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CACEE,KAAK,cACLD,KAAK,MACLsE,UAAQ,EACRE,QAAS,sBACT5E,GAAG,sBACHyE,YAAY,YACZ9G,MAAO8B,EACPe,SAAU3D,KAAKY,iBAEjB,cAAC,IAAD,CAAYkH,QAAQ,sBAApB,+BAKJ,cAAC,IAAD,CAAMxE,GAAI,IACV,cAAC,IAAD,CAAMA,GAAI,GAAV,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CACEE,KAAK,SACLD,KAAK,OACLJ,GAAG,iBACHyE,YAAY,SACZ9G,MAAO+B,EACPc,SAAU3D,KAAKY,eACfiH,UAAQ,IAEV,cAAC,IAAD,CAAYC,QAAQ,iBAApB,yBAGJ,cAAC,IAAD,CAAMxE,GAAI,EAAV,SACE,eAAC,IAAD,CAAerB,UAAU,OAAzB,UACE,eAAC,IAAD,CACEuB,KAAK,SACLD,KAAK,OACLJ,GAAG,iBACHyE,YAAY,SACZ9G,MAAOgE,EACPnB,SAAU3D,KAAKkH,gBACfW,UAAQ,EAPV,UASE,wBAAQ/G,MAAM,GAAGkH,UAAQ,EAAzB,iCAGCzD,EAAYhC,KAAI,CAACS,EAAQP,IAEtB,wBAAQ3B,MAAO2B,EAAf,SACGO,EAAOQ,MADiBf,QAMjC,cAAC,IAAD,CAAYqF,QAAQ,iBAApB,yBAGJ,cAAC,IAAD,CAAMxE,GAAI,EAAV,SACE,eAAC,IAAD,WACE,eAAC,IAAD,CACEE,KAAK,WACLD,KAAK,OACLJ,GAAG,mBACHyE,YAAY,WACZ9G,MAAO+D,EACPlB,SAAU3D,KAAKmH,kBACfU,UAAQ,EAPV,UASE,wBAAQ/G,MAAM,GAAGkH,UAAQ,EAAzB,mCAGCxD,EAAcjC,KAAI,CAACS,EAAQP,IAExB,wBAAQ3B,MAAO2B,EAAf,SACGO,EAAOQ,MADiBR,EAAOQ,WAMxC,cAAC,IAAD,CAAYsE,QAAQ,mBAApB,2BAGJ,cAAC,IAAD,CAAMxE,GAAI,EAAV,SACE,eAAC,IAAD,WACE,eAAC,IAAD,CACEE,KAAK,OACLD,KAAK,OACLJ,GAAG,eACHyE,YAAY,OACZ9G,MAAO8D,EACPjB,SAAU3D,KAAKoH,cACfS,UAAQ,EAPV,UASE,wBAAQ/G,MAAM,GAAGkH,UAAQ,EAAzB,+BAGCvD,EAAWlC,KAAI,CAACS,EAAQP,IAErB,wBAAQ3B,MAAO2B,EAAf,SACGO,EAAOQ,MADiBf,QAMjC,cAAC,IAAD,CAAYqF,QAAQ,eAApB,uBAGJ,cAAC,IAAD,CAAMxE,GAAI,EAAV,SACE,eAAC,IAAD,WACE,eAAC,IAAD,CACEE,KAAK,WACLD,KAAK,OACLJ,GAAG,mBACHyE,YAAY,WACZ9G,MAAO6D,EACPhB,SAAU3D,KAAKqH,mBACfQ,UAAQ,EAPV,UASE,wBAAQ/G,MAAM,GAAGkH,UAAQ,EAAzB,mCAGCtD,EAAenC,KAAI,CAACS,EAAQP,IAEzB,wBAAQ3B,MAAO2B,EAAf,SACGO,EAAOQ,MADiBf,QAMjC,cAAC,IAAD,CAAYqF,QAAQ,mBAApB,gCAKR,eAAC,IAAD,WACE,cAAC,IAAD,CACE/F,MAAM,OACNC,QAAQ,QACRE,QAAS,KACPlC,KAAKC,MAAMkC,iBAAgB,EAAO,QAAS,GAAI,KAJnD,mBAUA,eAAC,IAAD,CACEJ,MAAM,OACNiG,SAAU1D,EACVf,KAAK,SACL0E,KAAK,eAJP,UAMG3D,GAAW,cAAC,KAAD,CAAUlC,KAAK,KAAKH,UAAU,SAN5C,QAOmB,SAAXvC,EAAoB,UAAY,sBAcrCqE,iBANUvE,IAChB,CACLmB,aAAcnB,EAAMyE,qBACpBD,gBAAiBxE,EAAMwE,mBAGa,CACtC7B,oBACA4E,gBACA7C,iBACA+C,mBAJalD,CAKZI,I,oBCpnBH,MAAM+D,EAAQC,EAAQ,KAyFtBC,EAAOC,QAAU,CAAEf,QApFHgB,UACZ,IAII,aAHsBJ,EAAMK,IACxB,qEAEW/H,KAAK+B,KAAKS,IACd,CACHG,GAAIH,EAAOG,GACXqF,UAAWxF,EAAOwF,UAClBjB,YAAavE,EAAOuE,YACpBC,YAAaxE,EAAOwE,gBAG9B,MAAOiB,GACL,OAAOA,EAAEhJ,UAsEW6F,UA/DVgD,UACd,IAII,aAHwBJ,EAAMK,IAC1B,uEAEa/H,KAAKkI,QAAO3F,GAAYA,EAASyE,cAAgBnC,IAC7D9C,KAAKoG,IACK,CACHH,UAAWG,EAASH,UACpB/C,cAAekD,EAASlD,cACxBC,cAAeiD,EAASjD,cACxB8B,YAAamB,EAASnB,gBAGpC,MAAOiB,GACL,OAAOA,EAAEhJ,UAgDsBoG,OAzCxByC,UACX,IAII,aAHqBJ,EAAMK,IACvB,mEAEU/H,KAAKkI,QAAOzF,GAAQA,EAAKyC,gBAAkBL,IACpD9C,KAAKoG,IACK,CACH7C,UAAW6C,EAAS7C,UACpBC,UAAW4C,EAAS5C,UACpBL,cAAeiD,EAASjD,cACxBkD,YAAaD,EAASC,gBAGpC,MAAOH,GACL,OAAOA,EAAEhJ,UA0B8B2G,UAnB7BkC,UACd,IAII,aAHwBJ,EAAMK,IAC1B,uEAEa/H,KAAKkI,QAAO5F,GAAYA,EAASiD,YAAcV,IAC3D9C,KAAKoG,IACK,CACHtC,UAAWsC,EAAStC,UACpBC,UAAWqC,EAASrC,UACpBZ,cAAeiD,EAASjD,cACxB8B,YAAamB,EAASnB,gBAGpC,MAAOiB,GACL,OAAOA,EAAEhJ","file":"static/js/50.81317208.chunk.js","sourcesContent":["import React, { Component } from \"react\"\nimport {\n  CButton,\n  CRow,\n  CCol,\n  CCard,\n  CCardTitle,\n  CFormCheck,\n  CCardBody,\n  CAlert,\n} from \"@coreui/react\"\n\nimport { connect } from \"react-redux\"\n//icons\nimport * as FaIcons from \"react-icons/fa\"\nimport * as MdIcons from \"react-icons/md\"\n// modal\nimport AddressModal from \"src/components/modals/address/AddressModal\"\nimport AlertModal from \"src/components/modals/alert/AlertModal\"\n//action\nimport { getAdress } from \"src/service/apiActions/addressAction/addressAction\"\nimport { clearMessage } from \"src/service/apiActions/messageAction/messageAction\"\nimport { setAddressModal } from \"src/service/apiActions/modalAction/modalAction\"\nimport { setAlertModal } from \"src/service/apiActions/modalAction/modalAction\"\n//history\nimport { history } from \"src/_helper/history\"\nimport config from \"../../../../config\"\n\nexport class CustomerAddress extends Component {\n  state = {\n    message: \"\",\n    action: \"\",\n    addresses: [],\n    addressId: \"\",\n    visible: false,\n    isCart: false,\n  }\n\n  componentDidMount() {\n    if (!this.props.userResponse.isLoggedIn) {\n      history.push(config.api.private.prefixFrontendUrl + \"/login\")\n    } else {\n      this.retreiveAddressResponse()\n    }\n  }\n\n  retreiveAddressResponse = () => {\n    this.props.getAdress()\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    this.manageAddressResponse(prevProps, prevState)\n    this.manageModalVisible(prevProps, prevState)\n  }\n  manageAddressResponse = (prevProps, prevState) => {\n    if (prevProps.addressResponse !== this.props.addressResponse) {\n      let { action, status, data } = this.props.addressResponse\n      if (action === \"GET_ADDRESSES\" && status === 200) {\n        this.setState({\n          addresses: data.addresses,\n        })\n      }\n    }\n  }\n  manageModalVisible = (prevProps, prevState) => {\n    if (prevProps.modalVisible !== this.props.modalVisible) {\n      let { action } = this.props.modalVisible\n      if (action === \"close\") {\n        this.retreiveAddressResponse()\n      }\n    }\n  }\n  handleOnChange = (event) => {\n    let value = event.target.value\n    this.setState({\n      addressId: value,\n    })\n    this.props.checkValueOnChange(value)\n  }\n\n  render() {\n    let { message, addresses, visible, isCart } = this.state\n    const cursorStyle = {\n      cursor: \"pointer\",\n    }\n    return (\n      <>\n        <AddressModal />\n        <AlertModal />\n        <CButton\n          shape=\"rounded-pill\"\n          color=\"primary\"\n          variant=\"ghost\"\n          className=\"d-flex justify-content-center align-items-center mb-3\"\n          onClick={() =>\n            this.props.setAddressModal(\n              !visible,\n              \"Add\",\n              \"\",\n              <FaIcons.FaPlus size={20} className=\"me-2\" />,\n            )\n          }\n        >\n          <FaIcons.FaPlus size={20} />\n          <span style={{ marginLeft: \"10px\" }}>Add Address</span>\n        </CButton>\n        <CRow>\n          {addresses.map((address, index) => {\n            const {\n              firstName,\n              lastName,\n              phoneNumber,\n              street,\n              barangay,\n              province,\n              region,\n              city,\n              postalCode,\n              id,\n            } = address\n\n            let checked = this.props.getValue == address.id\n            return (\n              <CCol key={index} md={12} className=\"mb-3\">\n                <CCard\n                  className={\n                    checked ? \"border-envelope shadow\" : \"border-envelope\"\n                  }\n                >\n                  <CCardBody className=\"p-3 \">\n                    <div className=\"d-flex align-items-center justify-content-start\">\n                      <CFormCheck\n                        type=\"radio\"\n                        name=\"check\"\n                        id={\"address\" + address.id}\n                        style={cursorStyle}\n                        value={address.id}\n                        defaultChecked={\n                          this.props.getValue !== undefined ? checked : false\n                        }\n                        onChange={this.handleOnChange}\n                      />\n                    </div>\n                    <div className=\"d-flex align-items-center justify-content-between \">\n                      <CCardTitle>{firstName + \" \" + lastName}</CCardTitle>\n                      <div className=\" text-end\">\n                        <CButton\n                          color=\"info\"\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() =>\n                            this.props.setAddressModal(\n                              !visible,\n                              \"Edit\",\n                              address,\n                              <FaIcons.FaPlus size={20} className=\"me-2\" />,\n                            )\n                          }\n                        >\n                          <FaIcons.FaEdit size=\"20\" />\n                        </CButton>\n                        <CButton\n                          color=\"danger\"\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() =>\n                            this.props.setAlertModal(\n                              !visible,\n                              \"DELETECUSTOMERADDRESS\",\n                              \"ADDRESS\",\n                              id,\n                            )\n                          }\n                        >\n                          <MdIcons.MdDelete size=\"20\" />\n                        </CButton>\n                      </div>\n                    </div>\n                    <div className=\"ps-2\">Mobile #: {phoneNumber}</div>\n                    <div className=\"ps-2\">\n                      Address:{\" \"}\n                      {street +\n                        \", \" +\n                        barangay +\n                        \", \" +\n                        city +\n                        \", \" +\n                        province +\n                        \", \" +\n                        region}\n                    </div>\n                  </CCardBody>\n                </CCard>\n              </CCol>\n            )\n          })}\n          {isCart && (\n            <CCol className=\"m-3 text-center\" style={{ fontStyle: \"italic\" }}>\n              <CAlert color=\"warning\">\n                To Proceed to the next step Select or Add your Address\n                Information\n              </CAlert>\n            </CCol>\n          )}\n        </CRow>\n        {message && (\n          <div className=\"form-group d-flex justify-content-center align-items-center\">\n            <div className=\"alert alert-danger\" role=\"alert\">\n              {message}\n            </div>\n          </div>\n        )}\n      </>\n    )\n  }\n}\nconst mapStateToProps = (state) => {\n  return {\n    addressResponse: state.addressResponse,\n    userResponse: state.userResponse,\n    messageResponse: state.messageResponse,\n    modalVisible: state.modalVisibleResponse,\n  }\n}\nexport default connect(mapStateToProps, {\n  getAdress,\n  clearMessage,\n  setAddressModal,\n  setAlertModal,\n})(CustomerAddress)\n","import React, { Component } from \"react\"\nimport {\n  CButton,\n  // CRow,\n  CCol,\n  CFormFloating,\n  CFormLabel,\n  CFormControl,\n  CForm,\n  CModal,\n  CModalBody,\n  CModalHeader,\n  CModalTitle,\n  CModalFooter,\n  CSpinner,\n  CFormSelect,\n} from \"@coreui/react\"\nimport { connect } from \"react-redux\"\n//action\nimport { setAddressModal } from \"src/service/apiActions/modalAction/modalAction\"\nimport {\n  saveAddress,\n  updateAddress,\n} from \"src/service/apiActions/addressAction/addressAction\"\nimport { clearMessage } from \"src/service/apiActions/messageAction/messageAction\"\n\nimport {\n  regions,\n  provinces,\n  cities,\n  barangays,\n} from \"select-philippines-address\"\n\nexport class AddressModal extends Component {\n  state = {\n    visible: false,\n    icon: \"\",\n    address: this.addressStates,\n    loading: false,\n    action: \"\",\n    regionsData: [],\n    provincesData: [],\n    citiesData: [],\n    baranggaysData: [],\n    baranggayId: \"\",\n    cityId: \"\",\n    provinceId: \"\",\n    regionId: \"\",\n    id: \"\",\n  }\n\n  addressStates = {\n    firstName: \"\",\n    lastName: \"\",\n    phoneNumber: \"\",\n    region: \"\",\n    city: \"\",\n    province: \"\",\n    barangay: \"\",\n    street: \"\",\n    postalCode: \"\",\n  }\n\n  componentDidMount() {\n    regions().then((regions) => {\n      let regionsData = []\n      regions.map((region) => {\n        regionsData[region.id] = {\n          name: region.region_name,\n          code: region.region_code,\n        }\n      })\n      this.setState({\n        regionsData: regionsData,\n      })\n    })\n  }\n\n  componentDidUpdate(prevPros, prevState) {\n    this.manageModalVisible(prevPros, prevState)\n  }\n\n  manageModalVisible = (prevProps, prevState) => {\n    if (prevProps.modalVisible !== this.props.modalVisible) {\n      let { visible, action, address, icon } = this.props.modalVisible\n      if (action === \"Add\") {\n        this.setState({\n          visible: visible,\n          icon: icon,\n          action: action,\n        })\n      } else if (action === \"Edit\") {\n        this.setState({\n          visible: visible,\n          icon: icon,\n          action: action,\n          id: address.id,\n        })\n        this.handleOnEditSetState(address)\n      } else {\n        this.setState({\n          visible: visible,\n          icon: \"\",\n          action: \"\",\n          regionId: \"\",\n          provinceId: \"\",\n          cityId: \"\",\n          baranggayId: \"\",\n        })\n        this.onResetValue()\n      }\n    }\n  }\n  handleOnEditSetState = (address) => {\n    const {\n      firstName,\n      lastName,\n      phoneNumber,\n      region,\n      city,\n      province,\n      barangay,\n      street,\n    } = address\n    const { regionsData } = this.state\n    const regionIndex = regionsData.findIndex(\n      (item) => item && item.name === region,\n    )\n    this.getProvince(regionsData[regionIndex].code, province)\n\n    this.setState({\n      firstName: firstName,\n      lastName: lastName,\n      phoneNumber: phoneNumber,\n      region: region,\n      city: city,\n      province: province,\n      barangay: barangay,\n      street: street,\n      regionId: regionIndex,\n    })\n  }\n  getProvince = (code, province) => {\n    provinces(code).then((provinces) => {\n      let provincesData = []\n      provinces.map((dt, index) => {\n        provincesData[index] = {\n          name: dt.province_name,\n          code: dt.province_code,\n        }\n      })\n      let provinceIndex = provincesData.findIndex(\n        (item) => item && item.name === province,\n      )\n      this.setState({\n        provinceId: provinceIndex,\n        provincesData: provincesData,\n      })\n      this.getCity(provincesData[provinceIndex].code)\n    })\n  }\n  getCity = (code) => {\n    const { city } = this.state\n    cities(code).then((item) => {\n      let citiesData = []\n      item.map((dt, index) => {\n        citiesData[index] = {\n          name: dt.city_name,\n          code: dt.city_code,\n        }\n      })\n      let cityIndex = citiesData.findIndex((item) => item && item.name === city)\n      this.setState({\n        citiesData: citiesData,\n        cityId: cityIndex,\n      })\n      this.getBarangay(citiesData[cityIndex].code)\n    })\n  }\n  getBarangay = (code) => {\n    console.log(code)\n    const { barangay } = this.state\n    barangays(code).then((item) => {\n      let baranggaysData = []\n      item.map((dt, index) => {\n        baranggaysData[index] = {\n          name: dt.brgy_name,\n          code: dt.brgy_code,\n        }\n      })\n      let barangayIndex = baranggaysData.findIndex(\n        (item) => item && item.name === barangay,\n      )\n      this.setState({\n        baranggaysData: baranggaysData,\n        baranggayId: barangayIndex,\n      })\n    })\n  }\n\n  handleOnChange = (event) => {\n    this.setState({\n      [event.target.name]: event.target.value,\n    })\n  }\n\n  handleOnSubmit = (event) => {\n    event.preventDefault()\n\n    const form = event.currentTarget\n    if (form.checkValidity() === false) {\n      event.stopPropagation()\n    }\n    this.setState({\n      loading: true,\n    })\n    let {\n      action,\n      firstName,\n      lastName,\n      phoneNumber,\n      region,\n      city,\n      province,\n      barangay,\n      street,\n      postalCode,\n      id,\n    } = this.state\n\n    let address = {\n      firstName: firstName,\n      lastName: lastName,\n      phoneNumber: phoneNumber,\n      region: region,\n      city: city,\n      province: province,\n      barangay: barangay,\n      street: street,\n      postalCode: postalCode,\n    }\n    if (action === \"Add\") {\n      this.handleSaveAddress(address)\n    } else if (action === \"Edit\") {\n      this.handleUpdateAddress(id, address)\n    }\n  }\n\n  onResetValue = () => {\n    this.setState(() => this.addressStates)\n  }\n\n  handleSaveAddress = (address) => {\n    this.props\n      .saveAddress(address)\n      .then(() => {\n        let { status } = this.props.messageResponse\n        if (status === 200) {\n          this.setState({\n            loading: false,\n            regionId: \"\",\n            provinceId: \"\",\n            cityId: \"\",\n            baranggayId: \"\",\n          })\n          this.onResetValue()\n          this.props.setAddressModal(false, \"close\", \"\", \"\")\n        }\n      })\n      .catch(() => {\n        this.setState({\n          loading: false,\n        })\n      })\n  }\n\n  handleUpdateAddress = (id, address) => {\n    console.log(id)\n    this.props\n      .updateAddress(id, address)\n      .then(() => {\n        let { status } = this.props.messageResponse\n        if (status === 200) {\n          this.setState({\n            loading: false,\n            regionId: \"\",\n            provinceId: \"\",\n            cityId: \"\",\n            baranggayId: \"\",\n          })\n          this.onResetValue()\n          this.props.setAddressModal(false, \"close\", \"\", \"\")\n        }\n      })\n      .catch(() => {\n        this.setState({\n          loading: false,\n        })\n      })\n  }\n  onRegionChanged = (event) => {\n    const regionsData = this.state.regionsData\n\n    if (event.target.value == \"\") {\n      return\n    }\n\n    const data = regionsData[event.target.value]\n    this.setState({\n      regionId: event.target.value,\n      region: data.name,\n    })\n\n    provinces(data.code).then((province) => {\n      let provincesData = []\n      province.map((dt, index) => {\n        provincesData[index] = {\n          name: dt.province_name,\n          code: dt.province_code,\n        }\n      })\n      this.setState({\n        provincesData: provincesData,\n      })\n    })\n  }\n\n  onProvinceChanged = (event) => {\n    const provincesData = this.state.provincesData\n\n    if (event.target.value == \"\") {\n      return\n    }\n\n    const data = provincesData[event.target.value]\n\n    this.setState({\n      provinceId: event.target.value,\n      province: data.name,\n    })\n\n    cities(data.code).then((city) => {\n      let citiesData = []\n      city.map((dt, index) => {\n        citiesData[index] = {\n          name: dt.city_name,\n          code: dt.city_code,\n        }\n      })\n      this.setState({\n        citiesData: citiesData,\n      })\n    })\n  }\n\n  onCityChanged = (event) => {\n    const citiesData = this.state.citiesData\n\n    if (event.target.value == \"\") {\n      return\n    }\n    const data = citiesData[event.target.value]\n\n    this.setState({\n      cityId: event.target.value,\n      city: data.name,\n    })\n    barangays(data.code).then((barangay) => {\n      let baranggaysData = []\n      barangay.map((dt, index) => {\n        baranggaysData[index] = {\n          name: dt.brgy_name,\n          code: dt.brgy_code,\n        }\n      })\n      this.setState({\n        baranggaysData: baranggaysData,\n      })\n    })\n  }\n\n  onBaranggayChanged = (event) => {\n    const baranggaysData = this.state.baranggaysData\n\n    if (event.target.value == \"\") {\n      return\n    }\n    const data = baranggaysData[event.target.value]\n\n    this.setState({\n      baranggayId: event.target.value,\n      barangay: data.name,\n    })\n  }\n\n  render() {\n    let {\n      visible,\n      firstName,\n      lastName,\n      phoneNumber,\n      street,\n      loading,\n      action,\n      regionsData,\n      provincesData,\n      citiesData,\n      baranggaysData,\n      baranggayId,\n      cityId,\n      regionId,\n      provinceId,\n    } = this.state\n    return (\n      <>\n        <CModal size=\"lg\" visible={visible}>\n          <CModalHeader\n            onDismiss={() => this.props.setAddressModal(false, \"close\", \"\", \"\")}\n          >\n            <CModalTitle>Customer Address</CModalTitle>\n          </CModalHeader>\n          <CModalBody>\n            <CForm\n              className=\"row g-3 needs-validation\"\n              id=\"address-form\"\n              onSubmit={this.handleOnSubmit}\n            >\n              <CCol md={6}>\n                <CFormFloating className=\"mb-3\">\n                  <CFormControl\n                    name=\"firstName\"\n                    type=\"text\"\n                    id=\"floatingFirstName\"\n                    placeholder=\"First name\"\n                    value={firstName}\n                    onChange={this.handleOnChange}\n                    required\n                  />\n                  <CFormLabel htmlFor=\"floatingFirstName\">\n                    First name\n                  </CFormLabel>\n                </CFormFloating>\n              </CCol>\n              <CCol md={6}>\n                <CFormFloating>\n                  <CFormControl\n                    name=\"lastName\"\n                    type=\"text\"\n                    id=\"floatingLastName\"\n                    placeholder=\"Last name\"\n                    value={lastName}\n                    onChange={this.handleOnChange}\n                    required\n                  />\n                  <CFormLabel htmlFor=\"floatingLastName\">Last name</CFormLabel>\n                </CFormFloating>\n              </CCol>\n              <CCol md={6}>\n                <CFormFloating>\n                  <CFormControl\n                    name=\"phoneNumber\"\n                    type=\"tel\"\n                    required\n                    pattern={\"^(09|\\\\+639)\\\\d{9}$\"}\n                    id=\"floatingPhoneNumber\"\n                    placeholder=\"Last name\"\n                    value={phoneNumber}\n                    onChange={this.handleOnChange}\n                  />\n                  <CFormLabel htmlFor=\"floatingPhoneNumber\">\n                    Phone number\n                  </CFormLabel>\n                </CFormFloating>\n              </CCol>\n              <CCol md={6}></CCol>\n              <CCol md={12}>\n                <CFormFloating>\n                  <CFormControl\n                    name=\"street\"\n                    type=\"text\"\n                    id=\"floatingStreet\"\n                    placeholder=\"Street\"\n                    value={street}\n                    onChange={this.handleOnChange}\n                    required\n                  />\n                  <CFormLabel htmlFor=\"floatingStreet\">Street</CFormLabel>\n                </CFormFloating>\n              </CCol>\n              <CCol md={6}>\n                <CFormFloating className=\"mb-3\">\n                  <CFormSelect\n                    name=\"region\"\n                    type=\"text\"\n                    id=\"floatingRegion\"\n                    placeholder=\"Region\"\n                    value={regionId}\n                    onChange={this.onRegionChanged}\n                    required\n                  >\n                    <option value=\"\" disabled>\n                      -- Choose Region --\n                    </option>\n                    {regionsData.map((region, index) => {\n                      return (\n                        <option value={index} key={index}>\n                          {region.name}\n                        </option>\n                      )\n                    })}\n                  </CFormSelect>\n                  <CFormLabel htmlFor=\"floatingRegion\">Region</CFormLabel>\n                </CFormFloating>\n              </CCol>\n              <CCol md={6}>\n                <CFormFloating>\n                  <CFormSelect\n                    name=\"province\"\n                    type=\"text\"\n                    id=\"floatingProvince\"\n                    placeholder=\"Province\"\n                    value={provinceId}\n                    onChange={this.onProvinceChanged}\n                    required\n                  >\n                    <option value=\"\" disabled>\n                      -- Choose Province --\n                    </option>\n                    {provincesData.map((region, index) => {\n                      return (\n                        <option value={index} key={region.name}>\n                          {region.name}\n                        </option>\n                      )\n                    })}\n                  </CFormSelect>\n                  <CFormLabel htmlFor=\"floatingProvince\">Province</CFormLabel>\n                </CFormFloating>\n              </CCol>\n              <CCol md={6}>\n                <CFormFloating>\n                  <CFormSelect\n                    name=\"city\"\n                    type=\"text\"\n                    id=\"floatingCity\"\n                    placeholder=\"City\"\n                    value={cityId}\n                    onChange={this.onCityChanged}\n                    required\n                  >\n                    <option value=\"\" disabled>\n                      -- Choose City --\n                    </option>\n                    {citiesData.map((region, index) => {\n                      return (\n                        <option value={index} key={index}>\n                          {region.name}\n                        </option>\n                      )\n                    })}\n                  </CFormSelect>\n                  <CFormLabel htmlFor=\"floatingCity\">City</CFormLabel>\n                </CFormFloating>\n              </CCol>\n              <CCol md={6}>\n                <CFormFloating>\n                  <CFormSelect\n                    name=\"barangay\"\n                    type=\"text\"\n                    id=\"floatingBarangay\"\n                    placeholder=\"Barangay\"\n                    value={baranggayId}\n                    onChange={this.onBaranggayChanged}\n                    required\n                  >\n                    <option value=\"\" disabled>\n                      -- Choose Barangay --\n                    </option>\n                    {baranggaysData.map((region, index) => {\n                      return (\n                        <option value={index} key={index}>\n                          {region.name}\n                        </option>\n                      )\n                    })}\n                  </CFormSelect>\n                  <CFormLabel htmlFor=\"floatingBarangay\">Barangay</CFormLabel>\n                </CFormFloating>\n              </CCol>\n            </CForm>\n          </CModalBody>\n          <CModalFooter>\n            <CButton\n              color=\"dark\"\n              variant=\"ghost\"\n              onClick={() => {\n                this.props.setAddressModal(false, \"close\", \"\", \"\")\n                // this.props.clearMessage();\n              }}\n            >\n              Close\n            </CButton>\n            <CButton\n              color=\"info\"\n              disabled={loading}\n              type=\"submit\"\n              form=\"address-form\"\n            >\n              {loading && <CSpinner size=\"sm\" className=\"ms-1\" />}\n              Save {action === \"Edit\" ? \"Changes\" : \"Address\"}\n            </CButton>\n          </CModalFooter>\n        </CModal>\n      </>\n    )\n  }\n}\nconst mapStateToProps = (state) => {\n  return {\n    modalVisible: state.modalVisibleResponse,\n    messageResponse: state.messageResponse,\n  }\n}\nexport default connect(mapStateToProps, {\n  setAddressModal,\n  saveAddress,\n  clearMessage,\n  updateAddress,\n})(AddressModal)\n","const axios = require('axios');\r\n\r\n// Returns all regions\r\n// @param NULL\r\n\r\nconst regions = async () => {\r\n    try {\r\n        const regions = await axios.get(\r\n            'https://isaacdarcilla.github.io/philippine-addresses/region.json'\r\n        );\r\n        return regions.data.map((region) => {\r\n            return {\r\n                id: region.id,\r\n                psgc_code: region.psgc_code,\r\n                region_name: region.region_name,\r\n                region_code: region.region_code\r\n            };\r\n        })\r\n    } catch (e) {\r\n        return e.message;\r\n    }\r\n};\r\n\r\n// Returns all provinces base on region code parameter.\r\n// @param REGION CODE\r\n\r\nconst provinces = async (code) => {\r\n    try {\r\n        const provinces = await axios.get(\r\n            'https://isaacdarcilla.github.io/philippine-addresses/province.json'\r\n        );\r\n        return provinces.data.filter(province => province.region_code === code)\r\n            .map((filtered) => {\r\n                return {\r\n                    psgc_code: filtered.psgc_code,\r\n                    province_name: filtered.province_name,\r\n                    province_code: filtered.province_code,\r\n                    region_code: filtered.region_code\r\n                };\r\n            });\r\n    } catch (e) {\r\n        return e.message;\r\n    }\r\n};\r\n\r\n// Returns all cities base on province code parameter.\r\n// @param PROVINCE CODE\r\n\r\nconst cities = async (code) => {\r\n    try {\r\n        const cities = await axios.get(\r\n            'https://isaacdarcilla.github.io/philippine-addresses/city.json'\r\n        );\r\n        return cities.data.filter(city => city.province_code === code)\r\n            .map((filtered) => {\r\n                return {\r\n                    city_name: filtered.city_name,\r\n                    city_code: filtered.city_code,\r\n                    province_code: filtered.province_code,\r\n                    region_desc: filtered.region_desc,\r\n                };\r\n            });\r\n    } catch (e) {\r\n        return e.message;\r\n    }\r\n};\r\n\r\n// Returns all barangays base on city code parameter.\r\n// @param CITY CODE\r\n\r\nconst barangays = async (code) => {\r\n    try {\r\n        const barangays = await axios.get(\r\n            'https://isaacdarcilla.github.io/philippine-addresses/barangay.json'\r\n        );\r\n        return barangays.data.filter(barangay => barangay.city_code === code)\r\n            .map((filtered) => {\r\n                return {\r\n                    brgy_name: filtered.brgy_name,\r\n                    brgy_code: filtered.brgy_code,\r\n                    province_code: filtered.province_code,\r\n                    region_code: filtered.region_code,\r\n                };\r\n            });\r\n    } catch (e) {\r\n        return e.message;\r\n    }\r\n};\r\n\r\nmodule.exports = { regions, provinces, cities, barangays };"],"sourceRoot":""}