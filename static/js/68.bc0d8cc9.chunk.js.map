{"version":3,"sources":["../../inventory-management-system-reactjs/src/service/restAPI/PaymentMethodApiService.js","../../inventory-management-system-reactjs/src/views/common/cart/payment/PaymentMethod.js","../../inventory-management-system-reactjs/src/service/apiActions/paymentAction/paymentAction.js"],"names":["getPaymentMethods","axios","get","headers","authHeader","PaymentMethod","Component","state","message","action","paymentMethods","managePaymentMethodRespons","prevProps","prevState","paymentMethodResponse","this","props","status","data","setState","handleOnChange","event","value","target","paymentMethodOnChange","componentDidMount","componentDidUpdate","render","cursorStyle","cursor","map","method","index","checked","getValue","id","md","className","type","name","paymentMethod","style","defaultChecked","undefined","onChange","role","connect","messageResponse","async","PaymentMethodApiService","then","response","dispatch","GET_PAYMENT_METHODS","payload","Promise","resolve","error","errorMessage","toString","code","SET_MESSAGE","reject","clearMessage"],"mappings":"uRAUe,UAPR,MACHA,oBACI,OAAOC,IAAMC,IAAI,mBAAoB,CACjCC,QAASC,kB,oBCOd,MAAMC,UAAsBC,YAAW,eAAD,oBAC3CC,MAAQ,CACNC,QAAS,GACTC,OAAQ,GACRC,eAAgB,IAJyB,KAa3CC,2BAA6B,CAACC,EAAWC,KACvC,GAAID,EAAUE,wBAA0BC,KAAKC,MAAMF,sBAAuB,CACxE,IAAI,OAAEL,EAAF,OAAUQ,EAAV,KAAkBC,GAASH,KAAKC,MAAMF,sBAC3B,oBAAXL,GAA2C,MAAXQ,GAClCF,KAAKI,SAAS,CACZT,eAAgBQ,EAAKR,mBAlBc,KAuB3CU,eAAkBC,IAChB,IAAIC,EAAQD,EAAME,OAAOD,MACzBP,KAAKC,MAAMQ,sBAAsBF,IAnBnCG,oBACEV,KAAKC,MAAMhB,oBAGb0B,mBAAmBd,EAAWC,GAC5BE,KAAKJ,2BAA2BC,EAAWC,GAiB7Cc,SACE,IAAI,QAAEnB,EAAF,eAAWE,GAAmBK,KAAKR,MACvC,MAAMqB,EAAc,CAClBC,OAAQ,WAEV,OACE,mCACE,eAAC,KAAD,WACGnB,EAAeoB,KAAI,CAACC,EAAQC,KAC3B,IAAIC,EAAUlB,KAAKC,MAAMkB,UAAYH,EAAOI,GAE5C,OACE,cAAC,IAAD,CAAkBC,GAAI,GAAIC,UAAU,OAApC,SACE,cAAC,IAAD,CAAOA,UAAWJ,EAAU,UAAY,GAAxC,SACE,cAAC,IAAD,CAAWI,UAAU,MAArB,SACE,sBAAKA,UAAU,kDAAf,UACE,cAAC,IAAD,CACEC,KAAK,QACLC,KAAK,QACLJ,GAAIJ,EAAOS,cACXC,MAAOb,EACPN,MAAOS,EAAOI,GACdO,oBAC0BC,IAAxB5B,KAAKC,MAAMkB,UAAyBD,EAEtCW,SAAU7B,KAAKK,iBAEjB,cAAC,IAAD,CAAYiB,UAAU,OAAtB,SACGN,EAAOS,wBAhBPR,MAwBdxB,GACC,qBAAK6B,UAAU,8DAAf,SACE,qBAAKA,UAAU,qBAAqBQ,KAAK,QAAzC,SACGrC,YAeFsC,uBANUvC,IAChB,CACLO,sBAAuBP,EAAMO,sBAC7BiC,gBAAiBxC,EAAMwC,mBAGa,CACtC/C,kBC5F+B,IAAMgD,SAC5BC,EAAwBjD,oBAAoBkD,MAC9CC,IACGC,EAAS,CACLd,KAAMe,sBACNC,QAAS,CACLrC,OAAQ,IACRR,OAAQ,kBACRS,KAAM,CACFR,eAAgByC,EAASjC,SAI9BqC,QAAQC,aAElBC,IACG,MAAMC,EACDD,EAAMN,UACHM,EAAMN,SAASjC,MACfuC,EAAMN,SAASjC,KAAKV,SACxBiD,EAAMjD,SACNiD,EAAME,WAEJ1C,EAAUwC,EAAMN,UAClBM,EAAMN,SAASjC,MACfuC,EAAMN,SAASjC,KAAK0C,MACpBH,EAAME,WAWV,OATAP,EAAS,CACLd,KAAMuB,IACNP,QAAS,CACLrC,OAAQA,EACRC,KAAM,CACFV,QAASkD,MAIdH,QAAQO,YDwDzBC,kBAFajB,CAGZzC","file":"static/js/68.bc0d8cc9.chunk.js","sourcesContent":["import authHeader from '../auth/authHeader';\nimport axios from './RestApi'\n\nexport class PaymentMethodApiService {\n    getPaymentMethods() {\n        return axios.get(\"/payment/methods\", {\n            headers: authHeader()\n        })\n    }\n}\nexport default new PaymentMethodApiService();","import React, { Component } from \"react\"\nimport { connect } from \"react-redux\"\nimport {\n  CRow,\n  CCol,\n  CCard,\n  CFormCheck,\n  CCardBody,\n  CCardTitle,\n} from \"@coreui/react\"\n//action\nimport { getPaymentMethods } from \"src/service/apiActions/paymentAction/paymentAction\"\nimport { clearMessage } from \"src/service/apiActions/messageAction/messageAction\"\nexport class PaymentMethod extends Component {\n  state = {\n    message: \"\",\n    action: \"\",\n    paymentMethods: [],\n  }\n  componentDidMount() {\n    this.props.getPaymentMethods()\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    this.managePaymentMethodRespons(prevProps, prevState)\n  }\n  managePaymentMethodRespons = (prevProps, prevState) => {\n    if (prevProps.paymentMethodResponse !== this.props.paymentMethodResponse) {\n      let { action, status, data } = this.props.paymentMethodResponse\n      if (action === \"PAYMENT_METHODS\" && status === 200) {\n        this.setState({\n          paymentMethods: data.paymentMethods,\n        })\n      }\n    }\n  }\n  handleOnChange = (event) => {\n    let value = event.target.value\n    this.props.paymentMethodOnChange(value)\n  }\n\n  render() {\n    let { message, paymentMethods } = this.state\n    const cursorStyle = {\n      cursor: \"pointer\",\n    }\n    return (\n      <>\n        <CRow>\n          {paymentMethods.map((method, index) => {\n            let checked = this.props.getValue == method.id\n\n            return (\n              <CCol key={index} md={12} className=\"mb-3\">\n                <CCard className={checked ? \" shadow\" : \"\"}>\n                  <CCardBody className=\"p-5\">\n                    <div className=\"d-flex justify-content-start align-items-center\">\n                      <CFormCheck\n                        type=\"radio\"\n                        name=\"check\"\n                        id={method.paymentMethod}\n                        style={cursorStyle}\n                        value={method.id}\n                        defaultChecked={\n                          this.props.getValue !== undefined ? checked : false\n                        }\n                        onChange={this.handleOnChange}\n                      />\n                      <CCardTitle className=\"ps-4\">\n                        {method.paymentMethod}\n                      </CCardTitle>\n                    </div>\n                  </CCardBody>\n                </CCard>\n              </CCol>\n            )\n          })}\n          {message && (\n            <div className=\"form-group d-flex justify-content-center align-items-center\">\n              <div className=\"alert alert-danger\" role=\"alert\">\n                {message}\n              </div>\n            </div>\n          )}\n        </CRow>\n      </>\n    )\n  }\n}\nconst mapStateToProps = (state) => {\n  return {\n    paymentMethodResponse: state.paymentMethodResponse,\n    messageResponse: state.messageResponse,\n  }\n}\nexport default connect(mapStateToProps, {\n  getPaymentMethods,\n  clearMessage,\n})(PaymentMethod)\n","import { SET_MESSAGE } from \"src/constants/userConstants\";\nimport { GET_PAYMENT_METHODS } from \"src/service/redux/constants\";\nimport PaymentMethodApiService from \"src/service/restAPI/PaymentMethodApiService\"\n\nexport const getPaymentMethods = () => async (dispatch) => {\n    return PaymentMethodApiService.getPaymentMethods().then(\n        (response) => {\n            dispatch({\n                type: GET_PAYMENT_METHODS,\n                payload: {\n                    status: 200,\n                    action: \"PAYMENT_METHODS\",\n                    data: {\n                        paymentMethods: response.data\n                    }\n                }\n            })\n            return Promise.resolve();\n        },\n        (error) => {\n            const errorMessage =\n                (error.response &&\n                    error.response.data &&\n                    error.response.data.message) ||\n                error.message ||\n                error.toString();\n\n            const status = (error.response &&\n                error.response.data &&\n                error.response.data.code) ||\n                error.toString();\n\n            dispatch({\n                type: SET_MESSAGE,\n                payload: {\n                    status: status,\n                    data: {\n                        message: errorMessage\n                    }\n                }\n            })\n            return Promise.reject();\n        }\n    )\n}"],"sourceRoot":""}