{"version":3,"sources":["views/common/public/login/Login.js","service/apiActions/messageAction/messageAction.js","_helper/history.js"],"names":["RightFormCard","lazy","Login","Component","constructor","props","super","state","type","username","password","loading","validation","message","permission","isLoggedIn","handleOnChange","event","name","target","this","setState","value","handleShowPassword","preventDefault","handleSubmit","length","authenticateUser","then","window","location","reload","catch","data","messageResponse","history","listen","clearMessage","componentDidMount","redirectSuccessAuthentication","userResponse","roleName","credentials","roles","render","Roles","SUPER_ADMIN","ADMIN","to","position","className","style","cursor","md","lg","noValidate","validated","onSubmit","sm","xs","autoCorrect","id","placeholder","onChange","required","htmlFor","size","invalid","onClick","color","margin","width","disabled","role","button","connect","async","dispatch","CLEAR_MESSAGE","payload","status","createBrowserHistory"],"mappings":"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","file":"static/js/41.ed1d043d.chunk.js","sourcesContent":["import {\n  CContainer,\n  CFormFloating,\n  CFormControl,\n  CFormLabel,\n  CRow,\n  CCol,\n  CHeader,\n  CButton,\n  CForm,\n  CCard,\n  CCardGroup,\n  CCardBody,\n  CInputGroup,\n  CFormFeedback,\n  CSpinner,\n} from \"@coreui/react\"\nimport { connect } from \"react-redux\"\nimport { authenticateUser } from \"src/service/apiActions/userAction/userAction.js\"\n\nimport React, { Component, lazy } from \"react\"\n\n//icons\nimport * as FaIcons from \"react-icons/fa\"\nimport * as FiIcons from \"react-icons/fi\"\n\nimport { Link, Redirect } from \"react-router-dom\"\nimport { history } from \"src/_helper/history.js\"\n\n// clear message\nimport { clearMessage } from \"src/service/apiActions/messageAction/messageAction.js\"\nimport Roles from \"src/router/config/Roles.js\"\n\n//validations\n\n// import Form from \"react-validation\"\n\nconst RightFormCard = lazy(() =>\n  import(\"../../../../components/public/RightFormCard.js\"),\n)\nconst style = {\n  marginRight: \"10px\",\n}\nexport class Login extends Component {\n  state = {\n    type: \"password\",\n    username: \"\",\n    password: \"\",\n    loading: false,\n    validation: false,\n    message: \"\",\n    permission: \"\",\n    isLoggedIn: false,\n  }\n  constructor(props) {\n    super(props)\n    history.listen((location) => {\n      clearMessage() // clear message when changing location\n    })\n  }\n  handleOnChange = (event) => {\n    const name = event.target.name\n    this.setState({\n      [name]: event.target.value,\n    })\n  }\n  handleShowPassword = (event) => {\n    const { type } = this.state\n    event.preventDefault()\n    this.setState({\n      type: type === \"password\" ? \"text\" : \"password\",\n    })\n  }\n  handleSubmit = (event) => {\n    // const { history } = this.props;\n    const { username, password } = this.state\n    // const form = event.currentTarget\n    event.preventDefault()\n    this.setState({\n      validation: true,\n      loading: true,\n    })\n    if (username.length !== 0 && password.length !== 0) {\n      this.props\n        .authenticateUser(username, password)\n        .then(() => {\n          // history.push(\"/home\");\n          window.location.reload()\n        })\n        .catch(() => {\n          let { data } = this.props.messageResponse;\n          this.setState({\n            loading: false,\n            message: data.message\n          })\n        })\n    } else {\n      this.setState({\n        loading: false,\n      })\n    }\n  }\n  componentDidMount() {\n    this.redirectSuccessAuthentication()\n  }\n  redirectSuccessAuthentication() {\n    const isLoggedIn = this.props.userResponse.isLoggedIn\n    if (isLoggedIn) {\n      let roleName = this.props.userResponse.credentials.roles.roleName\n      let permission = roleName\n        ? roleName\n        : this.props.userResponse.credentials.roles\n\n      this.setState({\n        isLoggedIn: isLoggedIn,\n        permission: permission,\n      })\n    }\n  }\n  render() {\n    let {\n      type,\n      username,\n      password,\n      validation,\n      loading,\n      message,\n      permission,\n      isLoggedIn,\n    } = this.state\n    if (isLoggedIn) {\n      if (permission === Roles.SUPER_ADMIN || permission === Roles.ADMIN) {\n        return <Redirect to=\"/app\" />\n      } else {\n        return <Redirect to=\"/home\" />\n      }\n    }\n    return (\n      <>\n        <CHeader position=\"sticky\">\n          <CContainer>\n            <Link className=\"nav-link\" to=\"/home\" style={{ cursor: \"pointer\" }}>\n              <h2 className=\"nav-item\">Logo</h2>\n            </Link>\n          </CContainer>\n        </CHeader>\n        <div className=\"min-vh-100 d-flex flex-row align-items-center text-dark \">\n          <CContainer>\n            <CRow className=\"justify-content-center \">\n              <CCol md=\"12\" lg=\"8\">\n                <CCardGroup className=\"shadow-lg \">\n                  <CCard className=\"p-4 m-0 left-to-right form-container border-0\">\n                    <CCardBody>\n                      <CForm\n                        noValidate\n                        validated={validation}\n                        onSubmit={this.handleSubmit}\n                      >\n                        <CCol\n                          sm=\"12\"\n                          md=\"12\"\n                          lg=\"12\"\n                          className=\"d-flex justify-content-center p-3\"\n                        >\n                          <h2 className=\"text-dark\">Login</h2>\n                        </CCol>\n                        <CInputGroup>\n                          <CCol xs=\"12\" sm=\"12\" md=\"12\" lg=\"12\">\n                            <CFormFloating className=\"mb-3 text-dark \">\n                              <CFormControl\n                                name=\"username\"\n                                type=\"text\"\n                                autoCorrect=\"false\"\n                                id=\"floatingInput\"\n                                placeholder=\"username\"\n                                onChange={this.handleOnChange}\n                                value={username}\n                                required\n                                className=\"rounded-pill  ps-4 pe-4\"\n                              />\n                              <CFormLabel\n                                htmlFor=\"floatingInput \"\n                                className=\"ps-4 pe-4\"\n                              >\n                                <FaIcons.FaUserCircle size={18} />\n                                <span className=\"ps-2\">Username</span>\n                              </CFormLabel>\n                              <CFormFeedback invalid>\n                                Please provide a valid username\n                              </CFormFeedback>\n                            </CFormFloating>\n                          </CCol>\n                        </CInputGroup>\n                        <CInputGroup>\n                          <CCol xs=\"12\" sm=\"12\" md=\"12\" lg=\"12\">\n                            <CFormFloating className=\"text-dark position-relative\">\n                              <CFormControl\n                                name=\"password\"\n                                type={type}\n                                id=\"floatingPassword\"\n                                autoCorrect=\"false\"\n                                placeholder=\"Password\"\n                                onChange={this.handleOnChange}\n                                value={password}\n                                required\n                                className=\"rounded-pill ps-4 pe-4\"\n                              />\n                              <CFormLabel\n                                htmlFor=\"exampleFormControlTextarea1 \"\n                                className=\"ps-4 pe-4\"\n                              >\n                                <FaIcons.FaLock size={18} />\n                                <span className=\"ps-2\">Password</span>\n                              </CFormLabel>\n                              <span\n                                onClick={this.handleShowPassword}\n                                className=\"position-absolute top-50 end-0 translate-middle-y ps-4 pe-4\"\n                              >\n                                {type === \"password\" ? (\n                                  <FaIcons.FaEyeSlash size={20} />\n                                ) : (\n                                  <FaIcons.FaEye size={20} />\n                                )}\n                              </span>\n                              <CFormFeedback invalid>\n                                Please provide a valid password\n                              </CFormFeedback>\n                            </CFormFloating>\n                          </CCol>\n                        </CInputGroup>\n\n                        <CCol\n                          sm=\"12\"\n                          md=\"12\"\n                          lg=\"12\"\n                          className=\"d-flex flex-column justify-content-center\"\n                        >\n                          <CButton\n                            type=\"submit\"\n                            color=\"info\"\n                            size=\"lg\"\n                            style={{ margin: \"20px auto\", width: \"50%\" }}\n                            className=\"d-flex justify-content-center align-items-center position-relative overflow-hidden login-btn\"\n                            disabled={loading}\n                          >\n                            {loading ? (\n                              <CSpinner size=\"sm\" />\n                            ) : (\n                              <span className=\"d-flex align-items-center login-icon me-2\">\n                                <FiIcons.FiLogIn size={20} />\n                              </span>\n                            )}\n\n                            <span className=\"label-btn \">Login</span>\n                          </CButton>\n\n                          <Link to=\"/password/forgot\">Forgot Password</Link>\n                        </CCol>\n                        {message && (\n                          <div className=\"form-group\">\n                            <div className=\"alert alert-danger\" role=\"alert\">\n                              {message}\n                            </div>\n                          </div>\n                        )}\n                      </CForm>\n                    </CCardBody>\n                  </CCard>\n                  <RightFormCard button=\"register\" />\n                </CCardGroup>\n              </CCol>\n            </CRow>\n          </CContainer>\n        </div>\n      </>\n    )\n  }\n}\nconst mapStateToProps = (state) => {\n  return {\n    userResponse: state.userResponse,\n    messageResponse: state.messageResponse,\n  }\n}\nexport default connect(mapStateToProps, { authenticateUser, clearMessage })(\n  Login,\n)\n","import { SET_MESSAGE, CLEAR_MESSAGE } from \"src/constants/userConstants\";\n\nexport const setMessage = (message, status) => async (dispatch) => {\n    dispatch({\n        type: SET_MESSAGE,\n        payload: {\n            status: status,\n            data: {\n                message: message\n            }\n        }\n    })\n\n}\nexport const setProductMessage = (message, status) => async (dispatch) => {\n    dispatch({\n        type: SET_MESSAGE,\n        payload: {\n            status: status,\n            data: {\n                message: message\n            }\n        }\n    })\n}\nexport const setImageMesssage = (message, status) => async (dispatch) => {\n    dispatch({\n        type: SET_MESSAGE,\n        payload: {\n            status: status,\n            data: {\n                message: message\n            }\n        }\n    })\n}\nexport const clearMessage = () => async (dispatch) => {\n    dispatch({\n        type: CLEAR_MESSAGE,\n        payload: {\n            status: '',\n            data: {\n                message: ''\n            }\n        }\n    })\n};","import { createBrowserHistory } from 'history';\n\nexport const history = createBrowserHistory();"],"sourceRoot":""}