{"version":3,"sources":["../../inventory-management-system-reactjs/src/components/modals/product/ProductEditorModal.js"],"names":["ProductEditorModal","Component","constructor","props","super","productDetail","productName","productPrice","productDescriptions","barcode","brandName","brandId","categoryName","categoryId","threshold","productId","onResetValue","this","setState","getCategories","catch","status","data","messageResponse","message","getBrands","failMessage","componentDidUpdate","prevProps","prevState","manageModalVisible","manageBrandsResponse","manageCategoryResponse","manageScannerResponse","brandResponse","action","brands","categoryResponse","categories","modalVisibleResponse","visible","icon","console","log","product","productDescription","brand","category","fileImages","id","name","editorState","EditorState","createWithContent","convertFromRaw","JSON","parse","createEmpty","getImages","clearMessage","productImage","removedImages","loadImage","image","fileName","state","reader","FileReader","onloadend","push","data_url","result","file","image_created","filename","readAsDataURL","handleVisibility","handleImageOnchange","imageList","addUpdateIndex","onEditorStateChange","getCurrentContent","handleOnChange","event","target","value","handleSubmit","preventDefault","loading","saveProduct","editProduct","productData","FormData","length","i","append","stringify","convertToRaw","then","successFully","updateProduct","scannerResponse","decoded","removeImage","bind","alert","productDetails","images","autoGenerateBarcode","componentDidMount","ProductApiService","getImage","path","response","error","error_message","toString","code","index","render","styleOption","fontWeight","fontSize","size","fullscreen","scrollable","onDismiss","setProductModal","className","onSubmit","role","color","dismissible","multiple","onChange","maxNumber","dataURLKey","onError","toastVisible","onImageUpload","onImageRemove","isDragging","dragProps","style","backgroundColor","border","undefined","onClick","map","sm","md","lg","src","alt","width","type","placeholder","required","htmlFor","disabled","variant","setScanModal","wrapperClassName","editorClassName","toolbar","options","form","connect","credentials","userResponse","productResponse","productResponser","getDecodedBarcode"],"mappings":"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","file":"static/js/63.41d606bc.chunk.js","sourcesContent":["import React, { Component } from \"react\"\nimport { connect } from \"react-redux\"\nimport {\n  CModal,\n  CModalHeader,\n  CModalTitle,\n  CModalBody,\n  CModalFooter,\n  CButton,\n  CContainer,\n  CRow,\n  CCol,\n  CAlert,\n  CFormFloating,\n  CFormControl,\n  CFormLabel,\n  CForm,\n  CSpinner,\n  CFormSelect,\n} from \"@coreui/react\"\n\n//icons\n// import * as FaIcons from 'react-icons/fa'\nimport { MdDelete } from \"react-icons/md\"\nimport * as BiIcons from \"react-icons/bi\"\n\n// npm packages\nimport ImageUploading from \"react-images-uploading\"\nimport { convertFromRaw, convertToRaw, EditorState } from \"draft-js\"\nimport { Editor } from \"react-draft-wysiwyg\"\n\n// action\nimport { saveProduct } from \"src/service/apiActions/productAction/productAction\"\nimport { setProductModal } from \"../../../service/apiActions/modalAction/modalAction\"\nimport { clearMessage } from \"src/service/apiActions/messageAction/messageAction\"\nimport { getImage } from \"src/service/apiActions/productAction/productAction\"\nimport { getCategories } from \"src/service/apiActions/categoryAction/categoryAction\"\nimport { getBrands } from \"src/service/apiActions/brandAction/brandAction\"\nimport { updateProduct } from \"src/service/apiActions/productAction/productAction\"\n//api\nimport ProductApiService from \"src/service/restAPI/ProductApiService\"\nimport ScanBarcodeModal from \"../scanBarcode/ScanBarcodeModal\"\nimport { setScanModal } from \"../../../service/apiActions/modalAction/modalAction\"\nimport { getDecodedBarcode } from \"src/service/apiActions/scannerAction/scannerAction\"\nexport class ProductEditorModal extends Component {\n  constructor(props) {\n    super(props)\n\n    this.removeImage = this.removeImage.bind(this)\n\n    this.state = {\n      visible: false,\n      alert: true,\n      loading: false,\n      successFully: false,\n      message: \"\",\n      status: \"\",\n      productDetails: this.productDetail,\n      action: \"\",\n      icon: \"\",\n      images: [],\n      productImage: [],\n      removedImages: [],\n\n      editorState: EditorState.createEmpty(),\n      autoGenerateBarcode: false,\n      brands: [],\n      categories: [],\n    }\n  }\n\n  productDetail = {\n    productName: \"\",\n    productPrice: 0,\n    productDescriptions: \"\",\n    barcode: \"\",\n    brandName: \"\",\n    brandId: \"\",\n    categoryName: \"\",\n    categoryId: \"\",\n    threshold: 0,\n    productId: \"\",\n  }\n  onResetValue = () => {\n    this.setState(() => this.productDetail)\n  }\n  componentDidMount() {\n    this.loadImage()\n    this.getBrands()\n    this.getCategories()\n  }\n  getCategories = () => {\n    this.props.getCategories().catch(() => {\n      let { status, data } = this.props.messageResponse\n      this.setState({\n        message: data.message,\n      })\n    })\n  }\n  getBrands = () => {\n    this.props.getBrands().catch(() => {\n      let failMessage = this.props.messageResponse\n      this.setState({\n        message: failMessage.data.message,\n      })\n    })\n  }\n\n  componentDidUpdate = (prevProps, prevState) => {\n    this.manageModalVisible(prevProps, prevState)\n    this.manageBrandsResponse(prevProps, prevState)\n    this.manageCategoryResponse(prevProps, prevState)\n    this.manageScannerResponse(prevProps, prevState)\n  }\n  manageBrandsResponse = (prevProps, prevState) => {\n    if (prevProps.brandResponse !== this.props.brandResponse) {\n      let { status, action, data } = this.props.brandResponse\n      if (status === 200 && action === \"GETBRANDS\") {\n        this.setState({\n          brands: data.brands,\n        })\n      }\n    }\n  }\n  manageCategoryResponse = (prevProps, prevState) => {\n    if (prevProps.categoryResponse !== this.props.categoryResponse) {\n      let { action, data, status } = this.props.categoryResponse\n      if (action === \"GET_CATEGORIES\" && status === 200) {\n        this.setState({\n          categories: data.categories,\n        })\n      }\n    }\n  }\n  manageModalVisible = (prevProps, prevState) => {\n    if (prevProps.modalVisibleResponse !== this.props.modalVisibleResponse) {\n      let { action, visible, icon } = this.props.modalVisibleResponse\n      console.log(this.props.modalVisibleResponse)\n      if (action === \"Add\") {\n        this.setState({\n          visible: visible,\n          action: action,\n          icon: icon,\n        })\n      } else if (action === \"Edit\") {\n        let { product, action, visible, icon } = this.props.modalVisibleResponse\n        let {\n          productName,\n          productDescription,\n          barcode,\n          productPrice,\n          brand,\n          category,\n          fileImages,\n          id,\n        } = product\n\n        this.setState({\n          visible: visible,\n          action: action,\n          icon: icon,\n          productName: productName,\n          productPrice: productPrice,\n          barcode: barcode,\n          brandName: brand && brand.brand,\n          categoryName: category && category.name,\n          productId: id,\n          editorState: productDescription\n            ? EditorState.createWithContent(\n                convertFromRaw(JSON.parse(productDescription)),\n              )\n            : EditorState.createEmpty(),\n        })\n\n        this.getImages(fileImages)\n      } else if (action === \"close\") {\n        this.props.clearMessage()\n        this.setState({\n          visible: this.props.modalVisibleResponse.visible,\n          productName: \"\",\n          productPrice: \"\",\n          barcode: \"\",\n          brandName: \"\",\n          categoryName: \"\",\n          editorState: EditorState.createEmpty(),\n          productImage: [],\n          removedImages: [],\n        })\n      }\n    }\n  }\n  async getImages(fileImages) {\n    for (let i = 0; i < fileImages.length; i++) {\n      ProductApiService.getImage(fileImages[i].path, fileImages[i].fileName)\n        .then((response) => {\n          this.loadImage(response.data, fileImages[i].fileName)\n        })\n        .catch((error) => {\n          const message =\n            (error.response &&\n              error.response.data &&\n              error.response.data.message) ||\n            error.message ||\n            error.error_message ||\n            error.toString()\n\n          const status =\n            (error.response &&\n              error.response.data &&\n              error.response.data.code) ||\n            error.status ||\n            error.toString()\n          this.setState({\n            status: status,\n            message: message,\n          })\n        })\n    }\n  }\n\n  loadImage = (image, fileName) => {\n    let { productImage } = this.state\n    if (!image) {\n      return\n    }\n    let reader = new FileReader()\n    reader.onloadend = () => {\n      productImage.push({\n        data_url: reader.result,\n        file: null,\n        image_created: true,\n        filename: fileName,\n      })\n      this.setState({\n        productImage: productImage,\n      })\n    }\n    if (image) {\n      reader.readAsDataURL(image)\n    }\n  }\n\n  handleVisibility = (state) => {\n    this.setState({\n      visible: false,\n    })\n  }\n\n  handleImageOnchange = (imageList, addUpdateIndex) => {\n    this.setState({\n      productImage: imageList,\n    })\n  }\n\n  onEditorStateChange = (editorState) => {\n    const rawState = editorState.getCurrentContent()\n    this.setState({\n      editorState,\n    })\n  }\n\n  handleOnChange = (event) => {\n    let name = event.target.name\n    this.setState({\n      [name]: event.target.value,\n    })\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault()\n\n    let { action } = this.state\n\n    this.setState({\n      loading: true,\n    })\n\n    if (action === \"Add\") {\n      this.saveProduct()\n    } else if (action === \"Edit\") {\n      this.editProduct()\n    } else {\n      this.setState({\n        visible: this.props.modalVisibleResponse.visible,\n      })\n    }\n  }\n\n  saveProduct = () => {\n    let {\n      productName,\n      productPrice,\n      productImage,\n      barcode,\n      editorState,\n      categoryName,\n      brandName,\n    } = this.state\n    let productData = new FormData()\n\n    if (productImage.length > 0) {\n      for (let i = 0; i < productImage.length; i++) {\n        if (productImage[i].file) {\n          productData.append(\"productImages[]\", productImage[i].file)\n        }\n      }\n    } else {\n      productData.append(\"productImages[]\", productImage)\n    }\n\n    productData.append(\"barcode\", barcode)\n    productData.append(\"productName\", productName)\n    productData.append(\"productPrice\", productPrice)\n    productData.append(\"brandName\", brandName)\n    productData.append(\"categoryName\", categoryName)\n    productData.append(\n      \"productDescription\",\n      JSON.stringify(convertToRaw(editorState.getCurrentContent())),\n    )\n    this.props\n      .saveProduct(productData)\n      .then(() => {\n        this.onResetValue()\n        const successMessage = this.props.messageResponse\n        if (successMessage.status === 200) {\n          this.setState({\n            loading: false,\n            successFully: true,\n            editorState: EditorState.createEmpty(),\n            productImage: [],\n          })\n        } else {\n          this.setState({\n            loading: false,\n            productImage: [],\n            successFully: false,\n            editorState: EditorState.createEmpty(),\n          })\n        }\n      })\n      .catch(() => {\n        this.onResetValue()\n        this.setState({\n          loading: false,\n          productImage: [],\n          editorState: EditorState.createEmpty(),\n        })\n      })\n  }\n\n  editProduct = () => {\n    let {\n      productName,\n      productPrice,\n      productImage,\n      barcode,\n      editorState,\n      categoryName,\n      brandName,\n      productId,\n      removedImages,\n    } = this.state\n    let productData = new FormData()\n\n    if (productImage.length > 0) {\n      for (let i = 0; i < productImage.length; i++) {\n        if (productImage[i].file) {\n          productData.append(\"productImages[]\", productImage[i].file)\n        }\n      }\n    } else {\n      productData.append(\"productImages[]\", productImage)\n    }\n\n    productData.append(\"removedImages[]\", removedImages)\n    productData.append(\"barcode\", barcode)\n    productData.append(\"productName\", productName)\n    productData.append(\"productPrice\", productPrice)\n    productData.append(\"brandName\", brandName)\n    productData.append(\"categoryName\", categoryName)\n    productData.append(\n      \"productDescription\",\n      JSON.stringify(convertToRaw(editorState.getCurrentContent())),\n    )\n    this.props\n      .updateProduct(productId, productData)\n      .then(() => {\n        const { status } = this.props.messageResponse\n        if (status === 200) {\n          this.setState({\n            loading: false,\n            successFully: true,\n          })\n        } else {\n          this.setState({\n            loading: false,\n            successFully: false,\n          })\n        }\n      })\n      .catch(() => {\n        let { status, data } = this.props.messageResponse\n        this.setState({\n          loading: false,\n        })\n      })\n  }\n\n  removeImage(index) {\n    let { productImage, removedImages } = this.state\n    if (productImage[index].filename) {\n      removedImages.push(productImage[index].filename)\n    }\n  }\n  manageScannerResponse = (prevProps, prevState) => {\n    if (prevProps.scannerResponse !== this.props.scannerResponse) {\n      let { action, decoded } = this.props.scannerResponse\n      console.log(this.props.scannerResponse)\n\n      if (action === \"inputBarcode\") {\n        this.setState({ barcode: decoded })\n      }\n    }\n  }\n  render() {\n    let {\n      visible,\n      alert,\n      productName,\n      productPrice,\n      productImage,\n      barcode,\n      editorState,\n      loading,\n      successFully,\n      message,\n      action,\n      icon,\n      categoryName,\n      categoryId,\n      brandName,\n      brandId,\n      threshold,\n      autoGenerateBarcode,\n      brands,\n      categories,\n    } = this.state\n    const styleOption = {\n      fontWeight: \"600\",\n      fontSize: \"16px\",\n    }\n    return (\n      <>\n        <ScanBarcodeModal />\n        <CModal size=\"xl\" visible={visible} fullscreen=\"lg\" scrollable>\n          <CModalHeader\n            onDismiss={() => {\n              this.props.setProductModal(false, \"close\")\n            }}\n            className=\"modal-header\"\n          >\n            <CModalTitle>{action} Product</CModalTitle>\n          </CModalHeader>\n          <CForm\n            onSubmit={this.handleSubmit}\n            className=\"modal-product-form\"\n            id=\"a-form\"\n          >\n            <CModalBody>\n              {message && (\n                <div className=\"form-group\">\n                  <div\n                    className={\n                      successFully\n                        ? \"alert alert-success\"\n                        : \"alert alert-danger\"\n                    }\n                    role=\"alert\"\n                  >\n                    {message}\n                  </div>\n                </div>\n              )}\n              <CAlert color=\"warning\" dismissible visible={alert}>\n                <strong>Maximum 10 images</strong>\n              </CAlert>\n              <ImageUploading\n                multiple\n                value={productImage}\n                onChange={this.handleImageOnchange}\n                maxNumber={10}\n                dataURLKey=\"data_url\"\n                onError={() =>\n                  this.setState({\n                    toastVisible: false,\n                  })\n                }\n              >\n                {({\n                  imageList,\n                  onImageUpload,\n                  // onImageUpdate,\n                  onImageRemove,\n                  isDragging,\n                  dragProps,\n                }) => (\n                  // write your building UI\n                  <div className=\"upload__image-wrapper\">\n                    <CContainer className=\"upload-container\">\n                      <CButton\n                        color=\"secondary\"\n                        className=\"upload-btn\"\n                        style={\n                          isDragging\n                            ? {\n                                backgroundColor: \"#8E9293\",\n                                border: \"4px dashed #ffffff\",\n                              }\n                            : undefined\n                        }\n                        onClick={onImageUpload}\n                        {...dragProps}\n                      >\n                        Select Image or Drag Here\n                      </CButton>\n                    </CContainer>\n                    <CRow className=\" images-contianer shadow \">\n                      {imageList.map((image, index) => (\n                        <CCol key={index} sm=\"4\" md=\"2\" lg=\"3\">\n                          <div className=\"image-item d-flex \">\n                            <img src={image[\"data_url\"]} alt=\"\" width=\"100\" />\n                            <div className=\"image-item__btn-wrapper\">\n                              {/* <RiEdit2Line\n                                size={30}\n                                color=\"#007CFF\"\n                                onClick={() => onImageUpdate(index)}\n                              /> */}\n                              <MdDelete\n                                size={30}\n                                color=\"#FF0000\"\n                                onClick={() => {\n                                  this.removeImage(index)\n                                  onImageRemove(index)\n                                }}\n                              />\n                            </div>\n                          </div>\n                        </CCol>\n                      ))}\n                    </CRow>\n                  </div>\n                )}\n              </ImageUploading>\n              <CRow className=\"mt-5\">\n                <CCol sm=\"12\" md=\"6\" lg>\n                  <CFormFloating className=\"mb-3\">\n                    <CFormControl\n                      type=\"text\"\n                      id=\"floatingInputProductName\"\n                      placeholder=\"Product Name\"\n                      name=\"productName\"\n                      value={productName}\n                      onChange={this.handleOnChange}\n                      required\n                    />\n                    <CFormLabel htmlFor=\"floatingInputProductName\">\n                      Product Name\n                    </CFormLabel>\n                  </CFormFloating>\n                </CCol>\n                <CCol sm=\"12\" md=\"6\" lg>\n                  <CFormFloating className=\"mb-3\">\n                    <CFormControl\n                      type=\"number\"\n                      id=\"floatingProductPrice\"\n                      placeholder=\"Product Price\"\n                      name=\"productPrice\"\n                      value={productPrice}\n                      onChange={this.handleOnChange}\n                      required\n                    />\n                    <CFormLabel htmlFor=\"floatingInput\">\n                      Product Price\n                    </CFormLabel>\n                  </CFormFloating>\n                </CCol>\n                <CCol sm=\"12\" md=\"6\" lg>\n                  <div className=\"d-flex align-items-center justify-content-between\">\n                    <CFormFloating className=\"mb-3 w-100\">\n                      <CFormControl\n                        type=\"number\"\n                        id=\"floatingBarcode\"\n                        placeholder=\"Product Barcode\"\n                        name=\"barcode\"\n                        value={barcode}\n                        onChange={this.handleOnChange}\n                        required\n                        disabled={action === \"Edit\" ? true : false}\n                        // disabled={autoGenerateBarcode}\n                      />\n                      <CFormLabel htmlFor=\"floatingBarcode\">\n                        Product Barcode\n                      </CFormLabel>\n                    </CFormFloating>\n                    <div>\n                      <CButton\n                        className=\"pt-2 pb-2 ms-2\"\n                        type=\"button\"\n                        color=\"info\"\n                        variant=\"outline\"\n                        id=\"btn-scan-barcode\"\n                        onClick={() =>\n                          this.props.setScanModal(!false, \"inputBarcode\")\n                        }\n                      >\n                        <BiIcons.BiBarcodeReader size=\"24\" />\n                      </CButton>\n                    </div>\n                  </div>\n\n                  {/* <CRow className=\"align-items-end\">\n                    <CCol sm=\"8\" md=\"8\" lg=\"8\">\n                      <CFormFloating className=\"mb-3\">\n                        <CFormControl\n                          type=\"number\"\n                          id=\"floatingBarcode\"\n                          placeholder=\"Product Barcode\"\n                          name=\"barcode\"\n                          value={barcode}\n                          onChange={this.handleOnChange}\n                          required\n                          disabled={autoGenerateBarcode}\n                        />\n                        <CFormLabel htmlFor=\"floatingBarcode\">\n                          Product Barcode\n                        </CFormLabel>\n                      </CFormFloating>\n                    </CCol>\n                    <CCol sm=\"4\" md=\"4\" lg=\"4\">\n                      <CFormCheck\n                        value={autoGenerateBarcode}\n                        onChange={() =>\n                          this.setState({\n                            autoGenerateBarcode: !autoGenerateBarcode,\n                          })\n                        }\n                        name=\"autoGenerateBarcode\"\n                        className=\"mb-3\"\n                        id=\"autoGenerateBarcode\"\n                        label=\"Generate Barcode\"\n                      />\n                    </CCol>\n                  </CRow> */}\n                </CCol>\n                <CCol sm=\"12\" md=\"6\" lg>\n                  <CFormFloating className=\"mb-3\">\n                    <CFormControl\n                      type=\"number\"\n                      id=\"floatingThreshold\"\n                      placeholder=\"Product Threshold\"\n                      name=\"threshold\"\n                      value={threshold}\n                      onChange={this.handleOnChange}\n                    />\n                    <CFormLabel htmlFor=\"floatingThreshold\">\n                      Product Threshold\n                    </CFormLabel>\n                  </CFormFloating>\n                </CCol>\n                <CCol sm=\"12\" md=\"6\" lg>\n                  <CFormFloating className=\"mb-3\">\n                    <CFormSelect\n                      value={brandName}\n                      onChange={this.handleOnChange}\n                      name=\"brandName\"\n                      id=\"floatingSelectBrand\"\n                      aria-label=\"Brand Names\"\n                    >\n                      <option value=\"\">Choose Brand</option>\n                      {brands.data &&\n                        brands.data.map((brand, index) => {\n                          return (\n                            <option\n                              key={index}\n                              value={brand.brandName}\n                              style={{ ...styleOption }}\n                            >\n                              {brand.brandName}\n                            </option>\n                          )\n                        })}\n                    </CFormSelect>\n                    <CFormLabel htmlFor=\"floatingSelectBrand\">Brand</CFormLabel>\n                  </CFormFloating>\n                </CCol>\n                <CCol sm=\"12\" md=\"6\" lg>\n                  <CFormFloating className=\"mb-3\">\n                    <CFormSelect\n                      value={categoryName}\n                      onChange={this.handleOnChange}\n                      name=\"categoryName\"\n                      id=\"floatingSelectCategory\"\n                      aria-label=\"Categories\"\n                    >\n                      <option value=\"\">Choose Category</option>\n                      {categories.data &&\n                        categories.data.map((category, index) => {\n                          return (\n                            <option\n                              key={index}\n                              value={category.categoryName}\n                              style={{ ...styleOption }}\n                            >\n                              {category.categoryName}\n                            </option>\n                          )\n                        })}\n                    </CFormSelect>\n                    <CFormLabel htmlFor=\"floatingSelectCategory\">\n                      Category\n                    </CFormLabel>\n                  </CFormFloating>\n                </CCol>\n\n                <CCol sm=\"12\" md=\"12\" lg=\"12\">\n                  <Editor\n                    editorState={editorState}\n                    wrapperClassName=\"editor-wrapper\"\n                    editorClassName=\"editor\"\n                    onEditorStateChange={this.onEditorStateChange}\n                    placeholder=\"Product Description\"\n                    toolbar={{\n                      options: [\n                        \"inline\",\n                        \"blockType\",\n                        \"fontSize\",\n                        \"fontFamily\",\n                        \"list\",\n                        \"textAlign\",\n                        \"colorPicker\",\n                        \"emoji\",\n                        \"remove\",\n                        \"history\",\n                      ],\n                    }}\n                  />\n                </CCol>\n              </CRow>\n            </CModalBody>\n          </CForm>\n          <CModalFooter className=\"modal-footer\">\n            <CButton\n              color=\"secondary\"\n              variant=\"ghost\"\n              onClick={() => this.props.setProductModal(!visible, \"close\")}\n              className=\"text-body\"\n            >\n              Close\n            </CButton>\n            <CButton\n              type=\"submit\"\n              color=\"info\"\n              form=\"a-form\"\n              className=\"d-flex justify-content-center align-items-center position-relative \"\n              disabled={loading}\n            >\n              {loading ? (\n                <CSpinner size=\"sm\" />\n              ) : (\n                <span className=\"d-flex align-items-center login-icon me-2\">\n                  {icon}\n                </span>\n              )}\n              {action === \"Edit\" ? \"Update\" : \"Create\"} Product\n            </CButton>\n          </CModalFooter>\n        </CModal>\n      </>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    modalVisibleResponse: state.modalVisibleResponse,\n    messageResponse: state.messageResponse,\n    credentials: state.userResponse.credentials,\n    productResponse: state.productResponser,\n    brandResponse: state.brandResponse,\n    categoryResponse: state.categoryResponse,\n    scannerResponse: state.scannerResponse,\n  }\n}\nexport default connect(mapStateToProps, {\n  setProductModal,\n  saveProduct,\n  clearMessage,\n  getImage,\n  getCategories,\n  getBrands,\n  updateProduct,\n  setScanModal,\n  getDecodedBarcode,\n})(ProductEditorModal)\n"],"sourceRoot":""}