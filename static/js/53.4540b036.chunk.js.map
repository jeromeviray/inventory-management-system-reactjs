{"version":3,"sources":["views/common/cart/checkout/Checkout.js","service/restAPI/CartApiService.js","service/apiActions/cartAction/cartAction.js"],"names":["Checkout","Component","state","token","message","cart","cartItems","checked","pendingItem","totalAmount","quantity","retrieveCartItems","this","props","getCart","manageCartItemsResponse","prevProps","prevState","cartResponse","action","status","data","setState","Array","length","fill","handOnRemoveItem","id","removeCartItem","then","handleOnChange","position","check","map","item","index","find","indexOf","splice","push","totalPrice","reduce","sum","currentState","amount","paymentDetailsOnChange","manageStatus","color","shape","componentDidMount","componentDidUpdate","render","headerStyle","fontWeight","className","style","addedAt","product","inventory","promo","disabled","totalStock","percentage","discount","productPrice","price","name","value","onChange","rounded","src","fileImages","path","fileName","NO_IMAGE_BASE64","width","height","productName","fontSize","toFixed","onClick","connect","userResponse","messageResponse","clearMessage","getOrderItems","addToCart","axios","post","headers","authHeader","get","removeItem","console","log","delete","async","CartApiService","response","dispatch","type","ADD_TO_CART","payload","SET_MESSAGE","Promise","resolve","error","errorMessage","toString","code","reject","GET_CART_ITEMS","REMOVE_ITEM"],"mappings":"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","file":"static/js/53.4540b036.chunk.js","sourcesContent":["import React, { Component } from \"react\"\nimport {\n  CRow,\n  CCol,\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCardFooter,\n  CImage,\n  CFormCheck,\n  CCloseButton,\n\n  CBadge,\n  CContainer,\n} from \"@coreui/react\"\nimport { connect } from \"react-redux\"\n//action\nimport {\n  getCart,\n  removeCartItem,\n} from \"src/service/apiActions/cartAction/cartAction\"\nimport { clearMessage } from \"src/service/apiActions/messageAction/messageAction\"\nimport { getOrderItems } from \"src/service/apiActions/orderAction/orderAction\"\n\nimport { NO_IMAGE_BASE64 } from \"src/service/redux/constants\"\n\n//icon\n// import * as IoIcons from \"react-icons/io5\";\n\nexport class Checkout extends Component {\n  state = {\n    // isLoggedIn: false,\n    // permission: '',\n    token: \"\",\n    message: \"\",\n    cart: [],\n    cartItems: [],\n\n    checked: [],\n    pendingItem: [],\n    totalAmount: 0,\n    quantity: 0,\n  }\n  componentDidMount() {\n    this.retrieveCartItems()\n  }\n  retrieveCartItems = () => {\n    this.props.getCart()\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    this.manageCartItemsResponse(prevProps, prevState)\n  }\n  manageCartItemsResponse = (prevProps, prevState) => {\n    if (prevProps.cartResponse !== this.props.cartResponse) {\n      let { action, status, data } = this.props.cartResponse\n      if (action === \"CARTITEMS\" && status === 200) {\n        this.setState({\n          checked: new Array(data.cart.cartItems.length).fill(false),\n          cart: data.cart,\n          cartItems: data.cart.cartItems,\n        })\n      }\n    }\n  }\n  handOnRemoveItem = (id) => {\n    let { token } = this.state\n    this.props\n      .removeCartItem(id)\n      .then(() => {\n        this.retrieveCartItems(token)\n      })\n  }\n  handleOnChange = (position) => {\n    let { checked, pendingItem, cartItems } = this.state\n    let check = checked.map((item, index) => {\n      return index === position ? !item : item\n    })\n\n    let find = pendingItem.indexOf(cartItems[position])\n\n    if (find > -1) {\n      pendingItem.splice(find, 1)\n    } else {\n      pendingItem.push(cartItems[position])\n    }\n    let totalPrice = check.reduce((sum, currentState, index) => {\n      if (currentState === true) {\n        return sum + cartItems[index].amount\n      }\n      return sum\n    }, 0)\n    let quantity = check.reduce((quantity, currentState, index) => {\n      if (currentState === true) {\n        return quantity + cartItems[index].quantity\n      }\n      return quantity\n    }, 0)\n    this.setState({\n      checked: check,\n      totalAmount: totalPrice,\n      quantity: quantity,\n    })\n    this.props.paymentDetailsOnChange(pendingItem, quantity, totalPrice)\n  }\n\n  manageStatus = (status) => {\n    switch (status) {\n      case \"OK\":\n        return (\n          <CBadge color=\"success\" shape=\"rounded-pill\">\n            {status}\n          </CBadge>\n        )\n      case \"LOW\":\n        return (\n          <CBadge color=\"warning\" shape=\"rounded-pill\">\n            {status}\n          </CBadge>\n        )\n      case \"OUT_OF_STOCK\":\n        return (\n          <CBadge color=\"danger\" shape=\"rounded-pill\">\n            OUT OF STOCK\n          </CBadge>\n        )\n      default:\n        return (\n          <CBadge color=\"danger\" shape=\"rounded-pill\">\n            {status}\n          </CBadge>\n        )\n    }\n  }\n  render() {\n    let { cartItems, checked } = this.state\n    const headerStyle = {\n      fontWeight: \"800\",\n    }\n    return (\n      <>\n        <CContainer>\n\n          <CCard className=\"mb-3 border-0\">\n            <CCardHeader>\n              <div className=\"d-flex justify-content-between\">\n                <div>\n                  <span style={{ ...headerStyle }}>Select</span>\n                </div>\n                <div>\n                  <span style={{ ...headerStyle }}>Item</span>\n                </div>\n                <div>\n                  <span style={{ ...headerStyle }}>Price</span>\n                </div>\n                <div>\n                  <span style={{ ...headerStyle }}>Quantity</span>\n                </div>\n                <div>\n                  <span style={{ ...headerStyle }}>Action</span>\n                </div>\n              </div>\n            </CCardHeader>\n\n            <CCardBody>\n              {cartItems.length > 0 ? (\n                cartItems.map((item, index) => {\n                  const { quantity, addedAt, } = item\n                  const { product, inventory, promo } = item.product\n                  let disabled = promo ? false : inventory.totalStock > 0 ? false : true;\n                  let status = promo && promo.status;\n                  const percentage = promo && promo.percentage\n                  let discount = (product.productPrice * percentage) / 100\n                  let price = product.productPrice - discount\n                  let amount = quantity * (price)\n                  return (\n                    <CCard\n                      key={index}\n                      className={\n                        checked[index] ? \"border border-success mb-3\" : \"mb-3\"\n                      }\n                    >\n                      <CCardBody>\n                        <div className=\"d-flex align-items-start\">\n                          <div className=\"me-3\">\n                            <CFormCheck\n                              color=\"success\"\n                              name=\"checked\"\n                              id=\"flexCheckChecked\"\n                              checked={checked[index]}\n                              value={item}\n                              onChange={() => this.handleOnChange(index)}\n                              disabled={disabled}\n                            />\n                          </div>\n\n                          <CImage\n                            rounded\n                            src={\n                              product.fileImages.length > 0\n                                ? \"/images/products/\" +\n                                product.fileImages[0].path +\n                                product.fileImages[0].fileName\n                                : NO_IMAGE_BASE64\n                            }\n                            width={100}\n                            height={100}\n                          />\n                          <div className=\"ms-2  w-100\">\n                            <CRow className=\"d-flex justify-content-between\">\n                              <CCol className=\"ps-4 text-dark\">\n                                {product.productName}\n                              </CCol>\n                              <CCol className=\"text-dark d-flex flex-column align-items-center\">\n                                <span>\n                                  &#8369;{status === \"ONGOING\" ? (\n                                    <>\n                                      <span\n                                        className=\"text-muted text-decoration-line-through me-2\"\n                                        style={{ fontSize: \"16px\" }}\n                                      >\n                                        {product.productPrice.toFixed(2)}\n                                      </span>\n                                      <span>{price.toFixed(2)}</span><br />\n                                      <span\n                                        className=\"text-muted \"\n                                        style={{ fontSize: \"16px\" }}\n                                      >\n                                        {percentage + \"%\"} discount\n                                      </span>\n                                    </>\n                                  ) : (\n                                    product.productPrice.toFixed(2)\n                                  )}\n                                </span>\n                              </CCol>\n                              <CCol className=\"text-dark d-flex flex-column align-items-center\">\n                                <span>{quantity}</span>\n                              </CCol>\n                              <CCol className=\"text-dark  d-flex justify-content-end\">\n                                <span>\n                                  <CCloseButton\n                                    onClick={() =>\n                                      this.handOnRemoveItem(item.id)\n                                    }\n                                  />\n                                </span>\n                              </CCol>\n                            </CRow>\n                          </div>\n                        </div>\n                      </CCardBody>\n                      <CCardFooter\n                        className={\n                          checked[index] ? \"bg-success text-white\" : \"\"\n                        }\n                      >\n                        <div className=\"d-flex justify-content-between align-items-center w-100 \">\n                          <span className=\"text-muted font-style\">\n                            <div>\n                              {addedAt}\n                            </div>\n                            <div>\n                              Stock: <span>{inventory.totalStock}</span>{disabled ? this.manageStatus(inventory.status) : \"\"}\n                            </div>\n                          </span>\n                          <div className=\"d-flex align-items-center\">\n                            <span className=\"text-muted font-style me-2\">\n                              Amount\n                            </span>\n                            <span style={{ fontWeight: \"500\" }}>\n                              &#8369;{amount.toFixed(2)}\n                            </span>\n                          </div>\n                        </div>\n                      </CCardFooter>\n                    </CCard>\n                  )\n                })\n              ) : (\n                <CCard className=\"mb-3 border-0\">\n                  <CCardBody className=\"text-center\">\n                    No Cart Item Added\n                  </CCardBody>\n                </CCard>\n              )}\n            </CCardBody>\n          </CCard>\n        </CContainer>\n      </>\n    )\n  }\n}\nconst mapStateToProps = (state) => {\n  return {\n    userResponse: state.userResponse,\n    messageResponse: state.messageResponse,\n    cartResponse: state.cartResponse,\n  }\n}\nexport default connect(mapStateToProps, {\n  getCart,\n  removeCartItem,\n  clearMessage,\n  getOrderItems,\n})(Checkout)\n","import authHeader from '../auth/authHeader';\nimport axios from './RestApi'\n\nexport class CartApiService {\n    addToCart(id) {\n        return axios.post(\"/cart/item/add/\" + id, {\n\n        }, {\n            headers: authHeader()\n        })\n    }\n    getCart() {\n        return axios.get(\"/cart\", {\n            headers: authHeader()\n        })\n    }\n    removeItem(id) {\n        console.log(id);\n        return axios.delete(\"/cart/item/remove/\" + id, {\n            headers: authHeader()\n        });\n    }\n}\n\nexport default new CartApiService();","import { SET_MESSAGE } from \"src/constants/userConstants\";\nimport { ADD_TO_CART, GET_CART_ITEMS, REMOVE_ITEM } from \"src/service/redux/constants\";\nimport CartApiService from \"src/service/restAPI/CartApiService\"\n\nexport const addToCart = (id) => async (dispatch) => {\n    return CartApiService.addToCart(id)\n        .then(\n            (response) => {\n                dispatch({\n                    type: ADD_TO_CART,\n                    payload: {\n                        status: 200,\n                        action: \"ADDTOCART\",\n                        data: {\n\n                        }\n                    }\n                })\n                dispatch({\n                    type: SET_MESSAGE,\n                    payload: {\n                        status: 200,\n                        data: {\n                            message: \"Added Successfully\"\n                        }\n                    }\n                })\n                return Promise.resolve();\n            },\n            (error) => {\n                const errorMessage =\n                    (error.response &&\n                        error.response.data &&\n                        error.response.data.message) ||\n                    error.message ||\n                    error.toString();\n\n                const status = (error.response &&\n                    error.response.data &&\n                    error.response.data.code) ||\n                    error.toString();\n\n                dispatch({\n                    type: SET_MESSAGE,\n                    payload: {\n                        status: status,\n                        data: {\n                            message: errorMessage\n                        }\n                    }\n                })\n                return Promise.reject();\n            }\n        )\n}\nexport const getCart = () => async (dispatch) => {\n    return CartApiService.getCart().then(\n        (response) => {\n            dispatch({\n                type: GET_CART_ITEMS,\n                payload: {\n                    status: 200,\n                    action: \"CARTITEMS\",\n                    data: {\n                        cart: response.data\n                    }\n                }\n            })\n            return Promise.resolve();\n        },\n        (error) => {\n            const errorMessage =\n                (error.response &&\n                    error.response.data &&\n                    error.response.data.message) ||\n                error.message ||\n                error.toString();\n\n            const status = (error.response &&\n                error.response.data &&\n                error.response.data.code) ||\n                error.toString();\n\n            dispatch({\n                type: SET_MESSAGE,\n                payload: {\n                    status: status,\n                    data: {\n                        message: errorMessage\n                    }\n                }\n            })\n            return Promise.reject();\n        }\n    )\n}\n\nexport const removeCartItem = (id) => async (dispatch) => {\n    return CartApiService.removeItem(id).then(\n        (response) => {\n            dispatch({\n                type: REMOVE_ITEM,\n                payload: {\n                    status: 200,\n                    action: \"REMOVE\",\n                    data: {\n\n                    }\n                }\n            })\n            dispatch({\n                type: SET_MESSAGE,\n                payload: {\n                    status: 200,\n                    data: {\n                        message: \"Remove Item Successfully\"\n                    }\n                }\n            })\n\n            return Promise.resolve();\n        },\n        (error) => {\n            console.log(error);\n            const errorMessage =\n                (error.response &&\n                    error.response.data &&\n                    error.response.data.message) ||\n                error.message ||\n                error.toString();\n\n            const status = (error.response &&\n                error.response.data &&\n                error.response.data.code) ||\n                error.toString();\n\n            dispatch({\n                type: SET_MESSAGE,\n                payload: {\n                    status: status,\n                    data: {\n                        message: errorMessage\n                    }\n                }\n            })\n            return Promise.reject();\n        }\n    )\n}"],"sourceRoot":""}