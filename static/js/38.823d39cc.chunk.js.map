{"version":3,"sources":["../../inventory-management-system-reactjs/src/components/orderTabContent/Orders.js","../../inventory-management-system-reactjs/src/service/restAPI/OrderApiService.js","../../inventory-management-system-reactjs/src/service/apiActions/indexAction.js","../../inventory-management-system-reactjs/src/service/apiActions/orderAction/orderAction.js","../../inventory-management-system-reactjs/src/components/orderTabContent/OrderCard.js","../../inventory-management-system-reactjs/src/service/restAPI/CommentApiService.js","../../inventory-management-system-reactjs/src/service/apiActions/commentAction/commentAction.js"],"names":["Orders","Component","constructor","props","super","state","message","status","action","orders","token","permission","path","orderReviews","manageorderRepsonse","prevProps","prevState","orderResponse","this","data","setState","manageHrefLinkBasedInPermission","Roles","SUPER_ADMIN","ADMIN","handleOrderReview","bind","componentDidMount","type","accessToken","roles","userResponse","credentials","roleName","getPermission","href","getOrders","componentDidUpdate","handleOrder","orderData","orderStatus","orderId","updateOrderStatus","then","index","findIndex","o","splice","length","totalCounts","toUpperCase","totalCountChange","renderOrderAction","order","orderButton","toLowerCase","onClick","handleOrderView","event","preventDefault","formattedReviews","key","value","push","rating","comment","parseInt","id","saveComments","submitted","item","orderIndex","ctt2","comments","product","console","log","ctt","ct","render","fontStyle","fontSize","fontWeight","className","map","hasPendingReview","order_id","canReview","canViewReview","firstName","lastName","street","barangay","province","region","city","phoneNumber","customerAddress","style","onSubmit","orderItems","float","to","pathname","orderedAt","paymentMethod","totalAmount","toFixed","connect","messageResponse","clearMessage","axios","get","headers","authHeader","getPaymentTransactions","query","page","limit","params","updateOrderPaymentStatus","paymentStatus","put","placeOrderDetails","orderDetails","post","customerAddressId","addressId","paymentId","paymentMethodId","cartItems","items","getOrderByOrderId","handleError","error","dispatch","errorMessage","response","toString","code","SET_MESSAGE","payload","async","OrderApiService","GET_ORDERS","orderStatusCount","orderCounts","Promise","resolve","reject","getOrderItems","ORDER_ITEMS","placeOrder","orderDetials","PLACE_ORDER","GET_ORDER_BY_ID","UPDATE_ORDER_STATUS","UPDATE_PAYMENT_STATUS","GET_PAYMENT_TRANSACTIONS","payments","OrderCard","orderItem","isSubmitted","rounded","src","fileImages","fileName","NO_IMAGE_BASE64","width","height","productName","productPrice","quantity","amount","count","size","isHalf","edit","onChange","newRating","disabled","target","rows","placeholder","getComments","productId","saveComment","commentDetails","deleteComment","commentId","delete","CommentApiService","GET_COMMENTS","wishlistDetails","ADD_COMMENT"],"mappings":"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","file":"static/js/38.823d39cc.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport {\n    CCard,\n    CCardBody, CCardHeader, CCardFooter,\n    CRow, CCol,\n    CContainer, CImage,\n    CButton,\n    CForm\n} from '@coreui/react'\nimport { Link } from 'react-router-dom'\n//action \nimport { saveComments } from 'src/service/apiActions/commentAction/commentAction'\nimport { getOrders, updateOrderStatus } from 'src/service/apiActions/orderAction/orderAction'\nimport { clearMessage } from 'src/service/apiActions/messageAction/messageAction'\nimport { connect } from 'react-redux'\nimport OrderCard from './OrderCard'\nimport Roles from 'src/router/config'\nimport ReactPaginate from 'react-paginate'\n\nexport class Orders extends Component {\n    state = {\n        message: '',\n        status: '',\n        action: '',\n        orders: [],\n        token: '',\n        permission: '',\n        path: '',\n    }\n\n    orderReviews = {}\n\n    constructor(props) {\n        super(props);\n        this.state.status = props.status;\n        this.handleOrderReview = this.handleOrderReview.bind(this)\n    }\n    componentDidMount() {\n        let { type, accessToken, roles } = this.props.userResponse.credentials;\n        let token = type + accessToken;\n        let roleName = roles.roleName;\n        let getPermission = roleName ? roleName : roles;\n        let href = this.manageHrefLinkBasedInPermission(getPermission);\n\n        this.setState({\n            token: token,\n            permission: roles.roleName ? roles.roleName : roles,\n            path: href\n        })\n\n        this.props.getOrders(this.state.status)\n    }\n    componentDidUpdate(prevProps, prevState) {\n        this.manageorderRepsonse(prevProps, prevState);\n    }\n\n    manageorderRepsonse = (prevProps, prevState) => {\n        if (prevProps.orderResponse !== this.props.orderResponse) {\n            let { status, action, data } = this.props.orderResponse;\n            if (status === 200 && action === \"GET_ORDERS\") {\n                this.setState({\n                    orders: data.orders\n                })\n            }\n        }\n    }\n\n    manageHrefLinkBasedInPermission = (permission) => {\n        if (permission === Roles.SUPER_ADMIN || permission === Roles.ADMIN) {\n            return \"/app/order/\";\n        } else {\n            return \"/user/order/\"\n        }\n    }\n\n    handleOrder(orderData, orderStatus) {\n        let orderId = orderData.orderId;\n        this.props.updateOrderStatus(orderId, orderStatus).then(() => {\n            let orders = this.state.orders;\n            const order = this.props.orderResponse.data;\n            const index = orders.findIndex((o) => o.orderId == orderId);\n            orders.splice(index, 1);\n            if (orders.length == 0) {\n                this.props.getOrders(this.state.status, 0, 10);\n            } else {\n                let totalCounts = this.props.totalCounts;\n                if (typeof totalCounts[orderStatus.toUpperCase()] == 'undefined') {\n                    totalCounts[orderStatus.toUpperCase()] = 0;\n                }\n                totalCounts[orderData.orderStatus.toUpperCase()]--;\n                totalCounts[orderStatus.toUpperCase()]++;\n                this.props.totalCountChange(totalCounts);\n                this.setState({\n                    orders: orders\n                });\n            }\n        })\n    }\n\n    renderOrderAction(orderStatus, order) {\n        let orderButton = <></>;\n        switch (orderStatus.toLowerCase()) {\n            case 'pending':\n                orderButton = <CButton onClick={() => { this.handleOrder(order, 'confirmed') }}>Confirm Order</CButton>;\n                break;\n            case 'confirmed':\n                orderButton = <CButton onClick={() => { this.handleOrder(order, 'shipped') }}>Mark as Shipped</CButton>;\n                break;\n            case 'shipped':\n                orderButton = <CButton onClick={() => { this.handleOrder(order, 'delivered') }}>Mark as Delivered</CButton>;\n                break;\n            case 'delivered':\n                orderButton = <CButton onClick={() => { this.handleOrder(order, 'payment_received') }}>Mark as Payment Received</CButton>;\n                break;\n        }\n        return orderButton;\n    }\n\n    handleOrderView(event, order) {\n        event.preventDefault()\n\n        let formattedReviews = [];\n        let orderReviews = this.orderReviews[order.orderId];\n        for (var key in orderReviews) {\n            let value = orderReviews[key];\n            formattedReviews.push({\n                \"rating\": value.rating,\n                \"message\": value.comment,\n                \"anonymous\": true,\n                \"published\": 0,\n                \"product\": {\n                    \"id\": parseInt(key)\n                },\n                \"orderId\": order.id\n            })\n        }\n        this.props.saveComments(formattedReviews).then(() => {\n            for (var key in orderReviews) {\n                this.orderReviews[order.orderId][key].submitted = true;\n            }\n        })\n    }\n\n    handleOrderReview(orderId, item, rating, comment) {\n        const { orders } = this.state;\n        let orderIndex = orders.findIndex((ctt2) => ctt2.orderId == orderId);\n        const { comments } = orders[orderIndex];\n\n        let submitted = false;\n\n        if (typeof this.orderReviews[orderId] == 'undefined') {\n            this.orderReviews[orderId] = {\n                [item.product.id]: {\n                    rating: rating,\n                    comment: comment,\n                    submitted: false\n                }\n            }\n        }\n\n        console.log(comments)\n        let index = comments && comments.findIndex((ctt) => ctt.product.id == item.product.id)\n\n        if (index >= 0) {\n            const ct = comments[index];\n            rating = ct.rating;\n            comment = ct.message;\n            submitted = true;\n        }\n\n        this.orderReviews[orderId][item.product.id] = {\n            rating: rating,\n            comment: comment,\n            submitted: submitted\n        }\n    }\n\n    render() {\n        let { message, orders, permission, path } = this.state;\n        const fontStyle = {\n            fontSize: \"14px\",\n            fontWeight: \"400\"\n        }\n        console.log(orders)\n        return (\n            <>\n                {orders.length === 0 ? (\n                    <CCard>\n                        <CCardBody>\n                            <div className=\"text-center\">No Order Data</div>\n                        </CCardBody>\n                    </CCard>\n                ) : (\n                    orders.map((order, index) => {\n                        let hasPendingReview = order.comments.findIndex((comment) => comment.order_id == order.id)\n\n                        const canReview = (order.orderStatus == \"DELIVERED\" || order.orderStatus == \"PAYMENT_RECEIVED\")\n                            && (permission !== Roles.SUPER_ADMIN && permission !== Roles.ADMIN);\n                        const canViewReview = (order.orderStatus == \"DELIVERED\" || order.orderStatus == \"PAYMENT_RECEIVED\")\n                            && (permission == Roles.SUPER_ADMIN || permission == Roles.ADMIN);\n\n                        const { firstName, lastName, street, barangay, province, region, city, phoneNumber } = order.customerAddress;\n                        return (\n                            <CCard className=\"mb-3\" key={index}>\n                                <CCardHeader>\n                                    <CRow className=\"p-2\">\n                                        <span\n                                            style={{ fontSize: \"14px\", fontWeight: \"400\" }}\n                                            className=\"text-black-50\"\n                                        >\n                                            Order ID: {order.orderId}\n                                        </span>\n                                        <span\n                                            style={{ fontSize: \"14px\", fontWeight: \"400\" }}\n                                            className=\"text-black-50\"\n                                        >\n                                            Customer Name: {firstName + \" \" + lastName}\n                                        </span>\n                                        <span\n                                            style={{ fontSize: \"14px\", fontWeight: \"400\" }}\n                                            className=\"text-black-50\"\n                                        >\n                                            Mobile: {phoneNumber}\n                                        </span>\n                                        <span\n                                            style={{ fontSize: \"14px\", fontWeight: \"400\" }}\n                                            className=\"text-black-50\"\n                                        >\n                                            Address: {street + \" \" + \" \" + barangay + \", \" + city + \", \" + province}\n                                        </span>\n                                    </CRow>\n                                </CCardHeader>\n                                <CCardBody>\n                                    <CForm\n                                        onSubmit={(event) => { this.handleOrderView(event, order) }}\n                                    >\n                                        <CContainer>\n                                            {order.orderItems.map((item, index) => {\n                                                this.handleOrderReview(order.orderId, item, 5, \"\");\n                                                const { rating, comment, submitted } = this.orderReviews[order.orderId][item.product.id];\n                                                return <OrderCard\n                                                    item={item}\n                                                    canReview={canReview}\n                                                    canViewReview={canViewReview}\n                                                    orderId={order.orderId}\n                                                    comment={comment}\n                                                    rating={rating}\n                                                    key={index}\n                                                    submitted={submitted}\n                                                    handleOrderReview={this.handleOrderReview}\n                                                />\n                                            })}\n                                        </CContainer>\n                                        {(hasPendingReview >= 0 && canReview) &&\n                                            <CButton type=\"submit\" style={{ float: \"right\" }}>Submit Product Review</CButton>\n                                        }\n                                    </CForm>\n                                </CCardBody>\n                                <CCardFooter className=\"p-4\">\n                                    <div className=\"d-flex justify-content-between align-items-end\">\n                                        <div className=\"d-flex align-items-bottom\">\n                                            {/* {order.orderItems.map((item, index) => {\n                                                return (\n\n                                                )\n\n                                            })} */}\n                                            <Link\n                                                to={{\n                                                    pathname: path + order.orderId,\n                                                    state: order.orderId,\n                                                }}\n                                                className=\"m-2\"\n                                            >\n                                                View More\n                                            </Link>\n\n                                            {(permission === Roles.SUPER_ADMIN || permission === Roles.ADMIN) ?\n                                                this.renderOrderAction(this.state.status, order)\n                                                :\n                                                <></>\n                                            }\n                                        </div>\n                                        <div className=\"d-flex flex-column\">\n                                            <div style={fontStyle} className=\"mt-2\">\n                                                <span className=\"text-black-50 me-2\">\n                                                    Date of Ordered:\n                                                </span>\n                                                <span style={{ fontWeight: \"500\" }}>\n                                                    {order.orderedAt}\n                                                </span>\n                                            </div>\n\n                                            <div style={fontStyle} className=\"mt-2\">\n                                                <span\n                                                    style={fontStyle}\n                                                    className=\"text-black-50 me-2\"\n                                                >\n                                                    Payment Method:\n                                                </span>\n                                                <span style={{ fontWeight: \"500\" }}>\n                                                    {order.paymentMethod.paymentMethod}\n                                                </span>\n                                            </div>\n                                            <div style={fontStyle} className=\"mt-2\">\n                                                <span\n                                                    style={fontStyle}\n                                                    className=\"text-black-50 me-2\"\n                                                >\n                                                    Order Status:\n                                                </span>\n                                                <span\n                                                    className=\"text-danger\"\n                                                    style={{ fontWeight: \"500\" }}\n                                                >\n                                                    {order.orderStatus}\n                                                </span>\n                                            </div>\n                                            <div className=\"mt-2\">\n                                                <span\n                                                    style={fontStyle}\n                                                    className=\"text-black-50 me-2\"\n                                                >\n                                                    Total Amount\n                                                </span>\n                                                <span style={{ fontWeight: \"500\" }}>\n                                                    &#8369;{order.totalAmount.toFixed(2)}\n                                                </span>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </CCardFooter>\n                            </CCard>\n                        )\n                    })\n                )}\n                {/* <ReactPaginate\n                    previousLabel={\"previous\"}\n                    nextLabel={\"next\"}\n                    breakLabel={\"...\"}\n                    breakClassName={\"break-me\"}\n                    // pageCount={inventories.totalPages}\n                    marginPagesDisplayed={2}\n                    pageRangeDisplayed={5}\n                    // onPageChange={this.handlePageClick}\n                    containerClassName={\"pagination\"}\n                    activeClassName={\"active\"}\n                /> */}\n            </>\n        )\n    }\n}\nconst mapStateToProps = (state) => {\n    return {\n        orderResponse: state.orderResponse,\n        messageResponse: state.messageResponse,\n        userResponse: state.userResponse\n    }\n}\nexport default connect(mapStateToProps, {\n    getOrders,\n    clearMessage,\n    updateOrderStatus,\n    saveComments\n})(Orders)\n","import authHeader from '../auth/authHeader';\nimport axios from './RestApi';\n\nexport class OrderApiService {\n    getOrders(status) {\n        return axios.get(\"/orders/status/\" + status, {\n            headers: authHeader()\n        })\n    }\n\n    getPaymentTransactions(query, page, limit) {\n        return axios.get(\"/orders/payments\", {\n            headers: authHeader(),\n            params: {\n                query: query,\n                page: page,\n                limit: limit\n            }\n        })\n    }\n\n    updateOrderPaymentStatus(orderId, paymentStatus) {\n        return axios.put(\"/orders/\" + orderId + \"/paid/\" + paymentStatus, {}, {\n            headers: authHeader()\n        })\n    }\n\n\n    placeOrderDetails(orderDetails) {\n        return axios.post(\"/orders/checkout\", {\n            customerAddressId: orderDetails.addressId,\n            paymentId: orderDetails.paymentMethodId,\n            cartItems: orderDetails.items\n        }, {\n            headers: authHeader()\n        })\n    }\n\n    getOrderByOrderId(orderId) {\n        return axios.get(\"/orders/\" + orderId, {\n            headers: authHeader()\n        })\n    }\n\n    updateOrderStatus(orderId, status) {\n        return axios.put(\"/orders/\" + orderId + \"/status/\" + status, {}, {\n            headers: authHeader()\n        })\n    }\n}\nexport default new OrderApiService();","import { SET_MESSAGE } from \"src/constants/userConstants\";\n\nexport const handleError = (error, dispatch) => {\n    const errorMessage =\n        (error.response &&\n            error.response.data &&\n            error.response.data.message) ||\n        error.message ||\n        error.toString();\n\n    const status = (error.response &&\n        error.response.data &&\n        error.response.data.code) ||\n        error.toString();\n\n    dispatch({\n        type: SET_MESSAGE,\n        payload: {\n            status: status,\n            data: {\n                message: errorMessage\n            }\n        }\n    })\n}","import { GET_ORDER_BY_ID, GET_ORDERS, ORDER_ITEMS, PLACE_ORDER, UPDATE_ORDER_STATUS, GET_PAYMENT_TRANSACTIONS, UPDATE_PAYMENT_STATUS } from \"src/service/redux/constants\";\nimport { SET_MESSAGE } from \"src/constants/userConstants\";\nimport OrderApiService from \"src/service/restAPI/OrderApiService\";\nimport { handleError } from \"../indexAction\";\n\nexport const getOrders = (status, page, limit) => async (dispatch) => {\n    return OrderApiService.getOrders(status, page, limit).then(\n        (response) => {\n            dispatch({\n                type: GET_ORDERS,\n                payload: {\n                    status: 200,\n                    action: \"GET_ORDERS\",\n                    data: {\n                        orders: response.data.orders,\n                        orderStatusCount: response.data.orderCounts\n                    }\n                }\n            })\n            return Promise.resolve();\n        },\n        (error) => {\n            handleError(error, dispatch);\n            return Promise.reject();\n        }\n    )\n\n}\n\nexport const getOrderItems = (items) => async (dispatch) => {\n    dispatch({\n        type: ORDER_ITEMS,\n        payload: {\n            status: 200,\n            action: \"ORDERITEMS\",\n            data: {\n                items: items\n            }\n        }\n    })\n}\n\nexport const placeOrder = (orderDetials) => async (dispatch) => {\n    return OrderApiService.placeOrderDetails(orderDetials).then(\n        (response) => {\n            dispatch({\n                type: PLACE_ORDER,\n                payload: {\n                    status: 200,\n                    action: \"PLACE_ORDER\",\n                    data: {\n\n                    }\n                }\n            })\n            dispatch({\n                type: SET_MESSAGE,\n                payload: {\n                    status: 200,\n                    data: {\n                        message: \"Successfully Place your Order\",\n                        order: response.data\n                    }\n                }\n            })\n            return Promise.resolve();\n        },\n        (error) => {\n            handleError(error, dispatch);\n            return Promise.reject();\n        }\n    )\n}\n\nexport const getOrderByOrderId = (orderId) => async (dispatch) => {\n    return OrderApiService.getOrderByOrderId(orderId).then(\n        (response) => {\n            dispatch({\n                type: GET_ORDER_BY_ID,\n                payload: {\n                    status: 200,\n                    action: \"GETORDERBYID\",\n                    data: {\n                        order: response.data\n                    }\n                }\n            })\n            return Promise.resolve();\n        },\n        (error) => {\n            handleError(error, dispatch);\n            return Promise.reject();\n        }\n    )\n}\n\nexport const updateOrderStatus = (orderId, status) => async (dispatch) => {\n    return OrderApiService.updateOrderStatus(orderId, status).then(\n        (response) => {\n            dispatch({\n                type: UPDATE_ORDER_STATUS,\n                payload: {\n                    status: 200,\n                    action: UPDATE_ORDER_STATUS,\n                    data: {\n                        order: response.data\n                    }\n                }\n            })\n            dispatch({\n                type: SET_MESSAGE,\n                payload: {\n                    status: 200,\n                    data: {\n                        message: \"Successfully updated order \" + orderId + \" status to \" + status.toUpperCase(),\n                        order: response.data\n                    }\n                }\n            })\n            return Promise.resolve();\n        },\n        (error) => {\n            handleError(error, dispatch);\n            return Promise.reject();\n        }\n    )\n}\n\nexport const updateOrderPaymentStatus = (orderId, paymentStatus) => async (dispatch) => {\n    return OrderApiService.updateOrderPaymentStatus(orderId, paymentStatus).then(\n        (response) => {\n            dispatch({\n                type: UPDATE_PAYMENT_STATUS,\n                payload: {\n                    status: 200,\n                    action: UPDATE_PAYMENT_STATUS,\n                    data: {\n                        order: response.data\n                    }\n                }\n            })\n            dispatch({\n                type: SET_MESSAGE,\n                payload: {\n                    status: 200,\n                    data: {\n                        //message: \"Successfully updated order \" + orderId + \" status to \" + status.toUpperCase(),\n                    }\n                }\n            })\n            return Promise.resolve();\n        },\n        (error) => {\n            handleError(error, dispatch);\n            return Promise.reject();\n        }\n    )\n}\n\nexport const getPaymentTransactions = (query, page, limit) => async (dispatch) => {\n    return OrderApiService.getPaymentTransactions(query, page, limit).then(\n        (response) => {\n            dispatch({\n                type: GET_PAYMENT_TRANSACTIONS,\n                payload: {\n                    status: 200,\n                    action: \"GET_PAYMENT_TRANSACTIONS\",\n                    data: {\n                        payments: response.data,\n                    }\n                }\n            })\n            return Promise.resolve();\n        },\n        (error) => {\n            handleError(error, dispatch);\n            return Promise.reject();\n        }\n    )\n}","import React, { Component } from \"react\"\nimport {\n  CCard,\n  CCardBody,\n  CRow,\n  CCol,\n  CImage,\n  CFormLabel,\n  CFormTextarea,\n} from \"@coreui/react\"\nimport { NO_IMAGE_BASE64 } from \"src/service/redux/constants\"\nimport ReactStars from \"react-rating-stars-component\"\n\nexport class OrderCard extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      orderItem: this.props.item,\n      canReview: this.props.canReview,\n      orderId: this.props.orderId,\n      comment: this.props.comment,\n      rating: this.props.rating,\n      submitted: this.props.submitted,\n      canViewReview: this.props.canViewReview,\n    }\n  }\n  render() {\n    let {\n      orderItem,\n      canReview,\n      rating,\n      comment,\n      orderId,\n      submitted,\n      canViewReview,\n    } = this.state\n    let isSubmitted = submitted\n    if (canViewReview && !canReview) {\n      submitted = true\n    }\n    const fontStyle = {\n      fontSize: \"14px\",\n      fontWeight: \"400\",\n    }\n    return (\n      <CRow className=\"mb-3\">\n        <CCard>\n          <CCardBody>\n            <div className=\"d-flex align-items-start\">\n              <CImage\n                rounded\n                src={\n                  orderItem.product.fileImages.length > 0\n                    ? \"/images/products/\" +\n                      orderItem.product.fileImages[0].path +\n                      orderItem.product.fileImages[0].fileName\n                    : NO_IMAGE_BASE64\n                }\n                width={100}\n                height={100}\n              />\n              <div className=\"ms-2  w-100\">\n                <CRow className=\"d-flex justify-content-between\">\n                  <CCol className=\"ps-4 text-dark\">\n                    {orderItem.product.productName}\n                  </CCol>\n                  <CCol className=\"text-dark d-flex flex-column align-items-center\">\n                    <span style={fontStyle} className=\"text-black-50\">\n                      Price\n                    </span>\n                    <span className=\"pt-3\">\n                      &#8369;{orderItem.product.productPrice.toFixed(2)}\n                    </span>\n                  </CCol>\n                  <CCol className=\"text-dark d-flex flex-column align-items-center\">\n                    <span style={fontStyle} className=\"text-black-50\">\n                      Quantity\n                    </span>\n                    <span className=\"pt-3\">{orderItem.quantity}</span>\n                  </CCol>\n                  <CCol className=\"text-dark d-flex flex-column align-items-center\">\n                    <span style={fontStyle} className=\"text-black-50\">\n                      Amount\n                    </span>\n                    <span className=\"pt-3\">\n                      &#8369;{orderItem.amount.toFixed(2)}\n                    </span>\n                  </CCol>\n                </CRow>\n                {(canReview || (canViewReview && isSubmitted)) && (\n                  <div>\n                    <ReactStars\n                      count={5}\n                      value={rating}\n                      size={24}\n                      isHalf={false}\n                      edit={!submitted}\n                      onChange={(newRating) => {\n                        this.props.handleOrderReview(\n                          orderId,\n                          orderItem,\n                          newRating,\n                          comment,\n                        )\n                      }}\n                    />\n                    <div className=\"mb-!2\">\n                      <textarea\n                        disabled={submitted}\n                        onChange={(event) => {\n                          this.props.handleOrderReview(\n                            orderId,\n                            orderItem,\n                            rating,\n                            event.target.value,\n                          )\n                        }}\n                        id=\"exampleFormControlTextarea1\"\n                        rows=\"3\"\n                        style={{ width: \"100%\" }}\n                        placeholder=\"Please write a review.\"\n                      >\n                        {comment}\n                      </textarea>\n                    </div>\n                  </div>\n                )}\n              </div>\n            </div>\n          </CCardBody>\n        </CCard>\n      </CRow>\n    )\n  }\n}\n\nexport default OrderCard\n","import authHeader from '../auth/authHeader';\nimport axios from './RestApi';\n\nexport class CommentApiService {\n    getComments(productId, page, limit) {\n        return axios.get(\"/comments\", {\n            params: {\n                productId: productId,\n                page: page,\n                limit: limit,\n            }\n        })\n    }\n    saveComment(commentDetails) {\n        return axios.post(\"/comments\", commentDetails, {\n            headers: authHeader()\n        })\n    }\n    saveComments(commentDetails) {\n        return axios.post(\"/comments/bulk\", commentDetails, {\n            headers: authHeader()\n        })\n    }\n    deleteComment(commentId) {\n        return axios.delete(\"/comments/\" + commentId, {\n            headers: authHeader()\n        })\n    }\n}\nexport default new CommentApiService();","import { GET_COMMENTS, DELETE_COMMENT, ADD_COMMENT } from \"src/service/redux/constants\";\nimport { SET_MESSAGE } from \"src/constants/userConstants\";\nimport CommentApiService from \"src/service/restAPI/CommentApiService\";\n\n\nexport const getComments = (productId, page, limit) => async (dispatch) => {\n    return CommentApiService.getComments(productId, page, limit).then(\n        (response) => {\n            dispatch({\n                type: GET_COMMENTS,\n                payload: {\n                    status: 200,\n                    action: \"GET_COMMENT\",\n                    data: response.data\n                }\n            })\n            return Promise.resolve();\n        },\n        (error) => {\n            const errorMessage =\n                (error.response &&\n                    error.response.data &&\n                    error.response.data.message) ||\n                error.message ||\n                error.toString();\n\n            const status = (error.response &&\n                error.response.data &&\n                error.response.data.code) ||\n                error.toString();\n\n            dispatch({\n                type: SET_MESSAGE,\n                payload: {\n                    status: status,\n                    data: {\n                        message: errorMessage\n                    }\n                }\n            })\n            return Promise.reject();\n        }\n    )\n\n}\n\nexport const saveComment = (wishlistDetails) => async (dispatch) => {\n    return CommentApiService.saveComment(wishlistDetails).then(\n        (response) => {\n            dispatch({\n                type: ADD_COMMENT,\n                payload: {\n                    status: 200,\n                    action: \"ADD_COMMENT\",\n                    data: response.data\n                }\n            })\n            dispatch({\n                type: SET_MESSAGE,\n                payload: {\n                    status: 200,\n                    data: {\n                        message: \"Successfully submitted product comment\",\n                        order: response.data\n                    }\n                }\n            })\n            return Promise.resolve();\n        },\n        (error) => {\n            const errorMessage =\n                (error.response &&\n                    error.response.data &&\n                    error.response.data.message) ||\n                error.message ||\n                error.toString();\n\n            const status = (error.response &&\n                error.response.data &&\n                error.response.data.code) ||\n                error.toString();\n\n            dispatch({\n                type: SET_MESSAGE,\n                payload: {\n                    status: status,\n                    data: {\n                        message: errorMessage\n                    }\n                }\n            })\n            return Promise.reject();\n        }\n    )\n}\n\nexport const saveComments = (comments) => async (dispatch) => {\n    return CommentApiService.saveComments(comments).then(\n        (response) => {\n            dispatch({\n                type: ADD_COMMENT,\n                payload: {\n                    status: 200,\n                    action: \"ADD_COMMENT\",\n                    data: response.data\n                }\n            })\n            dispatch({\n                type: SET_MESSAGE,\n                payload: {\n                    status: 200,\n                    data: {\n                        message: \"Successfully submitted order product review\",\n                        order: response.data\n                    }\n                }\n            })\n            return Promise.resolve();\n        },\n        (error) => {\n            const errorMessage =\n                (error.response &&\n                    error.response.data &&\n                    error.response.data.message) ||\n                error.message ||\n                error.toString();\n\n            const status = (error.response &&\n                error.response.data &&\n                error.response.data.code) ||\n                error.toString();\n\n            dispatch({\n                type: SET_MESSAGE,\n                payload: {\n                    status: status,\n                    data: {\n                        message: errorMessage\n                    }\n                }\n            })\n            return Promise.reject();\n        }\n    )\n}\n\nexport const deleteComment = (wishlistId) => async (dispatch) => {\n    return CommentApiService.deleteComment(wishlistId).then(\n        (response) => {\n            dispatch({\n                type: DELETE_COMMENT,\n                payload: {\n                    status: 200,\n                    action: \"DELETE_COMMENT\",\n                    data: {\n                        order: response.data\n                    }\n                }\n            })\n            dispatch({\n                type: SET_MESSAGE,\n                payload: {\n                    status: 200,\n                    data: {\n                        message: \"Successfully deleted wishlist\"\n                    }\n                }\n            })\n            return Promise.resolve();\n        },\n        (error) => {\n            const errorMessage =\n                (error.response &&\n                    error.response.data &&\n                    error.response.data.message) ||\n                error.message ||\n                error.toString();\n\n            const status = (error.response &&\n                error.response.data &&\n                error.response.data.code) ||\n                error.toString();\n\n            dispatch({\n                type: SET_MESSAGE,\n                payload: {\n                    status: status,\n                    data: {\n                        message: errorMessage\n                    }\n                }\n            })\n            console.log(\"JKOSLDFJ\")\n            return Promise.reject();\n        }\n    )\n}"],"sourceRoot":""}