{"version":3,"sources":["components/orderTabContent/Orders.js","service/restAPI/OrderApiService.js","service/apiActions/indexAction.js","service/apiActions/orderAction/orderAction.js","components/orderTabContent/OrderCard.js","service/restAPI/CommentApiService.js","service/apiActions/commentAction/commentAction.js"],"names":["Orders","Component","constructor","props","super","state","message","status","action","orders","token","permission","path","orderReviews","manageorderRepsonse","prevProps","prevState","orderResponse","this","data","setState","manageHrefLinkBasedInPermission","Roles","SUPER_ADMIN","ADMIN","handleOrderReview","bind","componentDidMount","type","accessToken","roles","userResponse","credentials","roleName","getPermission","href","getOrders","componentDidUpdate","handleOrder","orderData","orderStatus","orderId","updateOrderStatus","then","index","findIndex","o","splice","length","totalCounts","toUpperCase","totalCountChange","renderOrderAction","order","orderButton","toLowerCase","onClick","handleOrderView","event","preventDefault","formattedReviews","key","value","push","rating","comment","anonymous","published","product","id","parseInt","saveComments","submitted","item","orderIndex","ctt2","comments","console","log","ctt","ct","render","fontStyle","fontSize","fontWeight","className","map","hasPendingReview","order_id","canReview","canViewReview","firstName","lastName","street","barangay","province","region","city","phoneNumber","customerAddress","style","onSubmit","orderItems","float","to","pathname","config","api","private","prefixFrontendUrl","orderedAt","paymentMethod","totalAmount","toFixed","connect","messageResponse","clearMessage","axios","get","headers","authHeader","getPaymentTransactions","query","page","limit","params","updateOrderPaymentStatus","paymentStatus","put","placeOrderDetails","orderDetails","post","customerAddressId","addressId","paymentId","paymentMethodId","cartItems","items","getOrderByOrderId","handleError","error","dispatch","errorMessage","response","toString","code","SET_MESSAGE","payload","async","OrderApiService","GET_ORDERS","orderStatusCount","orderCounts","Promise","resolve","reject","getOrderItems","ORDER_ITEMS","placeOrder","orderDetials","PLACE_ORDER","GET_ORDER_BY_ID","UPDATE_ORDER_STATUS","UPDATE_PAYMENT_STATUS","GET_PAYMENT_TRANSACTIONS","payments","OrderCard","orderItem","isSubmitted","rounded","src","fileImages","fileName","NO_IMAGE_BASE64","width","height","productName","productPrice","quantity","amount","count","size","isHalf","edit","onChange","newRating","disabled","target","rows","placeholder","getComments","productId","saveComment","commentDetails","deleteComment","commentId","delete","CommentApiService","GET_COMMENTS","wishlistDetails","ADD_COMMENT"],"mappings":"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","file":"static/js/38.3faa3566.chunk.js","sourcesContent":["import React, { Component } from \"react\"\nimport {\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCardFooter,\n  CRow,\n  CContainer,\n  CButton,\n  CForm,\n} from \"@coreui/react\"\nimport { Link } from \"react-router-dom\"\n//action\nimport { saveComments } from \"src/service/apiActions/commentAction/commentAction\"\nimport {\n  getOrders,\n  updateOrderStatus,\n} from \"src/service/apiActions/orderAction/orderAction\"\nimport { clearMessage } from \"src/service/apiActions/messageAction/messageAction\"\nimport { connect } from \"react-redux\"\nimport OrderCard from \"./OrderCard\"\nimport Roles from \"src/router/config\"\nimport ReactPaginate from \"react-paginate\"\n\nimport config from \"../../config\"\n\nexport class Orders extends Component {\n  state = {\n    message: \"\",\n    status: \"\",\n    action: \"\",\n    orders: [],\n    token: \"\",\n    permission: \"\",\n    path: \"\",\n  }\n\n  orderReviews = {}\n\n  constructor(props) {\n    super(props)\n    this.state.status = props.status\n    this.handleOrderReview = this.handleOrderReview.bind(this)\n  }\n  componentDidMount() {\n    let { type, accessToken, roles } = this.props.userResponse.credentials\n    let token = type + accessToken\n    let roleName = roles.roleName\n    let getPermission = roleName ? roleName : roles\n    let href = this.manageHrefLinkBasedInPermission(getPermission)\n\n    this.setState({\n      token: token,\n      permission: roles.roleName ? roles.roleName : roles,\n      path: href,\n    })\n\n    this.props.getOrders(this.state.status)\n  }\n  componentDidUpdate(prevProps, prevState) {\n    this.manageorderRepsonse(prevProps, prevState)\n  }\n\n  manageorderRepsonse = (prevProps, prevState) => {\n    if (prevProps.orderResponse !== this.props.orderResponse) {\n      let { status, action, data } = this.props.orderResponse\n      if (status === 200 && action === \"GET_ORDERS\") {\n        this.setState({\n          orders: data.orders,\n        })\n      }\n    }\n  }\n\n  manageHrefLinkBasedInPermission = (permission) => {\n    if (permission === Roles.SUPER_ADMIN || permission === Roles.ADMIN) {\n      return \"/app/order/\"\n    } else {\n      return \"/user/order/\"\n    }\n  }\n\n  handleOrder(orderData, orderStatus) {\n    let orderId = orderData.orderId\n    this.props.updateOrderStatus(orderId, orderStatus).then(() => {\n      let orders = this.state.orders\n      const order = this.props.orderResponse.data\n      const index = orders.findIndex((o) => o.orderId == orderId)\n      orders.splice(index, 1)\n      if (orders.length == 0) {\n        this.props.getOrders(this.state.status, 0, 10)\n      } else {\n        let totalCounts = this.props.totalCounts\n        if (typeof totalCounts[orderStatus.toUpperCase()] == \"undefined\") {\n          totalCounts[orderStatus.toUpperCase()] = 0\n        }\n        totalCounts[orderData.orderStatus.toUpperCase()]--\n        totalCounts[orderStatus.toUpperCase()]++\n        this.props.totalCountChange(totalCounts)\n        this.setState({\n          orders: orders,\n        })\n      }\n    })\n  }\n\n  renderOrderAction(orderStatus, order) {\n    let orderButton = <></>\n    switch (orderStatus.toLowerCase()) {\n      case \"pending\":\n        orderButton = (\n          <CButton\n            onClick={() => {\n              this.handleOrder(order, \"confirmed\")\n            }}\n          >\n            Confirm Order\n          </CButton>\n        )\n        break\n      case \"confirmed\":\n        orderButton = (\n          <CButton\n            onClick={() => {\n              this.handleOrder(order, \"shipped\")\n            }}\n          >\n            Mark as Shipped\n          </CButton>\n        )\n        break\n      case \"shipped\":\n        orderButton = (\n          <CButton\n            onClick={() => {\n              this.handleOrder(order, \"delivered\")\n            }}\n          >\n            Mark as Delivered\n          </CButton>\n        )\n        break\n      case \"delivered\":\n        orderButton = (\n          <CButton\n            onClick={() => {\n              this.handleOrder(order, \"payment_received\")\n            }}\n          >\n            Mark as Payment Received\n          </CButton>\n        )\n        break\n    }\n    return orderButton\n  }\n\n  handleOrderView(event, order) {\n    event.preventDefault()\n\n    let formattedReviews = []\n    let orderReviews = this.orderReviews[order.orderId]\n    for (var key in orderReviews) {\n      let value = orderReviews[key]\n      formattedReviews.push({\n        rating: value.rating,\n        message: value.comment,\n        anonymous: true,\n        published: 0,\n        product: {\n          id: parseInt(key),\n        },\n        orderId: order.id,\n      })\n    }\n    this.props.saveComments(formattedReviews).then(() => {\n      for (var key in orderReviews) {\n        this.orderReviews[order.orderId][key].submitted = true\n      }\n    })\n  }\n\n  handleOrderReview(orderId, item, rating, comment) {\n    const { orders } = this.state\n    let orderIndex = orders.findIndex((ctt2) => ctt2.orderId == orderId)\n    const { comments } = orders[orderIndex]\n\n    let submitted = false\n\n    if (typeof this.orderReviews[orderId] == \"undefined\") {\n      this.orderReviews[orderId] = {\n        [item.product.id]: {\n          rating: rating,\n          comment: comment,\n          submitted: false,\n        },\n      }\n    }\n\n    console.log(comments)\n    let index =\n      comments && comments.findIndex((ctt) => ctt.product.id == item.product.id)\n\n    if (index >= 0) {\n      const ct = comments[index]\n      rating = ct.rating\n      comment = ct.message\n      submitted = true\n    }\n\n    this.orderReviews[orderId][item.product.id] = {\n      rating: rating,\n      comment: comment,\n      submitted: submitted,\n    }\n  }\n\n  render() {\n    let { message, orders, permission, path } = this.state\n    const fontStyle = {\n      fontSize: \"14px\",\n      fontWeight: \"400\",\n    }\n    console.log(orders)\n    return (\n      <>\n        {orders.length === 0 ? (\n          <CCard>\n            <CCardBody>\n              <div className=\"text-center\">No Order Data</div>\n            </CCardBody>\n          </CCard>\n        ) : (\n          orders.map((order, index) => {\n            let hasPendingReview = order.comments.findIndex(\n              (comment) => comment.order_id == order.id,\n            )\n\n            const canReview =\n              (order.orderStatus == \"DELIVERED\" ||\n                order.orderStatus == \"PAYMENT_RECEIVED\") &&\n              permission !== Roles.SUPER_ADMIN &&\n              permission !== Roles.ADMIN\n            const canViewReview =\n              (order.orderStatus == \"DELIVERED\" ||\n                order.orderStatus == \"PAYMENT_RECEIVED\") &&\n              (permission == Roles.SUPER_ADMIN || permission == Roles.ADMIN)\n\n            const {\n              firstName,\n              lastName,\n              street,\n              barangay,\n              province,\n              region,\n              city,\n              phoneNumber,\n            } = order.customerAddress\n            return (\n              <CCard className=\"mb-3\" key={index}>\n                <CCardHeader>\n                  <CRow className=\"p-2\">\n                    <span\n                      style={{ fontSize: \"14px\", fontWeight: \"400\" }}\n                      className=\"text-black-50\"\n                    >\n                      Order ID: {order.orderId}\n                    </span>\n                    <span\n                      style={{ fontSize: \"14px\", fontWeight: \"400\" }}\n                      className=\"text-black-50\"\n                    >\n                      Customer Name: {firstName + \" \" + lastName}\n                    </span>\n                    <span\n                      style={{ fontSize: \"14px\", fontWeight: \"400\" }}\n                      className=\"text-black-50\"\n                    >\n                      Mobile: {phoneNumber}\n                    </span>\n                    <span\n                      style={{ fontSize: \"14px\", fontWeight: \"400\" }}\n                      className=\"text-black-50\"\n                    >\n                      Address:{\" \"}\n                      {street +\n                        \" \" +\n                        \" \" +\n                        barangay +\n                        \", \" +\n                        city +\n                        \", \" +\n                        province}\n                    </span>\n                  </CRow>\n                </CCardHeader>\n                <CCardBody>\n                  <CForm\n                    onSubmit={(event) => {\n                      this.handleOrderView(event, order)\n                    }}\n                  >\n                    <CContainer>\n                      {order.orderItems.map((item, index) => {\n                        this.handleOrderReview(order.orderId, item, 5, \"\")\n                        const { rating, comment, submitted } =\n                          this.orderReviews[order.orderId][item.product.id]\n                        return (\n                          <OrderCard\n                            item={item}\n                            canReview={canReview}\n                            canViewReview={canViewReview}\n                            orderId={order.orderId}\n                            comment={comment}\n                            rating={rating}\n                            key={index}\n                            submitted={submitted}\n                            handleOrderReview={this.handleOrderReview}\n                          />\n                        )\n                      })}\n                    </CContainer>\n                    {hasPendingReview >= 0 && canReview && (\n                      <CButton type=\"submit\" style={{ float: \"right\" }}>\n                        Submit Product Review\n                      </CButton>\n                    )}\n                  </CForm>\n                </CCardBody>\n                <CCardFooter className=\"p-4\">\n                  <div className=\"d-flex justify-content-between align-items-end\">\n                    <div className=\"d-flex align-items-bottom\">\n                      {/* {order.orderItems.map((item, index) => {\n                                                return (\n\n                                                )\n\n                                            })} */}\n                      <Link\n                        to={{\n                          pathname:\n                            config.api.private.prefixFrontendUrl +\n                            path +\n                            order.orderId,\n                          state: order.orderId,\n                        }}\n                        className=\"m-2\"\n                      >\n                        View More\n                      </Link>\n\n                      {permission === Roles.SUPER_ADMIN ||\n                      permission === Roles.ADMIN ? (\n                        this.renderOrderAction(this.state.status, order)\n                      ) : (\n                        <></>\n                      )}\n                    </div>\n                    <div className=\"d-flex flex-column\">\n                      <div style={fontStyle} className=\"mt-2\">\n                        <span className=\"text-black-50 me-2\">\n                          Date of Ordered:\n                        </span>\n                        <span style={{ fontWeight: \"500\" }}>\n                          {order.orderedAt}\n                        </span>\n                      </div>\n\n                      <div style={fontStyle} className=\"mt-2\">\n                        <span style={fontStyle} className=\"text-black-50 me-2\">\n                          Payment Method:\n                        </span>\n                        <span style={{ fontWeight: \"500\" }}>\n                          {order.paymentMethod.paymentMethod}\n                        </span>\n                      </div>\n                      <div style={fontStyle} className=\"mt-2\">\n                        <span style={fontStyle} className=\"text-black-50 me-2\">\n                          Order Status:\n                        </span>\n                        <span\n                          className=\"text-danger\"\n                          style={{ fontWeight: \"500\" }}\n                        >\n                          {order.orderStatus}\n                        </span>\n                      </div>\n                      <div className=\"mt-2\">\n                        <span style={fontStyle} className=\"text-black-50 me-2\">\n                          Total Amount\n                        </span>\n                        <span style={{ fontWeight: \"500\" }}>\n                          &#8369;{order.totalAmount.toFixed(2)}\n                        </span>\n                      </div>\n                    </div>\n                  </div>\n                </CCardFooter>\n              </CCard>\n            )\n          })\n        )}\n        {/* <ReactPaginate\n                    previousLabel={\"previous\"}\n                    nextLabel={\"next\"}\n                    breakLabel={\"...\"}\n                    breakClassName={\"break-me\"}\n                    // pageCount={inventories.totalPages}\n                    marginPagesDisplayed={2}\n                    pageRangeDisplayed={5}\n                    // onPageChange={this.handlePageClick}\n                    containerClassName={\"pagination\"}\n                    activeClassName={\"active\"}\n                /> */}\n      </>\n    )\n  }\n}\nconst mapStateToProps = (state) => {\n  return {\n    orderResponse: state.orderResponse,\n    messageResponse: state.messageResponse,\n    userResponse: state.userResponse,\n  }\n}\nexport default connect(mapStateToProps, {\n  getOrders,\n  clearMessage,\n  updateOrderStatus,\n  saveComments,\n})(Orders)\n","import authHeader from '../auth/authHeader';\nimport axios from './RestApi';\n\nexport class OrderApiService {\n    getOrders(status) {\n        return axios.get(\"/orders/status/\" + status, {\n            headers: authHeader()\n        })\n    }\n\n    getPaymentTransactions(query, page, limit) {\n        return axios.get(\"/orders/payments\", {\n            headers: authHeader(),\n            params: {\n                query: query,\n                page: page,\n                limit: limit\n            }\n        })\n    }\n\n    updateOrderPaymentStatus(orderId, paymentStatus) {\n        return axios.put(\"/orders/\" + orderId + \"/paid/\" + paymentStatus, {}, {\n            headers: authHeader()\n        })\n    }\n\n\n    placeOrderDetails(orderDetails) {\n        return axios.post(\"/orders/checkout\", {\n            customerAddressId: orderDetails.addressId,\n            paymentId: orderDetails.paymentMethodId,\n            cartItems: orderDetails.items\n        }, {\n            headers: authHeader()\n        })\n    }\n\n    getOrderByOrderId(orderId) {\n        return axios.get(\"/orders/\" + orderId, {\n            headers: authHeader()\n        })\n    }\n\n    updateOrderStatus(orderId, status) {\n        return axios.put(\"/orders/\" + orderId + \"/status/\" + status, {}, {\n            headers: authHeader()\n        })\n    }\n}\nexport default new OrderApiService();","import { SET_MESSAGE } from \"src/constants/userConstants\";\n\nexport const handleError = (error, dispatch) => {\n    const errorMessage =\n        (error.response &&\n            error.response.data &&\n            error.response.data.message) ||\n        error.message ||\n        error.toString();\n\n    const status = (error.response &&\n        error.response.data &&\n        error.response.data.code) ||\n        error.toString();\n\n    dispatch({\n        type: SET_MESSAGE,\n        payload: {\n            status: status,\n            data: {\n                message: errorMessage\n            }\n        }\n    })\n}","import { GET_ORDER_BY_ID, GET_ORDERS, ORDER_ITEMS, PLACE_ORDER, UPDATE_ORDER_STATUS, GET_PAYMENT_TRANSACTIONS, UPDATE_PAYMENT_STATUS } from \"src/service/redux/constants\";\nimport { SET_MESSAGE } from \"src/constants/userConstants\";\nimport OrderApiService from \"src/service/restAPI/OrderApiService\";\nimport { handleError } from \"../indexAction\";\n\nexport const getOrders = (status, page, limit) => async (dispatch) => {\n    return OrderApiService.getOrders(status, page, limit).then(\n        (response) => {\n            dispatch({\n                type: GET_ORDERS,\n                payload: {\n                    status: 200,\n                    action: \"GET_ORDERS\",\n                    data: {\n                        orders: response.data.orders,\n                        orderStatusCount: response.data.orderCounts\n                    }\n                }\n            })\n            return Promise.resolve();\n        },\n        (error) => {\n            handleError(error, dispatch);\n            return Promise.reject();\n        }\n    )\n\n}\n\nexport const getOrderItems = (items) => async (dispatch) => {\n    dispatch({\n        type: ORDER_ITEMS,\n        payload: {\n            status: 200,\n            action: \"ORDERITEMS\",\n            data: {\n                items: items\n            }\n        }\n    })\n}\n\nexport const placeOrder = (orderDetials) => async (dispatch) => {\n    return OrderApiService.placeOrderDetails(orderDetials).then(\n        (response) => {\n            dispatch({\n                type: PLACE_ORDER,\n                payload: {\n                    status: 200,\n                    action: \"PLACE_ORDER\",\n                    data: {\n\n                    }\n                }\n            })\n            dispatch({\n                type: SET_MESSAGE,\n                payload: {\n                    status: 200,\n                    data: {\n                        message: \"Successfully Place your Order\",\n                        order: response.data\n                    }\n                }\n            })\n            return Promise.resolve();\n        },\n        (error) => {\n            handleError(error, dispatch);\n            return Promise.reject();\n        }\n    )\n}\n\nexport const getOrderByOrderId = (orderId) => async (dispatch) => {\n    return OrderApiService.getOrderByOrderId(orderId).then(\n        (response) => {\n            dispatch({\n                type: GET_ORDER_BY_ID,\n                payload: {\n                    status: 200,\n                    action: \"GETORDERBYID\",\n                    data: {\n                        order: response.data\n                    }\n                }\n            })\n            return Promise.resolve();\n        },\n        (error) => {\n            handleError(error, dispatch);\n            return Promise.reject();\n        }\n    )\n}\n\nexport const updateOrderStatus = (orderId, status) => async (dispatch) => {\n    return OrderApiService.updateOrderStatus(orderId, status).then(\n        (response) => {\n            dispatch({\n                type: UPDATE_ORDER_STATUS,\n                payload: {\n                    status: 200,\n                    action: UPDATE_ORDER_STATUS,\n                    data: {\n                        order: response.data\n                    }\n                }\n            })\n            dispatch({\n                type: SET_MESSAGE,\n                payload: {\n                    status: 200,\n                    data: {\n                        message: \"Successfully updated order \" + orderId + \" status to \" + status.toUpperCase(),\n                        order: response.data\n                    }\n                }\n            })\n            return Promise.resolve();\n        },\n        (error) => {\n            handleError(error, dispatch);\n            return Promise.reject();\n        }\n    )\n}\n\nexport const updateOrderPaymentStatus = (orderId, paymentStatus) => async (dispatch) => {\n    return OrderApiService.updateOrderPaymentStatus(orderId, paymentStatus).then(\n        (response) => {\n            dispatch({\n                type: UPDATE_PAYMENT_STATUS,\n                payload: {\n                    status: 200,\n                    action: UPDATE_PAYMENT_STATUS,\n                    data: {\n                        order: response.data\n                    }\n                }\n            })\n            dispatch({\n                type: SET_MESSAGE,\n                payload: {\n                    status: 200,\n                    data: {\n                        //message: \"Successfully updated order \" + orderId + \" status to \" + status.toUpperCase(),\n                    }\n                }\n            })\n            return Promise.resolve();\n        },\n        (error) => {\n            handleError(error, dispatch);\n            return Promise.reject();\n        }\n    )\n}\n\nexport const getPaymentTransactions = (query, page, limit) => async (dispatch) => {\n    return OrderApiService.getPaymentTransactions(query, page, limit).then(\n        (response) => {\n            dispatch({\n                type: GET_PAYMENT_TRANSACTIONS,\n                payload: {\n                    status: 200,\n                    action: \"GET_PAYMENT_TRANSACTIONS\",\n                    data: {\n                        payments: response.data,\n                    }\n                }\n            })\n            return Promise.resolve();\n        },\n        (error) => {\n            handleError(error, dispatch);\n            return Promise.reject();\n        }\n    )\n}","import React, { Component } from \"react\"\nimport {\n  CCard,\n  CCardBody,\n  CRow,\n  CCol,\n  CImage,\n  CFormLabel,\n  CFormTextarea,\n} from \"@coreui/react\"\nimport { NO_IMAGE_BASE64 } from \"src/service/redux/constants\"\nimport ReactStars from \"react-rating-stars-component\"\n\nexport class OrderCard extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      orderItem: this.props.item,\n      canReview: this.props.canReview,\n      orderId: this.props.orderId,\n      comment: this.props.comment,\n      rating: this.props.rating,\n      submitted: this.props.submitted,\n      canViewReview: this.props.canViewReview,\n    }\n  }\n  render() {\n    let {\n      orderItem,\n      canReview,\n      rating,\n      comment,\n      orderId,\n      submitted,\n      canViewReview,\n    } = this.state\n    let isSubmitted = submitted\n    if (canViewReview && !canReview) {\n      submitted = true\n    }\n    const fontStyle = {\n      fontSize: \"14px\",\n      fontWeight: \"400\",\n    }\n    return (\n      <CRow className=\"mb-3\">\n        <CCard>\n          <CCardBody>\n            <div className=\"d-flex align-items-start\">\n              <CImage\n                rounded\n                src={\n                  orderItem.product.fileImages.length > 0\n                    ? \"/images/products/\" +\n                      orderItem.product.fileImages[0].path +\n                      orderItem.product.fileImages[0].fileName\n                    : NO_IMAGE_BASE64\n                }\n                width={100}\n                height={100}\n              />\n              <div className=\"ms-2  w-100\">\n                <CRow className=\"d-flex justify-content-between\">\n                  <CCol className=\"ps-4 text-dark\">\n                    {orderItem.product.productName}\n                  </CCol>\n                  <CCol className=\"text-dark d-flex flex-column align-items-center\">\n                    <span style={fontStyle} className=\"text-black-50\">\n                      Price\n                    </span>\n                    <span className=\"pt-3\">\n                      &#8369;{orderItem.product.productPrice.toFixed(2)}\n                    </span>\n                  </CCol>\n                  <CCol className=\"text-dark d-flex flex-column align-items-center\">\n                    <span style={fontStyle} className=\"text-black-50\">\n                      Quantity\n                    </span>\n                    <span className=\"pt-3\">{orderItem.quantity}</span>\n                  </CCol>\n                  <CCol className=\"text-dark d-flex flex-column align-items-center\">\n                    <span style={fontStyle} className=\"text-black-50\">\n                      Amount\n                    </span>\n                    <span className=\"pt-3\">\n                      &#8369;{orderItem.amount.toFixed(2)}\n                    </span>\n                  </CCol>\n                </CRow>\n                {(canReview || (canViewReview && isSubmitted)) && (\n                  <div>\n                    <ReactStars\n                      count={5}\n                      value={rating}\n                      size={24}\n                      isHalf={false}\n                      edit={!submitted}\n                      onChange={(newRating) => {\n                        this.props.handleOrderReview(\n                          orderId,\n                          orderItem,\n                          newRating,\n                          comment,\n                        )\n                      }}\n                    />\n                    <div className=\"mb-!2\">\n                      <textarea\n                        disabled={submitted}\n                        onChange={(event) => {\n                          this.props.handleOrderReview(\n                            orderId,\n                            orderItem,\n                            rating,\n                            event.target.value,\n                          )\n                        }}\n                        id=\"exampleFormControlTextarea1\"\n                        rows=\"3\"\n                        style={{ width: \"100%\" }}\n                        placeholder=\"Please write a review.\"\n                      >\n                        {comment}\n                      </textarea>\n                    </div>\n                  </div>\n                )}\n              </div>\n            </div>\n          </CCardBody>\n        </CCard>\n      </CRow>\n    )\n  }\n}\n\nexport default OrderCard\n","import authHeader from '../auth/authHeader';\nimport axios from './RestApi';\n\nexport class CommentApiService {\n    getComments(productId, page, limit) {\n        return axios.get(\"/comments\", {\n            params: {\n                productId: productId,\n                page: page,\n                limit: limit,\n            }\n        })\n    }\n    saveComment(commentDetails) {\n        return axios.post(\"/comments\", commentDetails, {\n            headers: authHeader()\n        })\n    }\n    saveComments(commentDetails) {\n        return axios.post(\"/comments/bulk\", commentDetails, {\n            headers: authHeader()\n        })\n    }\n    deleteComment(commentId) {\n        return axios.delete(\"/comments/\" + commentId, {\n            headers: authHeader()\n        })\n    }\n}\nexport default new CommentApiService();","import { GET_COMMENTS, DELETE_COMMENT, ADD_COMMENT } from \"src/service/redux/constants\";\nimport { SET_MESSAGE } from \"src/constants/userConstants\";\nimport CommentApiService from \"src/service/restAPI/CommentApiService\";\n\n\nexport const getComments = (productId, page, limit) => async (dispatch) => {\n    return CommentApiService.getComments(productId, page, limit).then(\n        (response) => {\n            dispatch({\n                type: GET_COMMENTS,\n                payload: {\n                    status: 200,\n                    action: \"GET_COMMENT\",\n                    data: response.data\n                }\n            })\n            return Promise.resolve();\n        },\n        (error) => {\n            const errorMessage =\n                (error.response &&\n                    error.response.data &&\n                    error.response.data.message) ||\n                error.message ||\n                error.toString();\n\n            const status = (error.response &&\n                error.response.data &&\n                error.response.data.code) ||\n                error.toString();\n\n            dispatch({\n                type: SET_MESSAGE,\n                payload: {\n                    status: status,\n                    data: {\n                        message: errorMessage\n                    }\n                }\n            })\n            return Promise.reject();\n        }\n    )\n\n}\n\nexport const saveComment = (wishlistDetails) => async (dispatch) => {\n    return CommentApiService.saveComment(wishlistDetails).then(\n        (response) => {\n            dispatch({\n                type: ADD_COMMENT,\n                payload: {\n                    status: 200,\n                    action: \"ADD_COMMENT\",\n                    data: response.data\n                }\n            })\n            dispatch({\n                type: SET_MESSAGE,\n                payload: {\n                    status: 200,\n                    data: {\n                        message: \"Successfully submitted product comment\",\n                        order: response.data\n                    }\n                }\n            })\n            return Promise.resolve();\n        },\n        (error) => {\n            const errorMessage =\n                (error.response &&\n                    error.response.data &&\n                    error.response.data.message) ||\n                error.message ||\n                error.toString();\n\n            const status = (error.response &&\n                error.response.data &&\n                error.response.data.code) ||\n                error.toString();\n\n            dispatch({\n                type: SET_MESSAGE,\n                payload: {\n                    status: status,\n                    data: {\n                        message: errorMessage\n                    }\n                }\n            })\n            return Promise.reject();\n        }\n    )\n}\n\nexport const saveComments = (comments) => async (dispatch) => {\n    return CommentApiService.saveComments(comments).then(\n        (response) => {\n            dispatch({\n                type: ADD_COMMENT,\n                payload: {\n                    status: 200,\n                    action: \"ADD_COMMENT\",\n                    data: response.data\n                }\n            })\n            dispatch({\n                type: SET_MESSAGE,\n                payload: {\n                    status: 200,\n                    data: {\n                        message: \"Successfully submitted order product review\",\n                        order: response.data\n                    }\n                }\n            })\n            return Promise.resolve();\n        },\n        (error) => {\n            const errorMessage =\n                (error.response &&\n                    error.response.data &&\n                    error.response.data.message) ||\n                error.message ||\n                error.toString();\n\n            const status = (error.response &&\n                error.response.data &&\n                error.response.data.code) ||\n                error.toString();\n\n            dispatch({\n                type: SET_MESSAGE,\n                payload: {\n                    status: status,\n                    data: {\n                        message: errorMessage\n                    }\n                }\n            })\n            return Promise.reject();\n        }\n    )\n}\n\nexport const deleteComment = (wishlistId) => async (dispatch) => {\n    return CommentApiService.deleteComment(wishlistId).then(\n        (response) => {\n            dispatch({\n                type: DELETE_COMMENT,\n                payload: {\n                    status: 200,\n                    action: \"DELETE_COMMENT\",\n                    data: {\n                        order: response.data\n                    }\n                }\n            })\n            dispatch({\n                type: SET_MESSAGE,\n                payload: {\n                    status: 200,\n                    data: {\n                        message: \"Successfully deleted wishlist\"\n                    }\n                }\n            })\n            return Promise.resolve();\n        },\n        (error) => {\n            const errorMessage =\n                (error.response &&\n                    error.response.data &&\n                    error.response.data.message) ||\n                error.message ||\n                error.toString();\n\n            const status = (error.response &&\n                error.response.data &&\n                error.response.data.code) ||\n                error.toString();\n\n            dispatch({\n                type: SET_MESSAGE,\n                payload: {\n                    status: status,\n                    data: {\n                        message: errorMessage\n                    }\n                }\n            })\n            console.log(\"JKOSLDFJ\")\n            return Promise.reject();\n        }\n    )\n}"],"sourceRoot":""}