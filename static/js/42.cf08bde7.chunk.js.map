{"version":3,"sources":["views/common/public/register/Register.js","service/apiActions/messageAction/messageAction.js","_helper/history.js"],"names":["RightFormCard","lazy","Register","Component","constructor","props","super","state","userCredentials","this","type","validated","loading","successful","message","isLoggedIn","permission","username","password","email","firstName","lastName","phoneNumber","onResetValue","setState","handleOnChange","event","name","target","value","handleShowPassword","preventDefault","handleSubmit","validation","length","createAccount","then","successResponse","messageResponse","data","catch","history","listen","location","clearMessage","componentDidMount","redirectAuthenticated","userResponse","roleName","credentials","roles","render","Roles","SUPER_ADMIN","ADMIN","to","position","className","style","cursor","onSubmit","sm","md","lg","xs","autoCorrect","id","placeholder","onChange","required","htmlFor","size","invalid","onClick","color","margin","width","role","button","connect","async","dispatch","CLEAR_MESSAGE","payload","status","createBrowserHistory"],"mappings":"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","file":"static/js/42.cf08bde7.chunk.js","sourcesContent":["import React, { Component, lazy } from \"react\"\nimport {\n  CHeader,\n  CContainer,\n  CCol,\n  CRow,\n  CCardGroup,\n  CCard,\n  // CFormFeedback,\n  CButton,\n  CCardBody,\n  CForm,\n  CFormFloating,\n  CInputGroup,\n  CFormControl,\n  CFormLabel,\n  CSpinner,\n  CFormFeedback,\n} from \"@coreui/react\"\nimport * as FaIcons from \"react-icons/fa\"\nimport * as BsIcons from \"react-icons/bs\"\nimport { connect } from \"react-redux\"\nimport { Redirect } from \"react-router-dom\"\nimport { createAccount } from \"src/service/apiActions/userAction/userAction\"\nimport { history } from \"src/_helper/history\"\nimport { clearMessage } from \"src/service/apiActions/messageAction/messageAction\"\nimport Roles from \"src/router/config\"\nimport { Link } from \"react-router-dom\"\n\nconst RightFormCard = lazy(() =>\n  import(\"../../../../components/public/RightFormCard\"),\n)\n\nexport class Register extends Component {\n  constructor(props) {\n    super(props)\n    history.listen((location) => {\n      clearMessage() // clear message when changing location\n    })\n  }\n  state = {\n    userCredentials: this.userCredentials,\n    type: \"password\",\n    validated: false,\n    loading: false,\n    successful: false,\n    message: \"\",\n    isLoggedIn: false,\n    permission: \"\",\n  }\n  userCredentials = {\n    username: \"\",\n    password: \"\",\n    email: \"\",\n    firstName: \"\",\n    lastName: \"\",\n    phoneNumber: \"\",\n  }\n  onResetValue = () => {\n    this.setState(() => this.userCredentials)\n  }\n  handleOnChange = (event) => {\n    const name = event.target.name\n\n    this.setState({\n      [name]: event.target.value,\n    })\n  }\n\n  handleShowPassword = (event) => {\n    const { type } = this.state\n    event.preventDefault()\n    this.setState({\n      type: type === \"password\" ? \"text\" : \"password\",\n    })\n  }\n  handleSubmit = (event) => {\n    const { username, password, email, firstName, lastName, phoneNumber } =\n      this.state\n    event.preventDefault()\n\n    this.setState({\n      validation: true,\n      loading: true,\n      successful: false,\n    })\n    if (username.length !== 0 && password.length !== 0 && email.length !== 0) {\n      this.props\n        .createAccount(\n          username,\n          password,\n          email,\n          firstName,\n          lastName,\n          phoneNumber,\n        )\n        .then(() => {\n          const successResponse = this.props.messageResponse.data.message;\n          this.setState({\n            loading: false,\n            successful: true,\n            message: successResponse,\n          })\n          this.onResetValue()\n        })\n        .catch(() => {\n          this.setState({\n            loading: false,\n            successful: false,\n          })\n          this.onResetValue()\n        })\n    }\n  }\n  componentDidMount() {\n    this.redirectAuthenticated()\n  }\n  redirectAuthenticated() {\n    const isLoggedIn = this.props.userResponse.isLoggedIn\n    if (isLoggedIn) {\n      let roleName = this.props.userResponse.credentials.roles.roleName\n      let permission = roleName\n        ? roleName\n        : this.props.userResponse.credentials.roles\n\n      this.setState({\n        isLoggedIn: isLoggedIn,\n        permission: permission,\n      })\n    }\n  }\n  render() {\n    let {\n      username,\n      password,\n      email,\n      firstName,\n      lastName,\n      phoneNumber,\n      type,\n      loading,\n      successful,\n      message,\n      isLoggedIn,\n      permission,\n    } = this.state\n\n    if (isLoggedIn) {\n      if (permission === Roles.SUPER_ADMIN || permission === Roles.ADMIN) {\n        return <Redirect to=\"/app\" />\n      } else {\n        return <Redirect to=\"/home\" />\n      }\n    }\n    return (\n      <>\n        <CHeader position=\"sticky\">\n          <CContainer>\n            <Link className=\"nav-link\" to=\"/home\" style={{ cursor: \"pointer\" }}>\n              <h2 className=\"nav-item\">Logo</h2>\n            </Link>\n          </CContainer>\n        </CHeader>\n        <div className=\"min-vh-100 d-flex flex-row align-items-center text-dark \">\n          <CContainer>\n            <CRow className=\"justify-content-center align-items-center\">\n              <CCol>\n                <CCardGroup className=\"shadow-lg\">\n                  <CCard className=\"p-4 m-0 left-to-right form-container border-0\">\n                    <CCardBody>\n                      {!loading ? (\n                        <CForm onSubmit={this.handleSubmit}>\n                          <CCol\n                            sm=\"12\"\n                            md=\"12\"\n                            lg=\"12\"\n                            className=\"d-flex justify-content-center p-3\"\n                          >\n                            <h2 className=\"text-dark\">Register</h2>\n                          </CCol>\n                          <CRow>\n                            <CCol xs=\"12\" sm=\"12\" md=\"6\" lg=\"6\">\n                              <CInputGroup>\n                                <CCol xs=\"12\" sm=\"12\" md=\"12\" lg=\"12\">\n                                  <CFormFloating className=\"mb-3 text-dark \">\n                                    <CFormControl\n                                      name=\"firstName\"\n                                      type=\"text\"\n                                      autoCorrect=\"false\"\n                                      id=\"floatingFirstName\"\n                                      placeholder=\"First name\"\n                                      onChange={this.handleOnChange}\n                                      value={firstName}\n                                      required\n                                      className=\"rounded-pill  ps-4 pe-4\"\n                                    />\n                                    <CFormLabel\n                                      htmlFor=\"floatingFirstName \"\n                                      className=\"ps-4 pe-4\"\n                                    >\n                                      <FaIcons.FaUser size={18} />\n                                      <span className=\"ps-2\">First name</span>\n                                    </CFormLabel>\n                                  </CFormFloating>\n                                </CCol>\n                              </CInputGroup>\n                            </CCol>\n                            <CCol xs=\"12\" sm=\"12\" md=\"6\" lg=\"6\">\n                              <CInputGroup>\n                                <CCol xs=\"12\" sm=\"12\" md=\"12\" lg=\"12\">\n                                  <CFormFloating className=\"mb-3 text-dark \">\n                                    <CFormControl\n                                      name=\"lastName\"\n                                      type=\"text\"\n                                      autoCorrect=\"false\"\n                                      id=\"floatingLastName\"\n                                      placeholder=\"Last name\"\n                                      onChange={this.handleOnChange}\n                                      value={lastName}\n                                      required\n                                      className=\"rounded-pill  ps-4 pe-4\"\n                                    />\n                                    <CFormLabel\n                                      htmlFor=\"floatingLastName\"\n                                      className=\"ps-4 pe-4\"\n                                    >\n                                      <FaIcons.FaUser size={18} />\n                                      <span className=\"ps-2\">Last name</span>\n                                    </CFormLabel>\n                                  </CFormFloating>\n                                </CCol>\n                              </CInputGroup>\n                            </CCol>\n                          </CRow>\n                          <CRow>\n                            <CCol md=\"6\" sm=\"12\" lg=\"6\">\n                              <CInputGroup>\n                                <CCol xs=\"12\" sm=\"12\" md=\"12\" lg=\"12\">\n                                  <CFormFloating className=\"mb-3 text-dark \">\n                                    <CFormControl\n                                      name=\"phoneNumber\"\n                                      type=\"number\"\n                                      autoCorrect=\"false\"\n                                      id=\"floatingPhoneNumber\"\n                                      placeholder=\"Phone number\"\n                                      onChange={this.handleOnChange}\n                                      value={phoneNumber}\n                                      required\n                                      className=\"rounded-pill  ps-4 pe-4\"\n                                    />\n                                    <CFormLabel\n                                      htmlFor=\"floatingPhoneNumber \"\n                                      className=\"ps-4 pe-4\"\n                                    >\n                                      <FaIcons.FaPhone size={18} />\n                                      <span className=\"ps-2\">Phone number</span>\n                                    </CFormLabel>\n                                  </CFormFloating>\n                                </CCol>\n                              </CInputGroup>\n                            </CCol>\n                            <CCol md=\"6\" sm=\"12\" lg=\"6\">\n                              <CInputGroup>\n                                <CCol xs=\"12\" sm=\"12\" md=\"12\" lg=\"12\">\n                                  <CFormFloating className=\"mb-3 text-dark position-relative\">\n                                    <CFormControl\n                                      name=\"email\"\n                                      type=\"email\"\n                                      id=\"floatingEmail\"\n                                      autoCorrect=\"false\"\n                                      placeholder=\"Email\"\n                                      onChange={this.handleOnChange}\n                                      value={email}\n                                      required\n                                      className=\"rounded-pill ps-4 pe-4\"\n                                    />\n                                    <CFormLabel\n                                      htmlFor=\"exampleFormControlTextarea1 \"\n                                      className=\"ps-4 pe-4\"\n                                    >\n                                      <FaIcons.FaEnvelope size={18} />\n                                      <span className=\"ps-2\">Email</span>\n                                    </CFormLabel>\n                                    <CFormFeedback invalid>\n                                      Please provide a valid username\n                                    </CFormFeedback>\n                                  </CFormFloating>\n                                </CCol>\n                              </CInputGroup>\n                            </CCol>\n                          </CRow>\n                          <CRow>\n                            <CCol md=\"6\" sm=\"12\" lg=\"6\">\n                              <CInputGroup>\n                                <CCol xs=\"12\" sm=\"12\" md=\"12\" lg=\"12\">\n                                  <CFormFloating className=\"mb-3 text-dark \">\n                                    <CFormControl\n                                      name=\"username\"\n                                      type=\"text\"\n                                      autoCorrect=\"false\"\n                                      id=\"floatingInput\"\n                                      placeholder=\"username\"\n                                      onChange={this.handleOnChange}\n                                      value={username}\n                                      required\n                                      className=\"rounded-pill  ps-4 pe-4\"\n                                    />\n                                    <CFormLabel\n                                      htmlFor=\"floatingInput \"\n                                      className=\"ps-4 pe-4\"\n                                    >\n                                      <FaIcons.FaUserCircle size={18} />\n                                      <span className=\"ps-2\">Username</span>\n                                    </CFormLabel>\n                                  </CFormFloating>\n                                </CCol>\n                              </CInputGroup>\n                            </CCol>\n                            <CCol md=\"6\" sm=\"12\" lg=\"6\">\n                              <CInputGroup>\n                                <CCol xs=\"12\" sm=\"12\" md=\"12\" lg=\"12\">\n                                  <CFormFloating className=\"mb-3 text-dark position-relative\">\n                                    <CFormControl\n                                      name=\"password\"\n                                      type={type}\n                                      id=\"floatingPassword\"\n                                      autoCorrect=\"false\"\n                                      placeholder=\"Password\"\n                                      onChange={this.handleOnChange}\n                                      value={password}\n                                      required\n                                      className=\"rounded-pill ps-4 pe-4\"\n                                    />\n                                    <CFormLabel\n                                      htmlFor=\"exampleFormControlTextarea1 \"\n                                      className=\"ps-4 pe-4\"\n                                    >\n                                      <FaIcons.FaLock size={18} />\n                                      <span className=\"ps-2\">Password</span>\n                                    </CFormLabel>\n                                    <span\n                                      onClick={this.handleShowPassword}\n                                      className=\"position-absolute top-50 end-0 translate-middle-y ps-4 pe-4\"\n                                    >\n                                      {type === \"password\" ? (\n                                        <FaIcons.FaEyeSlash size={20} />\n                                      ) : (\n                                        <FaIcons.FaEye size={20} />\n                                      )}\n                                    </span>\n                                    <CFormFeedback invalid>\n                                      Please provide a valid username\n                                    </CFormFeedback>\n                                  </CFormFloating>\n                                </CCol>\n                              </CInputGroup>\n                            </CCol>\n                          </CRow>\n                          <CCol\n                            sm=\"12\"\n                            md=\"12\"\n                            lg=\"12\"\n                            className=\"d-flex flex-column justify-content-center\"\n                          >\n                            <CButton\n                              type=\"submit\"\n                              color=\"success\"\n                              size=\"lg\"\n                              style={{ margin: \"20px auto\", width: \"50%\" }}\n                              className=\"d-flex justify-content-center align-items-center position-relative overflow-hidden login-btn\"\n                            >\n                              {loading ? (\n                                <CSpinner size=\"sm\" />\n                              ) : (\n                                <span className=\"d-flex align-items-center login-icon me-2\">\n                                  <BsIcons.BsFillPersonPlusFill size={20} />\n                                </span>\n                              )}\n                              <span className=\"label-btn \">Register</span>\n                            </CButton>\n                          </CCol>\n                          {message && (\n                            <div className=\"form-group\">\n                              <div\n                                className={\n                                  successful\n                                    ? \"alert alert-success\"\n                                    : \"alert alert-danger\"\n                                }\n                                role=\"alert\"\n                              >\n                                {message}\n                              </div>\n                            </div>\n                          )}\n                        </CForm>\n                      ) : (\n                        <CSpinner />\n                      )}\n                    </CCardBody>\n                  </CCard>\n                  <RightFormCard button=\"login\" />\n                </CCardGroup>\n              </CCol>\n            </CRow>\n          </CContainer>\n        </div>\n      </>\n    )\n  }\n}\nconst mapStateToProps = (state) => {\n  return {\n    userResponse: state.userResponse,\n    messageResponse: state.messageResponse,\n  }\n}\nexport default connect(mapStateToProps, {\n  createAccount,\n  clearMessage,\n})(Register)\n","import { SET_MESSAGE, CLEAR_MESSAGE } from \"src/constants/userConstants\";\n\nexport const setMessage = (message, status) => async (dispatch) => {\n    dispatch({\n        type: SET_MESSAGE,\n        payload: {\n            status: status,\n            data: {\n                message: message\n            }\n        }\n    })\n\n}\nexport const setProductMessage = (message, status) => async (dispatch) => {\n    dispatch({\n        type: SET_MESSAGE,\n        payload: {\n            status: status,\n            data: {\n                message: message\n            }\n        }\n    })\n}\nexport const setImageMesssage = (message, status) => async (dispatch) => {\n    dispatch({\n        type: SET_MESSAGE,\n        payload: {\n            status: status,\n            data: {\n                message: message\n            }\n        }\n    })\n}\nexport const clearMessage = () => async (dispatch) => {\n    dispatch({\n        type: CLEAR_MESSAGE,\n        payload: {\n            status: '',\n            data: {\n                message: ''\n            }\n        }\n    })\n};","import { createBrowserHistory } from 'history';\n\nexport const history = createBrowserHistory();"],"sourceRoot":""}