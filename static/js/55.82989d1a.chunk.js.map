{"version":3,"sources":["service/restAPI/OrderApiService.js","service/apiActions/indexAction.js","service/apiActions/orderAction/orderAction.js","views/common/cart/Cart.js"],"names":["getOrders","status","axios","get","headers","authHeader","getPaymentTransactions","query","page","limit","params","updateOrderPaymentStatus","orderId","paymentStatus","put","placeOrderDetails","orderDetails","post","customerAddressId","addressId","paymentId","paymentMethodId","cartItems","items","getOrderByOrderId","updateOrderStatus","handleError","error","dispatch","errorMessage","response","data","message","toString","code","type","SET_MESSAGE","payload","async","OrderApiService","then","GET_ORDERS","action","orders","orderStatusCount","orderCounts","Promise","resolve","reject","getOrderItems","ORDER_ITEMS","placeOrder","orderDetials","PLACE_ORDER","order","GET_ORDER_BY_ID","UPDATE_ORDER_STATUS","toUpperCase","UPDATE_PAYMENT_STATUS","GET_PAYMENT_TRANSACTIONS","payments","Checkout","React","lazy","CustomerAddress","PaymentMethod","SuccessOrderPlace","Cart","Component","state","step","Tquantity","Tamount","isLoggedIn","permission","undefined","successfull","loading","redirectUrl","redirectUser","this","props","userResponse","roleName","credentials","roles","setState","handleCartOnChange","handleAddressOnChange","id","handlePaymentMethodOnChange","handleOnNext","handleOnPre","renderSteps","stepComponent","paymentDetailsOnChange","checkValueOnChange","getValue","paymentMethodOnChange","renderHeader","stepHeader","handleOnPlaceOrder","event","messageResponse","catch","componentDidMount","history","push","match","render","totalAmount","headerStyle","fontWeight","Roles","SUPER_ADMIN","ADMIN","to","window","location","replace","fallback","className","color","size","sm","lg","style","fontSize","length","map","item","index","promo","product","percentage","discount","productPrice","price","maxWidth","productName","toFixed","fontStyle","textAlign","variant","onClick","disabled","connect","clearMessage"],"mappings":"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","file":"static/js/55.82989d1a.chunk.js","sourcesContent":["import authHeader from '../auth/authHeader';\nimport axios from './RestApi';\n\nexport class OrderApiService {\n    getOrders(status) {\n        return axios.get(\"/orders/status/\" + status, {\n            headers: authHeader()\n        })\n    }\n\n    getPaymentTransactions(query, page, limit) {\n        return axios.get(\"/orders/payments\", {\n            headers: authHeader(),\n            params: {\n                query: query,\n                page: page,\n                limit: limit\n            }\n        })\n    }\n\n    updateOrderPaymentStatus(orderId, paymentStatus) {\n        return axios.put(\"/orders/\" + orderId + \"/paid/\" + paymentStatus, {}, {\n            headers: authHeader()\n        })\n    }\n\n\n    placeOrderDetails(orderDetails) {\n        return axios.post(\"/orders/checkout\", {\n            customerAddressId: orderDetails.addressId,\n            paymentId: orderDetails.paymentMethodId,\n            cartItems: orderDetails.items\n        }, {\n            headers: authHeader()\n        })\n    }\n\n    getOrderByOrderId(orderId) {\n        return axios.get(\"/orders/\" + orderId, {\n            headers: authHeader()\n        })\n    }\n\n    updateOrderStatus(orderId, status) {\n        return axios.put(\"/orders/\" + orderId + \"/status/\" + status, {}, {\n            headers: authHeader()\n        })\n    }\n}\nexport default new OrderApiService();","import { SET_MESSAGE } from \"src/constants/userConstants\";\n\nexport const handleError = (error, dispatch) => {\n    const errorMessage =\n        (error.response &&\n            error.response.data &&\n            error.response.data.message) ||\n        error.message ||\n        error.toString();\n\n    const status = (error.response &&\n        error.response.data &&\n        error.response.data.code) ||\n        error.toString();\n\n    dispatch({\n        type: SET_MESSAGE,\n        payload: {\n            status: status,\n            data: {\n                message: errorMessage\n            }\n        }\n    })\n}","import { GET_ORDER_BY_ID, GET_ORDERS, ORDER_ITEMS, PLACE_ORDER, UPDATE_ORDER_STATUS, GET_PAYMENT_TRANSACTIONS, UPDATE_PAYMENT_STATUS } from \"src/service/redux/constants\";\nimport { SET_MESSAGE } from \"src/constants/userConstants\";\nimport OrderApiService from \"src/service/restAPI/OrderApiService\";\nimport { handleError } from \"../indexAction\";\n\nexport const getOrders = (status, page, limit) => async (dispatch) => {\n    return OrderApiService.getOrders(status, page, limit).then(\n        (response) => {\n            dispatch({\n                type: GET_ORDERS,\n                payload: {\n                    status: 200,\n                    action: \"GET_ORDERS\",\n                    data: {\n                        orders: response.data.orders,\n                        orderStatusCount: response.data.orderCounts\n                    }\n                }\n            })\n            return Promise.resolve();\n        },\n        (error) => {\n            handleError(error, dispatch);\n            return Promise.reject();\n        }\n    )\n\n}\n\nexport const getOrderItems = (items) => async (dispatch) => {\n    dispatch({\n        type: ORDER_ITEMS,\n        payload: {\n            status: 200,\n            action: \"ORDERITEMS\",\n            data: {\n                items: items\n            }\n        }\n    })\n}\n\nexport const placeOrder = (orderDetials) => async (dispatch) => {\n    return OrderApiService.placeOrderDetails(orderDetials).then(\n        (response) => {\n            dispatch({\n                type: PLACE_ORDER,\n                payload: {\n                    status: 200,\n                    action: \"PLACE_ORDER\",\n                    data: {\n\n                    }\n                }\n            })\n            dispatch({\n                type: SET_MESSAGE,\n                payload: {\n                    status: 200,\n                    data: {\n                        message: \"Successfully Place your Order\",\n                        order: response.data\n                    }\n                }\n            })\n            return Promise.resolve();\n        },\n        (error) => {\n            handleError(error, dispatch);\n            return Promise.reject();\n        }\n    )\n}\n\nexport const getOrderByOrderId = (orderId) => async (dispatch) => {\n    return OrderApiService.getOrderByOrderId(orderId).then(\n        (response) => {\n            dispatch({\n                type: GET_ORDER_BY_ID,\n                payload: {\n                    status: 200,\n                    action: \"GETORDERBYID\",\n                    data: {\n                        order: response.data\n                    }\n                }\n            })\n            return Promise.resolve();\n        },\n        (error) => {\n            handleError(error, dispatch);\n            return Promise.reject();\n        }\n    )\n}\n\nexport const updateOrderStatus = (orderId, status) => async (dispatch) => {\n    return OrderApiService.updateOrderStatus(orderId, status).then(\n        (response) => {\n            dispatch({\n                type: UPDATE_ORDER_STATUS,\n                payload: {\n                    status: 200,\n                    action: UPDATE_ORDER_STATUS,\n                    data: {\n                        order: response.data\n                    }\n                }\n            })\n            dispatch({\n                type: SET_MESSAGE,\n                payload: {\n                    status: 200,\n                    data: {\n                        message: \"Successfully updated order \" + orderId + \" status to \" + status.toUpperCase(),\n                        order: response.data\n                    }\n                }\n            })\n            return Promise.resolve();\n        },\n        (error) => {\n            handleError(error, dispatch);\n            return Promise.reject();\n        }\n    )\n}\n\nexport const updateOrderPaymentStatus = (orderId, paymentStatus) => async (dispatch) => {\n    return OrderApiService.updateOrderPaymentStatus(orderId, paymentStatus).then(\n        (response) => {\n            dispatch({\n                type: UPDATE_PAYMENT_STATUS,\n                payload: {\n                    status: 200,\n                    action: UPDATE_PAYMENT_STATUS,\n                    data: {\n                        order: response.data\n                    }\n                }\n            })\n            dispatch({\n                type: SET_MESSAGE,\n                payload: {\n                    status: 200,\n                    data: {\n                        //message: \"Successfully updated order \" + orderId + \" status to \" + status.toUpperCase(),\n                    }\n                }\n            })\n            return Promise.resolve();\n        },\n        (error) => {\n            handleError(error, dispatch);\n            return Promise.reject();\n        }\n    )\n}\n\nexport const getPaymentTransactions = (query, page, limit) => async (dispatch) => {\n    return OrderApiService.getPaymentTransactions(query, page, limit).then(\n        (response) => {\n            dispatch({\n                type: GET_PAYMENT_TRANSACTIONS,\n                payload: {\n                    status: 200,\n                    action: \"GET_PAYMENT_TRANSACTIONS\",\n                    data: {\n                        payments: response.data,\n                    }\n                }\n            })\n            return Promise.resolve();\n        },\n        (error) => {\n            handleError(error, dispatch);\n            return Promise.reject();\n        }\n    )\n}","import React, { Component, Suspense } from \"react\"\nimport {\n  CRow,\n  CCol,\n  CButton,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCardFooter,\n  CSpinner,\n} from \"@coreui/react\"\nimport { DotLoader } from \"react-spinners\"\n\n// import Checkout from './checkout/Checkout'\n// import CustomerAddress from './customerAddress/CustomerAddress';\n// import PaymentMethod from './payment/PaymentMethod';\nimport { connect } from \"react-redux\"\n//action\nimport { clearMessage } from \"src/service/apiActions/messageAction/messageAction\"\nimport {\n  placeOrder,\n  updateOrderPaymentStatus,\n} from \"src/service/apiActions/orderAction/orderAction\"\nimport { history } from \"src/_helper/history\"\nimport { Redirect } from \"react-router-dom\"\nimport Roles from \"src/router/config\"\n// import SuccessOrderPlace from './SuccessOrderPlace';\nconst Checkout = React.lazy(() =>\n  import(\"src/views/common/cart/checkout/Checkout\"),\n)\nconst CustomerAddress = React.lazy(() =>\n  import(\"src/views/common/cart/customerAddress/CustomerAddress\"),\n)\nconst PaymentMethod = React.lazy(() =>\n  import(\"src/views/common/cart/payment/PaymentMethod\"),\n)\nconst SuccessOrderPlace = React.lazy(() =>\n  import(\"src/views/common/cart/SuccessOrderPlace\"),\n)\n\nexport class Cart extends Component {\n  state = {\n    step: 1,\n    items: [],\n    Tquantity: 0,\n    Tamount: 0,\n    isLoggedIn: false,\n    permission: \"\",\n    addressId: undefined,\n    paymentMethodId: undefined,\n\n    successfull: false,\n    loading: false,\n    redirectUrl: \"\",\n  }\n\n  componentDidMount() {\n    if (!this.props.userResponse.isLoggedIn) {\n      history.push(\"/login\")\n    } else {\n      this.redirectUser()\n    }\n\n    if (this.props.userResponse.isLoggedIn) {\n      const { orderId, paymentStatus } = this.props.match.params\n      if (paymentStatus == \"success\" || paymentStatus == \"failed\") {\n        this.props.updateOrderPaymentStatus(orderId, paymentStatus)\n      }\n      this.setState({ successfull: paymentStatus == \"success\" })\n    }\n  }\n\n  redirectUser = () => {\n    const isLoggedIn = this.props.userResponse.isLoggedIn\n    if (isLoggedIn) {\n      let roleName = this.props.userResponse.credentials.roles.roleName\n      let permission = roleName\n        ? roleName\n        : this.props.userResponse.credentials.roles\n\n      this.setState({\n        isLoggedIn: isLoggedIn,\n        permission: permission,\n      })\n    }\n  }\n  handleCartOnChange = (items, Tquantity, Tamount) => {\n    this.setState({\n      items: items,\n      Tquantity: Tquantity,\n      Tamount: Tamount,\n    })\n  }\n  handleAddressOnChange = (id) => {\n    this.setState({\n      addressId: id,\n    })\n  }\n  handlePaymentMethodOnChange = (id) => {\n    this.setState({\n      paymentMethodId: id,\n    })\n  }\n  handleOnNext = () => {\n    let { step } = this.state\n    if (step === 3) return\n    this.setState({\n      step: ++step,\n    })\n  }\n  handleOnPre = () => {\n    let { step } = this.state\n    if (step === 1) return\n    this.setState({\n      step: --step,\n    })\n  }\n  renderSteps = () => {\n    let { step, addressId, paymentMethodId } = this.state\n    let stepComponent = (\n      <Checkout paymentDetailsOnChange={this.handleCartOnChange} />\n    )\n    switch (step) {\n      case 1:\n        stepComponent = (\n          <Checkout paymentDetailsOnChange={this.handleCartOnChange} />\n        )\n        return stepComponent\n      case 2:\n        stepComponent = (\n          <CustomerAddress\n            checkValueOnChange={this.handleAddressOnChange}\n            getValue={addressId}\n          />\n        )\n        return stepComponent\n\n      case 3:\n        stepComponent = (\n          <PaymentMethod\n            paymentMethodOnChange={this.handlePaymentMethodOnChange}\n            getValue={paymentMethodId}\n          />\n        )\n        return stepComponent\n\n      default:\n        return stepComponent\n    }\n  }\n  renderHeader = () => {\n    let { step } = this.state\n    let stepHeader = \"Shopping Cart\"\n    switch (step) {\n      case 1:\n        return (stepHeader = \"Shopping Cart\")\n      case 2:\n        return (stepHeader = \"Customer Address\")\n\n      case 3:\n        return (stepHeader = \"Payment Method\")\n      case 4:\n        return (stepHeader = \"\")\n\n      default:\n        return stepHeader\n    }\n  }\n  handleOnPlaceOrder = (event) => {\n    let { addressId, paymentMethodId, items } = this.state\n    let orderDetails = {\n      addressId: addressId,\n      paymentMethodId: paymentMethodId,\n      items: items,\n    }\n    this.setState({\n      loading: true,\n    })\n    this.props\n      .placeOrder(orderDetails)\n      .then(() => {\n        let { data } = this.props.messageResponse\n        this.setState({\n          successfull: true,\n          loading: false,\n          step: 4,\n          redirectUrl: data.order.redirectUrl,\n        })\n      })\n      .catch(() => {\n        this.setState({\n          successfull: false,\n          loading: false,\n        })\n      })\n  }\n\n  render() {\n    let {\n      step,\n      items,\n      Tamount,\n      Tquantity,\n      isLoggedIn,\n      permission,\n      addressId,\n      paymentMethodId,\n      successfull,\n      loading,\n      redirectUrl,\n    } = this.state\n    var totalAmount = 0\n    const headerStyle = {\n      fontWeight: \"800\",\n    }\n    if (isLoggedIn) {\n      if (permission === Roles.SUPER_ADMIN || permission === Roles.ADMIN) {\n        return <Redirect to=\"/app\" />\n      }\n    } else if (!this.props.userResponse.isLoggedIn) {\n      return <Redirect to=\"/login\" />\n    }\n\n    if (successfull && redirectUrl != \"\" && redirectUrl) {\n      window.location.replace(redirectUrl)\n      return <></>\n    }\n\n    return (\n      <div>\n        <Suspense\n          fallback={\n            <div className=\"d-flex justify-content-center align-items-center  position-fixed \">\n              <DotLoader color=\"#36D7B7\" size={100} />\n            </div>\n          }\n        >\n          <CRow>\n            <h3 className=\"mt-2 mb-4\">{this.renderHeader()}</h3>\n          </CRow>\n          {successfull ? (\n            <SuccessOrderPlace />\n          ) : (\n            <CRow>\n              <CCol sm=\"12\" lg=\"8\">\n                {this.renderSteps()}\n              </CCol>\n              <CCol sm=\"12\" lg=\"4\" className=\"mb-5\">\n                <CCard>\n                  <CCardHeader>\n                    <span\n                      className=\"\"\n                      style={{ fontSize: \"18px\", ...headerStyle }}\n                    >\n                      Summary Payment\n                    </span>\n                  </CCardHeader>\n                  <CCardBody className=\"border-bottom\">\n                    <div className=\"d-flex justify-content-between bg-light p-2\">\n                      <div>\n                        <span style={{ ...headerStyle }}>Item</span>\n                      </div>\n                      <div>\n                        <span style={{ ...headerStyle }}>Amount</span>\n                      </div>\n                    </div>\n\n                    {items.length > 0 ? (\n                      items.map((item, index) => {\n                        const { promo, product } = item.product\n                        const status = promo && promo.status\n\n                        const percentage = promo && promo.percentage\n                        let discount = (product.productPrice * percentage) / 100\n                        let price = product.productPrice - discount\n                        if (status === \"ONGOING\") {\n                          totalAmount += price\n                        } else {\n                          totalAmount += product.productPrice\n                        }\n\n                        return (\n                          <>\n                            <div\n                              key={item.id}\n                              className=\"p-2 d-flex justify-content-between align-items-center\"\n                            >\n                              <span\n                                className=\"text-truncate d-inline-block\"\n                                style={{ maxWidth: \"150px\" }}\n                              >\n                                {product.productName}\n                              </span>\n                              <span>\n                                &#8369;\n                                {status === \"ONGOING\" ? (\n                                  <>\n                                    <span\n                                      className=\"text-muted text-decoration-line-through me-2\"\n                                      style={{ fontSize: \"16px\" }}\n                                    >\n                                      {product.productPrice.toFixed(2)}\n                                    </span>\n                                    <span>{price.toFixed(2)}</span>\n                                  </>\n                                ) : (\n                                  product.productPrice.toFixed(2)\n                                )}\n                              </span>\n                            </div>\n                          </>\n                        )\n                      })\n                    ) : (\n                      <CCol\n                        style={{ fontStyle: \"italic\", textAlign: \"center\" }}\n                        className=\"p-2\"\n                      >\n                        No Item\n                      </CCol>\n                    )}\n                  </CCardBody>\n                  <div className=\"p-3 \">\n                    <div className=\"d-flex justify-content-between align-items-center pb-2\">\n                      <span className=\"text-muted font-style me-2\">\n                        Total Quantity\n                      </span>\n                      <span style={{ fontWeight: \"500\" }}>{Tquantity}</span>\n                    </div>\n                    <div className=\"d-flex justify-content-between align-items-center pb-2\">\n                      <span className=\"text-muted font-style me-2\">\n                        Total Amount\n                      </span>\n                      <span style={{ fontWeight: \"500\" }}>\n                        &#8369;{totalAmount.toFixed(2)}\n                      </span>\n                    </div>\n                  </div>\n                  <CCardFooter>\n                    <div className=\"d-grid gap-2 mx-auto\">\n                      {step > 1 ? (\n                        <div className=\"d-grid gap-2 d-md-flex justify-content-md-end\">\n                          <CButton\n                            variant=\"ghost\"\n                            color=\"dark\"\n                            onClick={this.handleOnPre}\n                            className=\"w-100\"\n                          >\n                            Back\n                          </CButton>\n                          {step === 3 ? (\n                            <CButton\n                              className=\"w-100\"\n                              color=\"info\"\n                              disabled={\n                                paymentMethodId === undefined ? true : false\n                              }\n                              onClick={this.handleOnPlaceOrder}\n                            >\n                              {loading && (\n                                <CSpinner size=\"sm\" className=\"ms-1\" />\n                              )}\n                              Place Order\n                            </CButton>\n                          ) : (\n                            <CButton\n                              className=\"w-100\"\n                              color=\"info\"\n                              onClick={this.handleOnNext}\n                              disabled={addressId === undefined ? true : false}\n                            >\n                              Next\n                            </CButton>\n                          )}\n                        </div>\n                      ) : (\n                        <CButton\n                          type=\"submit\"\n                          color=\"info\"\n                          disabled={items.length <= 0 ? true : false}\n                          className=\"d-flex justify-content-center align-items-center\"\n                          onClick={this.handleOnNext}\n                        >\n                          {/* <IoIcons.IoBagCheckOutline size=\"23\" /> */}\n                          <span className=\"ms-2\">Checkout</span>\n                        </CButton>\n                      )}\n                    </div>\n                  </CCardFooter>\n                </CCard>\n              </CCol>\n            </CRow>\n          )}\n        </Suspense>\n      </div>\n    )\n  }\n}\nconst mapStateToProps = (state) => {\n  return {\n    userResponse: state.userResponse,\n    messageResponse: state.messageResponse,\n  }\n}\nexport default connect(mapStateToProps, {\n  clearMessage,\n  placeOrder,\n  updateOrderPaymentStatus,\n})(Cart)\n"],"sourceRoot":""}