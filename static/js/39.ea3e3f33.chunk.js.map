{"version":3,"sources":["service/apiActions/productAction/productAction.js","service/restAPI/ProductApiService.js","service/restAPI/DashboardApiService.js","service/apiActions/dashboardAction/dashboardAction.js","views/private/dashboard/Dashboard.js"],"names":["saveProduct","formData","async","ProductApiService","then","response","dispatch","type","SAVE_PRODUCT","SET_MESSAGE","payload","status","data","message","Promise","resolve","error","console","log","error_message","toString","code","SAVE_FAIL","reject","getDiscoverProducts","query","page","limit","GET_DISCOVER_PRODUCT","products","SET_PRODUCT_MESSAGE","getImage","image","token","GET_IMAGE","FAIL_GET_IMAGE","getProduct","id","GET_PRODUCT","product","getProductDetails","GET_PRODUCT_DETAILS","deleteProduct","DELETE_PRODUCT","action","updateProduct","productId","UPDATE_PRODUCT","updatedProduct","searchProductByBarcodeOrName","SEARCH_PRODUCT","getProductsByCategoryName","categoryName","GET_PRODUCT_BY_CATEGORY_NAME","getProductsByStatus","GET_PRODUCTS_BY_STATUS","getProductsWithPromo","GET_PRODUCTS_WITH_PROMO","axios","post","headers","authHeader","put","delete","getProducts","get","params","path","getPath","responseType","getTotals","getProductsAndCountTatolSold","DashboardApiService","GET_TOTALS","summaries","errorMessage","GET_PRODUCTS_COUNT_TOTAL_SOLD","WidgetsDropdown","lazy","Dashboard","Component","state","totalPages","productsTotalSold","this","props","manageDashboardResponse","prevPros","prevState","dashboardResponse","setState","handleProductPage","selected","manageStatus","color","shape","handleStatusOnClick","componentDidMount","componentDidUpdate","prevProps","manageProductResponse","productResponse","render","totalSold","productNames","map","item","index","push","productName","className","sm","labels","datasets","label","backgroundColor","value","active","onClick","striped","hover","responsive","bordered","align","to","pathname","config","api","private","prefixFrontendUrl","totalItems","scope","length","barcode","productPrice","threshold","totalStock","inventory","String","height","width","fontSize","margin","background","toFixed","colSpan","connect","productResponser"],"mappings":"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","file":"static/js/39.ea3e3f33.chunk.js","sourcesContent":["// import RestApi from '../RestApi'\nimport { SET_MESSAGE } from \"src/constants/userConstants\"\nimport ProductApiService from \"src/service/restAPI/ProductApiService\"\nimport {\n  DELETE_PRODUCT,\n  FAIL_GET_IMAGE,\n  GET_DISCOVER_PRODUCT,\n  GET_IMAGE,\n  GET_PRODUCT,\n  GET_PRODUCTS,\n  GET_PRODUCTS_BY_STATUS,\n  GET_PRODUCTS_WITH_PROMO,\n  GET_PRODUCT_BY_CATEGORY_NAME,\n  GET_PRODUCT_DETAILS,\n  SAVE_FAIL,\n  // UPDATE_PRODUCT,\n  // DELETE_PRODUCT\n  SAVE_PRODUCT,\n  SEARCH_PRODUCT,\n  SET_PRODUCT_MESSAGE,\n  UPDATE_PRODUCT,\n} from \"../../redux/constants\"\n\nexport const saveProduct = (formData) => async (dispatch) => {\n  return ProductApiService.saveProduct(formData).then(\n    (response) => {\n      dispatch({\n        type: SAVE_PRODUCT,\n      })\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: 200,\n          data: {\n            message: \"Successfully Saved\",\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      console.log(error)\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.error_message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.toString()\n      console.log(status)\n      dispatch({\n        type: SAVE_FAIL,\n      })\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: message,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\nexport const getProducts = (query, page, limit) => async (dispatch) => {\n  return ProductApiService.getProducts(query, page, limit).then(\n    (response) => {\n      dispatch({\n        type: GET_PRODUCTS,\n        payload: {\n          status: 200,\n          data: {\n            products: response.data,\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.error_message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.status ||\n        error.toString()\n\n      dispatch({\n        type: SET_PRODUCT_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: message,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\nexport const getDiscoverProducts = (query, page, limit) => async (dispatch) => {\n  return ProductApiService.getDiscoverProducts(query, page, limit).then(\n    (response) => {\n      dispatch({\n        type: GET_DISCOVER_PRODUCT,\n        payload: {\n          status: 200,\n          data: {\n            products: response.data,\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.error_message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.status ||\n        error.toString()\n\n      dispatch({\n        type: SET_PRODUCT_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: message,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\nexport const getImage = (image, token) => async (dispatch) => {\n  return ProductApiService.getImage(image, token).then(\n    (response) => {\n      console.log(response)\n      dispatch({\n        type: GET_IMAGE,\n        payload: {\n          status: response.status,\n          data: {\n            image: response.data,\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.error_message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.status ||\n        error.toString()\n      dispatch({\n        type: FAIL_GET_IMAGE,\n      })\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: message,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\nexport const getProduct = (id) => async (dispatch) => {\n  return ProductApiService.getProduct(id).then(\n    (response) => {\n      dispatch({\n        type: GET_PRODUCT,\n        payload: {\n          status: 200,\n          data: {\n            product: response.data,\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.error_message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.status ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: message,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\nexport const getProductDetails = (id) => async (dispatch) => {\n  return ProductApiService.getProductDetails(id).then(\n    (response) => {\n      dispatch({\n        type: GET_PRODUCT_DETAILS,\n        payload: {\n          status: 200,\n          data: {\n            product: response.data,\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.error_message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.status ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: message,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\nexport const deleteProduct = (id) => async (dispatch) => {\n  return ProductApiService.deleteProduct(id).then(\n    (response) => {\n      dispatch({\n        type: DELETE_PRODUCT,\n        payload: {\n          status: 200,\n          action: DELETE_PRODUCT,\n          data: {},\n        },\n      })\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: 200,\n          data: {\n            message: \"Successfully Deleted\",\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.error_message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.status ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: message,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\n\nexport const updateProduct = (productId, formData) => async (dispatch) => {\n  return ProductApiService.updateProduct(productId, formData).then(\n    (response) => {\n      dispatch({\n        type: UPDATE_PRODUCT,\n        payload: {\n          status: 200,\n          action: UPDATE_PRODUCT,\n          data: {\n            updatedProduct: response.data,\n          },\n        },\n      })\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: 200,\n          data: {\n            message: \"Successfully Updated\",\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.error_message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.status ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: message,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\nexport const searchProductByBarcodeOrName =\n  (query, page, limit) => async (dispatch) => {\n    return ProductApiService.searchProductByBarcodeOrName(\n      query,\n      page,\n      limit,\n    ).then(\n      (response) => {\n        dispatch({\n          type: SEARCH_PRODUCT,\n          payload: {\n            status: 200,\n            action: SEARCH_PRODUCT,\n            data: {\n              products: response.data,\n            },\n          },\n        })\n        return Promise.resolve()\n      },\n      (error) => {\n        const message =\n          (error.response &&\n            error.response.data &&\n            error.response.data.message) ||\n          error.message ||\n          error.error_message ||\n          error.toString()\n\n        const status =\n          (error.response && error.response.data && error.response.data.code) ||\n          error.status ||\n          error.toString()\n\n        dispatch({\n          type: SET_MESSAGE,\n          payload: {\n            status: status,\n            data: {\n              message: message,\n            },\n          },\n        })\n        return Promise.reject()\n      },\n    )\n  }\n\nexport const getProductsByCategoryName =\n  (categoryName, query, page, limit) => async (dispatch) => {\n    return ProductApiService.getProductsByCategoryName(\n      categoryName,\n      query,\n      page,\n      limit,\n    ).then(\n      (response) => {\n        dispatch({\n          type: GET_PRODUCT_BY_CATEGORY_NAME,\n          payload: {\n            status: 200,\n            action: GET_PRODUCT_BY_CATEGORY_NAME,\n            data: {\n              products: response.data,\n            },\n          },\n        })\n        return Promise.resolve()\n      },\n      (error) => {\n        const message =\n          (error.response &&\n            error.response.data &&\n            error.response.data.message) ||\n          error.message ||\n          error.error_message ||\n          error.toString()\n\n        const status =\n          (error.response && error.response.data && error.response.data.code) ||\n          error.status ||\n          error.toString()\n\n        dispatch({\n          type: SET_MESSAGE,\n          payload: {\n            status: status,\n            data: {\n              message: message,\n            },\n          },\n        })\n        return Promise.reject()\n      },\n    )\n  }\nexport const getProductsByStatus =\n  (query, status, page, limit) => async (dispatch) => {\n    return ProductApiService.getProductsByStatus(\n      query,\n      status,\n      page,\n      limit,\n    ).then(\n      (response) => {\n        dispatch({\n          type: GET_PRODUCTS_BY_STATUS,\n          payload: {\n            status: 200,\n            action: GET_PRODUCTS_BY_STATUS,\n            data: {\n              products: response.data,\n            },\n          },\n        })\n      },\n      (error) => {\n        const message =\n          (error.response &&\n            error.response.data &&\n            error.response.data.message) ||\n          error.message ||\n          error.error_message ||\n          error.toString()\n\n        const status =\n          (error.response && error.response.data && error.response.data.code) ||\n          error.status ||\n          error.toString()\n\n        dispatch({\n          type: SET_MESSAGE,\n          payload: {\n            status: status,\n            data: {\n              message: message,\n            },\n          },\n        })\n        return Promise.reject()\n      },\n    )\n  }\n\nexport const getProductsWithPromo =\n  (status, query, page, limit) => async (dispatch) => {\n    return ProductApiService.getProductsWithPromo(\n      status,\n      query,\n      page,\n      limit,\n    ).then(\n      (response) => {\n        dispatch({\n          type: GET_PRODUCTS_WITH_PROMO,\n          payload: {\n            status: 200,\n            action: GET_PRODUCTS_WITH_PROMO,\n            data: {\n              products: response.data,\n            },\n          },\n        })\n        return Promise.resolve()\n      },\n      (error) => {\n        const message =\n          (error.response &&\n            error.response.data &&\n            error.response.data.message) ||\n          error.message ||\n          error.error_message ||\n          error.toString()\n\n        const status =\n          (error.response && error.response.data && error.response.data.code) ||\n          error.status ||\n          error.toString()\n\n        dispatch({\n          type: SET_MESSAGE,\n          payload: {\n            status: status,\n            data: {\n              message: message,\n            },\n          },\n        })\n        return Promise.reject()\n      },\n    )\n  }\n","import authHeader from \"../auth/authHeader\"\nimport axios from \"./RestApi\"\n\nexport class ProductApiService {\n  saveProduct(formData) {\n    return axios.post(\"/products/save\", formData, { headers: authHeader() })\n  }\n  updateProduct(productId, formData) {\n    return axios.put(\"/products/update/\" + productId, formData, {\n      headers: authHeader(),\n    })\n  }\n  deleteProduct(id) {\n    return axios.delete(\"/products/delete/\" + id, {\n      headers: authHeader(),\n    })\n  }\n  getProducts(query, page, limit) {\n    return axios.get(\"/products\", {\n      headers: authHeader(),\n      params: {\n        query: query,\n        page: page,\n        limit: limit,\n      },\n    })\n  }\n  getImage(path, image) {\n    console.log()\n    let getPath = path ? path : \"null/\"\n\n    return axios.get(\"/products/getImages/bytesArrays/\" + getPath + image, {\n      responseType: \"blob\",\n    })\n  }\n  getProduct(id) {\n    return axios.get(\"/products/\" + id, {\n      headers: authHeader(),\n    })\n  }\n  getProductDetails(id) {\n    return axios.get(\"/products/details/\" + id, {\n      headers: authHeader(),\n    })\n  }\n  getDiscoverProducts(query, page, limit) {\n    return axios.get(\"/products/discover\", {\n      params: {\n        query: query,\n        page: page,\n        limit: limit,\n      },\n    })\n  }\n  searchProductByBarcodeOrName(query, page, limit) {\n    return axios.get(\"/products/search\", {\n      params: {\n        query: query,\n        page: page,\n        limit: limit,\n      },\n    })\n  }\n  getProductsByCategoryName(categoryName, query, page, limit) {\n    return axios.get(\"/products/category/\" + categoryName, {\n      params: {\n        query: query,\n        page: page,\n        limit: limit,\n      },\n    })\n  }\n  getProductsByStatus(query, status, page, limit) {\n    return axios.get(\"/products/status\", {\n      headers: authHeader(),\n      params: {\n        status: status,\n        query: query,\n        page: page,\n        limit: limit,\n      },\n    })\n  }\n  getProductsWithPromo(status, query, page, limit) {\n    return axios.get(\"/products/promo\", {\n      params: {\n        status: status,\n        query: query,\n        page: page,\n        limit: limit,\n      },\n    })\n  }\n}\n\nexport default new ProductApiService()\n\n// export default new ProductApiService();\n","import axios from \"./RestApi\"\r\nimport authHeader from \"../auth/authHeader\"\r\nexport class DashboardApiService {\r\n  getTotals() {\r\n    return axios.get(\"/summaries\", {\r\n      headers: authHeader(),\r\n    })\r\n  }\r\n  getProductsAndCountTatolSold(query, page, limit) {\r\n    return axios.get(\"/summaries/products/sold\", {\r\n      headers: authHeader(),\r\n      params: {\r\n        query: query,\r\n        page: page,\r\n        limit: limit,\r\n      },\r\n    })\r\n  }\r\n}\r\nexport default new DashboardApiService()\r\n","import { SET_MESSAGE } from \"src/constants/userConstants\"\r\nimport {\r\n  GET_PRODUCTS_COUNT_TOTAL_SOLD,\r\n  GET_TOTALS,\r\n} from \"src/service/redux/constants\"\r\nimport DashboardApiService from \"src/service/restAPI/DashboardApiService\"\r\n\r\nexport const getTotals = () => async (dispatch) => {\r\n  return DashboardApiService.getTotals().then(\r\n    (response) => {\r\n      dispatch({\r\n        type: GET_TOTALS,\r\n        payload: {\r\n          status: 200,\r\n          action: GET_TOTALS,\r\n          data: {\r\n            summaries: response.data,\r\n          },\r\n        },\r\n      })\r\n      return Promise.resolve()\r\n    },\r\n    (error) => {\r\n      const errorMessage =\r\n        (error.response &&\r\n          error.response.data &&\r\n          error.response.data.message) ||\r\n        error.message ||\r\n        error.toString()\r\n\r\n      const status =\r\n        (error.response && error.response.data && error.response.data.code) ||\r\n        error.toString()\r\n\r\n      dispatch({\r\n        type: SET_MESSAGE,\r\n        payload: {\r\n          status: status,\r\n          data: {\r\n            message: errorMessage,\r\n          },\r\n        },\r\n      })\r\n      return Promise.reject()\r\n    },\r\n  )\r\n}\r\n\r\nexport const getProductsAndCountTatolSold =\r\n  (query, page, limit) => async (dispatch) => {\r\n    return DashboardApiService.getProductsAndCountTatolSold(\r\n      query,\r\n      page,\r\n      limit,\r\n    ).then(\r\n      (response) => {\r\n        dispatch({\r\n          type: GET_PRODUCTS_COUNT_TOTAL_SOLD,\r\n          payload: {\r\n            status: 200,\r\n            action: GET_PRODUCTS_COUNT_TOTAL_SOLD,\r\n            data: {\r\n              products: response.data,\r\n            },\r\n          },\r\n        })\r\n      },\r\n      (error) => {\r\n        const errorMessage =\r\n          (error.response &&\r\n            error.response.data &&\r\n            error.response.data.message) ||\r\n          error.message ||\r\n          error.toString()\r\n\r\n        const status =\r\n          (error.response && error.response.data && error.response.data.code) ||\r\n          error.toString()\r\n\r\n        dispatch({\r\n          type: SET_MESSAGE,\r\n          payload: {\r\n            status: status,\r\n            data: {\r\n              message: errorMessage,\r\n            },\r\n          },\r\n        })\r\n        return Promise.reject()\r\n      },\r\n    )\r\n  }\r\n","import React, { Component, lazy } from \"react\"\nimport { Link } from \"react-router-dom\"\nimport {\n  CButton,\n  CButtonGroup,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CRow,\n  CTable,\n  CTableHead,\n  CTableRow,\n  CTableHeaderCell,\n  CTableDataCell,\n  CTableBody,\n  CTableCaption,\n  CBadge,\n} from \"@coreui/react\"\nimport { CChartBar } from \"@coreui/react-chartjs\"\nimport { getProductsByStatus } from \"src/service/apiActions/productAction/productAction.js\"\nimport { connect } from \"react-redux\"\nimport Barcode from \"react-barcode\"\nimport { getProductsAndCountTatolSold } from \"src/service/apiActions/dashboardAction/dashboardAction.js\"\nimport config from \"../../../config\"\n\nconst WidgetsDropdown = lazy(() =>\n  import(\"../../../components/widgets/WidgetsDropdown.js\"),\n)\n\nexport class Dashboard extends Component {\n  state = {\n    products: {\n      data: [],\n      totalPages: 0,\n    },\n    status: \"OUT_OF_STOCK\",\n    page: 0,\n    limit: 10,\n    query: \"\",\n    productsTotalSold: {\n      data: [],\n      totalPages: 0,\n    },\n  }\n\n  componentDidMount() {\n    const { page, status, limit, query } = this.state\n    this.getProducts(page, status, limit, query)\n    this.getProductsAndCountTatolSold(query, page, limit)\n  }\n  getProductsAndCountTatolSold = (query, page, limit) => {\n    this.props.getProductsAndCountTatolSold(query, page, limit)\n  }\n  componentDidUpdate(prevProps, prevState) {\n    this.manageProductResponse(prevProps, prevState)\n    this.manageDashboardResponse(prevProps, prevState)\n  }\n\n  manageProductResponse(prevProps, prevState) {\n    if (prevProps.productResponse !== this.props.productResponse) {\n      let { action, status, data } = this.props.productResponse\n      console.log(this.props.productResponse)\n      if (status === 200 && action === \"GET_PRODUCTS_BY_STATUS\") {\n        this.setState({\n          products: data.products,\n        })\n      }\n    }\n  }\n\n  manageDashboardResponse = (prevPros, prevState) => {\n    if (prevPros.dashboardResponse !== this.props.dashboardResponse) {\n      const { status, action, data } = this.props.dashboardResponse\n      console.log(this.props.dashboardResponse)\n      if (status === 200 && action === \"GET_PRODUCTS_COUNT_TOTAL_SOLD\") {\n        this.setState({\n          productsTotalSold: data.products,\n        })\n      }\n    }\n  }\n  getProducts(page, status, limit, query) {\n    this.props.getProductsByStatus(query, status, page, limit)\n  }\n  handleProductPage = (data) => {\n    let page = data.selected\n    this.setState({ page: page })\n    const { limit, query, status } = this.state\n    this.getProducts(query, status, page, limit)\n  }\n  manageStatus = (status) => {\n    switch (status) {\n      case \"OK\":\n        return (\n          <CBadge color=\"success\" shape=\"rounded-pill\">\n            {status}\n          </CBadge>\n        )\n      case \"LOW\":\n        return (\n          <CBadge color=\"warning\" shape=\"rounded-pill\">\n            {status}\n          </CBadge>\n        )\n      case \"OUT_OF_STOCK\":\n        return (\n          <CBadge color=\"danger\" shape=\"rounded-pill\">\n            OUT OF STOCK\n          </CBadge>\n        )\n      default:\n        return (\n          <CBadge color=\"danger\" shape=\"rounded-pill\">\n            {status}\n          </CBadge>\n        )\n    }\n  }\n  handleStatusOnClick = (status) => {\n    this.setState({\n      status: status,\n    })\n    const { query, page, limit } = this.state\n    this.getProducts(page, status, limit, query)\n  }\n  render() {\n    const { products, status, productsTotalSold } = this.state\n\n    let totalSold = []\n    let productNames = []\n    productsTotalSold.data.map((item, index) => {\n      totalSold.push(item.totalSold)\n      productNames.push(item.productName)\n    })\n\n    return (\n      <>\n        <WidgetsDropdown />\n\n        <CCard className=\"mb-4\">\n          <CCardHeader>\n            <CRow>\n              <CCol sm=\"5\">\n                <h4 id=\"traffic\" className=\"card-title mb-0\">\n                  Top 10 Most Sold Product\n                </h4>\n              </CCol>\n            </CRow>\n          </CCardHeader>\n          <CCardBody>\n            <CChartBar\n              data={{\n                labels: productNames,\n                datasets: [\n                  {\n                    label: \"Sold Product\",\n                    backgroundColor: \"#f87979\",\n                    data: totalSold,\n                  },\n                ],\n              }}\n              labels=\"months\"\n            />\n          </CCardBody>\n        </CCard>\n        <CCard className=\"mb-4 bg-transparent border-0\">\n          <CCardHeader>\n            <CRow>\n              <CCol sm=\"5\" className=\"d-flex align-items-center\">\n                <h4 className=\"card-title mb-0 \">Products need Action</h4>\n              </CCol>\n              <CCol sm=\"7\">\n                <CButtonGroup className=\"float-end\">\n                  {[\"OUT_OF_STOCK\", \"LOW\"].map((value) => (\n                    <CButton\n                      color={\n                        value === \"LOW\" ? \"outline-warning\" : \"outline-danger\"\n                      }\n                      key={value}\n                      className=\"mx-0\"\n                      active={value === status}\n                      onClick={() => this.handleStatusOnClick(value)}\n                    >\n                      {value}\n                    </CButton>\n                  ))}\n                </CButtonGroup>\n              </CCol>\n            </CRow>\n          </CCardHeader>\n          <CCardBody className=\"p-0 m-0 \">\n            <CTable\n              striped\n              hover\n              className=\"shadow-sm \"\n              responsive\n              bordered\n              align=\"middle\"\n            >\n              <CTableCaption>\n                <div className=\"d-flex justify-content-between align-items-center\">\n                  <div>\n                    <Link\n                      to={{\n                        pathname:\n                          config.api.private.prefixFrontendUrl +\n                          \"/app/products/products\",\n                        state: status,\n                      }}\n                    >\n                      View More\n                    </Link>\n                  </div>\n                  <div>\n                    List of Products: <b>{products.totalItems}</b>\n                  </div>\n                </div>\n              </CTableCaption>\n\n              <CTableHead color=\"dark\">\n                <CTableRow className=\"text-center\">\n                  {/* <CTableHeaderCell scope=\"col\">Image</CTableHeaderCell> */}\n                  <CTableHeaderCell scope=\"col\">Barcode</CTableHeaderCell>\n                  <CTableHeaderCell scope=\"col\">Name</CTableHeaderCell>\n                  <CTableHeaderCell scope=\"col\">Price</CTableHeaderCell>\n                  <CTableHeaderCell scope=\"col\">\n                    Alert Stocks Threshold\n                  </CTableHeaderCell>\n                  <CTableHeaderCell scope=\"col\">Total Stocks</CTableHeaderCell>\n                  <CTableHeaderCell scope=\"col\">Status</CTableHeaderCell>\n                </CTableRow>\n              </CTableHead>\n              <CTableBody className=\"text-center\" color=\"light\">\n                {products.data && products.data.length > 0 ? (\n                  products.data.map((product, index) => {\n                    const { id, barcode, productName, productPrice } =\n                      product.product\n                    const { threshold, status, totalStock } = product.inventory\n                    return (\n                      <CTableRow className=\"text-center\" key={index}>\n                        <CTableDataCell>\n                          <Barcode\n                            value={String(barcode)}\n                            height={50}\n                            width={1}\n                            fontSize={14}\n                            margin={7}\n                            background=\"#f5f5f548\"\n                          />\n                        </CTableDataCell>\n                        <CTableDataCell>{productName}</CTableDataCell>\n                        <CTableDataCell>\n                          &#8369;{productPrice.toFixed(2)}\n                        </CTableDataCell>\n                        <CTableDataCell>{threshold}</CTableDataCell>\n                        <CTableDataCell>{totalStock}</CTableDataCell>\n                        <CTableDataCell>\n                          {this.manageStatus(status)}\n                        </CTableDataCell>\n                      </CTableRow>\n                    )\n                  })\n                ) : (\n                  <CTableRow>\n                    <CTableDataCell colSpan=\"7\">No data</CTableDataCell>\n                  </CTableRow>\n                )}\n              </CTableBody>\n            </CTable>\n          </CCardBody>\n        </CCard>\n      </>\n    )\n  }\n}\nconst mapStateToProps = (state) => {\n  return {\n    productResponse: state.productResponser,\n    dashboardResponse: state.dashboardResponse,\n  }\n}\nexport default connect(mapStateToProps, {\n  getProductsByStatus,\n  getProductsAndCountTatolSold,\n})(Dashboard)\n"],"sourceRoot":""}