{"version":3,"sources":["../../inventory-management-system-reactjs/src/components/category/CategoryList.js","../../inventory-management-system-reactjs/src/service/restAPI/CategoriesApiService.js","../../inventory-management-system-reactjs/src/service/apiActions/categoryAction/categoryAction.js"],"names":["CategoryList","Component","state","message","categoriesList","getCategoriesList","this","props","manageCategoriesListResponse","prevProps","prevState","categoryResponse","status","action","data","setState","componentDidMount","componentDidUpdate","render","className","role","length","map","category","index","to","pathname","categoryName","style","fontStyle","connect","messageResponse","saveCategory","name","axios","post","headers","authHeader","updateCategory","id","put","deleteCategory","delete","getCategories","query","page","limit","get","params","getCategory","async","CategoriesApiService","then","response","dispatch","type","SAVE_CATEGORY","payload","SET_MESSAGE","Promise","resolve","error","error_message","toString","code","reject","GET_CATEGORIES","categories","GET_CATEGORIES_LIST","UPDATE_CATEGORY","updatedCategory","DELETE_CATEGORY"],"mappings":"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","file":"static/js/50.a84cd10c.chunk.js","sourcesContent":["import React, { Component } from \"react\"\nimport { connect } from \"react-redux\"\nimport { Link } from \"react-router-dom\"\n//action\nimport { getCategoriesList } from \"src/service/apiActions/categoryAction/categoryAction\"\nexport class CategoryList extends Component {\n  state = {\n    message: \"\",\n    categoriesList: [],\n  }\n  componentDidMount() {\n    this.getCategoriesList()\n  }\n\n  getCategoriesList = () => {\n    this.props.getCategoriesList()\n  }\n  \n  componentDidUpdate(prevProps, prevState) {\n    this.manageCategoriesListResponse(prevProps, prevState)\n  }\n  manageCategoriesListResponse = (prevProps, prevState) => {\n    if (prevProps.categoryResponse !== this.props.categoryResponse) {\n      let { status, action, data } = this.props.categoryResponse\n      if (status === 200 && action === \"GET_CATEGORIES_LIST\") {\n        this.setState({\n          categoriesList: data.categoriesList,\n        })\n      }\n    }\n  }\n  render() {\n    let { message, categoriesList } = this.state\n    return (\n      <>\n        {message && (\n          <div className=\"form-group d-flex justify-content-center align-items-center\">\n            <div className=\"alert alert-danger\" role=\"alert\">\n              {message}\n            </div>\n          </div>\n        )}\n        <div className=\"overflow-hidden category-wrapper\">\n          <div className=\"category-header\">\n            <span>Categories</span>\n          </div>\n          <div className=\"list-container\">\n            <ul>\n              {categoriesList.length > 0 ? (\n                categoriesList.map((category, index) => {\n                  return (\n                    <li className=\"drop-list-item  text-break\" key={index}>\n                      <Link\n                        to={{\n                          pathname:\n                            \"/products/category/\" + category.categoryName,\n                          state: category.categoryName,\n                        }}\n                        className=\"list-item-link\"\n                      >\n                        {category.categoryName}\n                      </Link>\n                    </li>\n                  )\n                })\n              ) : (\n                <li className=\"drop-list-item\">\n                  <span\n                    className=\"list-item-link \"\n                    style={{ fontStyle: \"italic\" }}\n                  >\n                    No Category List Available\n                  </span>\n                </li>\n              )}\n            </ul>\n          </div>\n        </div>\n      </>\n    )\n  }\n}\nconst mapStateToProps = (state) => {\n  return {\n    categoryResponse: state.categoryResponse,\n    messageResponse: state.messageResponse,\n  }\n}\nexport default connect(mapStateToProps, {\n  getCategoriesList,\n})(CategoryList)\n","import authHeader from \"../auth/authHeader\"\nimport axios from \"./RestApi\"\n\nexport class CategoriesApiService {\n  saveCategory(categoryName) {\n    let name = categoryName\n    return axios.post(\n      \"/categories/save\",\n      {\n        name,\n      },\n      {\n        headers: authHeader(),\n      },\n    )\n  }\n  updateCategory(id, name) {\n    return axios.put(\n      \"/categories/update/\" + id,\n      {\n        name,\n      },\n      {\n        headers: authHeader(),\n      },\n    )\n  }\n\n  deleteCategory(id) {\n    return axios.delete(\"/categories/delete/\" + id, {\n      headers: authHeader(),\n    })\n  }\n  getCategories(query, page, limit) {\n    return axios.get(\"/categories\", {\n      headers: authHeader(),\n      params: {\n        query,\n        page,\n        limit,\n      },\n    })\n  }\n  getCategory(id) {\n    return axios.get(\"/categories/id\", {\n      headers: authHeader(),\n    })\n  }\n  getCategoriesList() {\n    return axios.get(\"/categories/list\")\n  }\n}\nexport default new CategoriesApiService()\n","import { SET_MESSAGE } from \"src/constants/userConstants\"\nimport {\n  DELETE_CATEGORY,\n  GET_CATEGORIES,\n  GET_CATEGORIES_LIST,\n  GET_CATEGORY,\n  SAVE_CATEGORY,\n  UPDATE_CATEGORY,\n} from \"src/service/redux/constants\"\nimport CategoriesApiService from \"src/service/restAPI/CategoriesApiService\"\n\nexport const saveCategory = (categoryName) => async (dispatch) => {\n  return CategoriesApiService.saveCategory(categoryName).then(\n    (response) => {\n      dispatch({\n        type: SAVE_CATEGORY,\n        payload: {\n          status: 200,\n          action: SAVE_CATEGORY,\n          data: {},\n        },\n      })\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: 200,\n          data: {\n            message: \"Successfully Saved\",\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.error_message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: message,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\nexport const getCategories = (query, page, limit) => async (dispatch) => {\n  return CategoriesApiService.getCategories(query, page, limit).then(\n    (response) => {\n      dispatch({\n        type: GET_CATEGORIES,\n        payload: {\n          status: 200,\n          action: GET_CATEGORIES,\n          data: {\n            categories: response.data,\n          },\n        },\n      })\n\n      return Promise.resolve()\n    },\n\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.error_message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: message,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\nexport const getCategoriesList = () => async (dispatch) => {\n  return CategoriesApiService.getCategoriesList().then(\n    (response) => {\n      dispatch({\n        type: GET_CATEGORIES_LIST,\n        payload: {\n          status: 200,\n          action: GET_CATEGORIES_LIST,\n          data: {\n            categoriesList: response.data,\n          },\n        },\n      })\n\n      return Promise.resolve()\n    },\n\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.error_message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: message,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\nexport const getCategory = (id) => async (dispatch) => {\n  return CategoriesApiService.getCategory(id).then(\n    (response) => {\n      dispatch({\n        type: GET_CATEGORY,\n        payload: {\n          status: 200,\n          action: GET_CATEGORY,\n          data: {\n            category: response.data,\n          },\n        },\n      })\n\n      return Promise.resolve()\n    },\n\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.error_message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: message,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\nexport const updateCategory = (id, name) => async (dispatch) => {\n  return CategoriesApiService.updateCategory(id, name).then(\n    (response) => {\n      dispatch({\n        type: UPDATE_CATEGORY,\n        payload: {\n          status: 200,\n          action: UPDATE_CATEGORY,\n          data: {\n            updatedCategory: response.data,\n          },\n        },\n      })\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: 200,\n          data: {\n            message: \"Successfully Updated\",\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.error_message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: message,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\n\nexport const deleteCategory = (id) => async (dispatch) => {\n  return CategoriesApiService.deleteCategory(id).then(\n    (response) => {\n      dispatch({\n        type: DELETE_CATEGORY,\n        payload: {\n          status: 200,\n          action: DELETE_CATEGORY,\n          data: {},\n        },\n      })\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: 200,\n          data: {\n            message: \"Successfully Deleted.\",\n          },\n        },\n      })\n      return Promise.resolve()\n    },\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.error_message ||\n        error.toString()\n\n      const status =\n        (error.response && error.response.data && error.response.data.code) ||\n        error.toString()\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: {\n          status: status,\n          data: {\n            message: message,\n          },\n        },\n      })\n      return Promise.reject()\n    },\n  )\n}\n"],"sourceRoot":""}